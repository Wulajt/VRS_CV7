
usart_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  08004958  08004958  00014958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c80  08004c80  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  08004c80  08004c80  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c80  08004c80  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c80  08004c80  00014c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c84  08004c84  00014c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08004c88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000138  200001d4  08004e5c  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08004e5c  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005b73  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001489  00000000  00000000  00025d77  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000658  00000000  00000000  00027200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005a0  00000000  00000000  00027858  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003050  00000000  00000000  00027df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000049bf  00000000  00000000  0002ae48  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00072322  00000000  00000000  0002f807  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a1b29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022fc  00000000  00000000  000a1ba4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004940 	.word	0x08004940

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08004940 	.word	0x08004940

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	; 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	fa93 f3a3 	rbit	r3, r3
 8000bc2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	fab3 f383 	clz	r3, r3
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	2103      	movs	r1, #3
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	43db      	mvns	r3, r3
 8000bd4:	401a      	ands	r2, r3
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	fa93 f3a3 	rbit	r3, r3
 8000be0:	61bb      	str	r3, [r7, #24]
  return(result);
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	fab3 f383 	clz	r3, r3
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	431a      	orrs	r2, r3
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	601a      	str	r2, [r3, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	3724      	adds	r7, #36	; 0x24
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr

08000c02 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b085      	sub	sp, #20
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	60f8      	str	r0, [r7, #12]
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	685a      	ldr	r2, [r3, #4]
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	43db      	mvns	r3, r3
 8000c16:	401a      	ands	r2, r3
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	6879      	ldr	r1, [r7, #4]
 8000c1c:	fb01 f303 	mul.w	r3, r1, r3
 8000c20:	431a      	orrs	r2, r3
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	605a      	str	r2, [r3, #4]
}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b089      	sub	sp, #36	; 0x24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	60f8      	str	r0, [r7, #12]
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	fa93 f3a3 	rbit	r3, r3
 8000c4c:	613b      	str	r3, [r7, #16]
  return(result);
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	fab3 f383 	clz	r3, r3
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	2103      	movs	r1, #3
 8000c58:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	401a      	ands	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	fa93 f3a3 	rbit	r3, r3
 8000c6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	fab3 f383 	clz	r3, r3
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	6879      	ldr	r1, [r7, #4]
 8000c76:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000c80:	bf00      	nop
 8000c82:	3724      	adds	r7, #36	; 0x24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b089      	sub	sp, #36	; 0x24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	68da      	ldr	r2, [r3, #12]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa93 f3a3 	rbit	r3, r3
 8000ca6:	613b      	str	r3, [r7, #16]
  return(result);
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	fab3 f383 	clz	r3, r3
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	2103      	movs	r1, #3
 8000cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	401a      	ands	r2, r3
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	fa93 f3a3 	rbit	r3, r3
 8000cc4:	61bb      	str	r3, [r7, #24]
  return(result);
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	fab3 f383 	clz	r3, r3
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd4:	431a      	orrs	r2, r3
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	60da      	str	r2, [r3, #12]
}
 8000cda:	bf00      	nop
 8000cdc:	3724      	adds	r7, #36	; 0x24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b089      	sub	sp, #36	; 0x24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	60f8      	str	r0, [r7, #12]
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	6a1a      	ldr	r2, [r3, #32]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	fa93 f3a3 	rbit	r3, r3
 8000d00:	613b      	str	r3, [r7, #16]
  return(result);
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	fab3 f383 	clz	r3, r3
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	210f      	movs	r1, #15
 8000d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	401a      	ands	r2, r3
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	fa93 f3a3 	rbit	r3, r3
 8000d1e:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	fab3 f383 	clz	r3, r3
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	6879      	ldr	r1, [r7, #4]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000d34:	bf00      	nop
 8000d36:	3724      	adds	r7, #36	; 0x24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b089      	sub	sp, #36	; 0x24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	0a1b      	lsrs	r3, r3, #8
 8000d54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	fa93 f3a3 	rbit	r3, r3
 8000d5c:	613b      	str	r3, [r7, #16]
  return(result);
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	fab3 f383 	clz	r3, r3
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	210f      	movs	r1, #15
 8000d68:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	401a      	ands	r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	0a1b      	lsrs	r3, r3, #8
 8000d74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	fa93 f3a3 	rbit	r3, r3
 8000d7c:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	fab3 f383 	clz	r3, r3
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000d92:	bf00      	nop
 8000d94:	3724      	adds	r7, #36	; 0x24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b088      	sub	sp, #32
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
 8000da6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	fa93 f3a3 	rbit	r3, r3
 8000dbc:	613b      	str	r3, [r7, #16]
  return(result);
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	fab3 f383 	clz	r3, r3
 8000dc4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000dc6:	e048      	b.n	8000e5a <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	2101      	movs	r1, #1
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d03a      	beq.n	8000e54 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	461a      	mov	r2, r3
 8000de4:	69b9      	ldr	r1, [r7, #24]
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff fede 	bl	8000ba8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d003      	beq.n	8000dfc <LL_GPIO_Init+0x5e>
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d106      	bne.n	8000e0a <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	461a      	mov	r2, r3
 8000e02:	69b9      	ldr	r1, [r7, #24]
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff14 	bl	8000c32 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	691b      	ldr	r3, [r3, #16]
 8000e0e:	461a      	mov	r2, r3
 8000e10:	69b9      	ldr	r1, [r7, #24]
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff ff3a 	bl	8000c8c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d119      	bne.n	8000e54 <LL_GPIO_Init+0xb6>
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	fa93 f3a3 	rbit	r3, r3
 8000e2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8000e2c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000e2e:	fab3 f383 	clz	r3, r3
 8000e32:	2b07      	cmp	r3, #7
 8000e34:	d807      	bhi.n	8000e46 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	695b      	ldr	r3, [r3, #20]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	69b9      	ldr	r1, [r7, #24]
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ff51 	bl	8000ce6 <LL_GPIO_SetAFPin_0_7>
 8000e44:	e006      	b.n	8000e54 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	69b9      	ldr	r1, [r7, #24]
 8000e4e:	6878      	ldr	r0, [r7, #4]
 8000e50:	f7ff ff76 	bl	8000d40 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	3301      	adds	r3, #1
 8000e58:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	fa22 f303 	lsr.w	r3, r2, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1af      	bne.n	8000dc8 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d003      	beq.n	8000e78 <LL_GPIO_Init+0xda>
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d107      	bne.n	8000e88 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	6819      	ldr	r1, [r3, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	461a      	mov	r2, r3
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff febd 	bl	8000c02 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3720      	adds	r7, #32
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <LL_RCC_HSI_IsReady+0x20>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	bf0c      	ite	eq
 8000ea4:	2301      	moveq	r3, #1
 8000ea6:	2300      	movne	r3, #0
 8000ea8:	b2db      	uxtb	r3, r3
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <LL_RCC_LSE_IsReady+0x20>)
 8000ebe:	6a1b      	ldr	r3, [r3, #32]
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	bf0c      	ite	eq
 8000ec8:	2301      	moveq	r3, #1
 8000eca:	2300      	movne	r3, #0
 8000ecc:	b2db      	uxtb	r3, r3
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	40021000 	.word	0x40021000

08000edc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <LL_RCC_GetSysClkSource+0x18>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 030c 	and.w	r3, r3, #12
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <LL_RCC_GetAHBPrescaler+0x18>)
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000

08000f14 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8000f18:	4b04      	ldr	r3, [pc, #16]	; (8000f2c <LL_RCC_GetAPB1Prescaler+0x18>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000

08000f30 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <LL_RCC_GetAPB2Prescaler+0x18>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000

08000f4c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <LL_RCC_GetUSARTClockSource+0x28>)
 8000f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f58:	2103      	movs	r1, #3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f60:	401a      	ands	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	061b      	lsls	r3, r3, #24
 8000f66:	4313      	orrs	r3, r2
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	40021000 	.word	0x40021000

08000f78 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <LL_RCC_PLL_GetMainSource+0x18>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40021000 	.word	0x40021000

08000f94 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <LL_RCC_PLL_GetMultiplicator+0x18>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000

08000fb0 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <LL_RCC_PLL_GetPrediv+0x18>)
 8000fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb8:	f003 030f 	and.w	r3, r3, #15
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000

08000fcc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8000fd4:	f000 f860 	bl	8001098 <RCC_GetSystemClockFreq>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f87a 	bl	80010dc <RCC_GetHCLKClockFreq>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f888 	bl	8001108 <RCC_GetPCLK1ClockFreq>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f894 	bl	8001130 <RCC_GetPCLK2ClockFreq>
 8001008:	4602      	mov	r2, r0
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	60da      	str	r2, [r3, #12]
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d12a      	bne.n	8001080 <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ff8e 	bl	8000f4c <LL_RCC_GetUSARTClockSource>
 8001030:	4603      	mov	r3, r0
 8001032:	2b02      	cmp	r3, #2
 8001034:	d00f      	beq.n	8001056 <LL_RCC_GetUSARTClockFreq+0x3e>
 8001036:	2b03      	cmp	r3, #3
 8001038:	d005      	beq.n	8001046 <LL_RCC_GetUSARTClockFreq+0x2e>
 800103a:	2b01      	cmp	r3, #1
 800103c:	d114      	bne.n	8001068 <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800103e:	f000 f82b 	bl	8001098 <RCC_GetSystemClockFreq>
 8001042:	60f8      	str	r0, [r7, #12]
        break;
 8001044:	e021      	b.n	800108a <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001046:	f7ff ff25 	bl	8000e94 <LL_RCC_HSI_IsReady>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d019      	beq.n	8001084 <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 8001050:	4b10      	ldr	r3, [pc, #64]	; (8001094 <LL_RCC_GetUSARTClockFreq+0x7c>)
 8001052:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001054:	e016      	b.n	8001084 <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001056:	f7ff ff2f 	bl	8000eb8 <LL_RCC_LSE_IsReady>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d013      	beq.n	8001088 <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 8001060:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001064:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001066:	e00f      	b.n	8001088 <LL_RCC_GetUSARTClockFreq+0x70>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001068:	f000 f816 	bl	8001098 <RCC_GetSystemClockFreq>
 800106c:	4603      	mov	r3, r0
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f834 	bl	80010dc <RCC_GetHCLKClockFreq>
 8001074:	4603      	mov	r3, r0
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f846 	bl	8001108 <RCC_GetPCLK1ClockFreq>
 800107c:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 800107e:	e004      	b.n	800108a <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 8001080:	bf00      	nop
 8001082:	e002      	b.n	800108a <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8001084:	bf00      	nop
 8001086:	e000      	b.n	800108a <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8001088:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 800108a:	68fb      	ldr	r3, [r7, #12]
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	007a1200 	.word	0x007a1200

08001098 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80010a2:	f7ff ff1b 	bl	8000edc <LL_RCC_GetSysClkSource>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b04      	cmp	r3, #4
 80010aa:	d006      	beq.n	80010ba <RCC_GetSystemClockFreq+0x22>
 80010ac:	2b08      	cmp	r3, #8
 80010ae:	d007      	beq.n	80010c0 <RCC_GetSystemClockFreq+0x28>
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d109      	bne.n	80010c8 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <RCC_GetSystemClockFreq+0x40>)
 80010b6:	607b      	str	r3, [r7, #4]
      break;
 80010b8:	e009      	b.n	80010ce <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80010ba:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <RCC_GetSystemClockFreq+0x40>)
 80010bc:	607b      	str	r3, [r7, #4]
      break;
 80010be:	e006      	b.n	80010ce <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80010c0:	f000 f84a 	bl	8001158 <RCC_PLL_GetFreqDomain_SYS>
 80010c4:	6078      	str	r0, [r7, #4]
      break;
 80010c6:	e002      	b.n	80010ce <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 80010c8:	4b03      	ldr	r3, [pc, #12]	; (80010d8 <RCC_GetSystemClockFreq+0x40>)
 80010ca:	607b      	str	r3, [r7, #4]
      break;
 80010cc:	bf00      	nop
  }

  return frequency;
 80010ce:	687b      	ldr	r3, [r7, #4]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	007a1200 	.word	0x007a1200

080010dc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80010e4:	f7ff ff08 	bl	8000ef8 <LL_RCC_GetAHBPrescaler>
 80010e8:	4603      	mov	r3, r0
 80010ea:	091b      	lsrs	r3, r3, #4
 80010ec:	f003 030f 	and.w	r3, r3, #15
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <RCC_GetHCLKClockFreq+0x28>)
 80010f2:	5cd3      	ldrb	r3, [r2, r3]
 80010f4:	461a      	mov	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	40d3      	lsrs	r3, r2
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	08004a08 	.word	0x08004a08

08001108 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001110:	f7ff ff00 	bl	8000f14 <LL_RCC_GetAPB1Prescaler>
 8001114:	4603      	mov	r3, r0
 8001116:	0a1b      	lsrs	r3, r3, #8
 8001118:	4a04      	ldr	r2, [pc, #16]	; (800112c <RCC_GetPCLK1ClockFreq+0x24>)
 800111a:	5cd3      	ldrb	r3, [r2, r3]
 800111c:	461a      	mov	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	40d3      	lsrs	r3, r2
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	08004a18 	.word	0x08004a18

08001130 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001138:	f7ff fefa 	bl	8000f30 <LL_RCC_GetAPB2Prescaler>
 800113c:	4603      	mov	r3, r0
 800113e:	0adb      	lsrs	r3, r3, #11
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <RCC_GetPCLK2ClockFreq+0x24>)
 8001142:	5cd3      	ldrb	r3, [r2, r3]
 8001144:	461a      	mov	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	40d3      	lsrs	r3, r2
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	08004a18 	.word	0x08004a18

08001158 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001158:	b590      	push	{r4, r7, lr}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001166:	f7ff ff07 	bl	8000f78 <LL_RCC_PLL_GetMainSource>
 800116a:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <RCC_PLL_GetFreqDomain_SYS+0x22>
 8001172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001176:	d003      	beq.n	8001180 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8001178:	e005      	b.n	8001186 <RCC_PLL_GetFreqDomain_SYS+0x2e>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800117a:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 800117c:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800117e:	e005      	b.n	800118c <RCC_PLL_GetFreqDomain_SYS+0x34>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001182:	60fb      	str	r3, [r7, #12]
      break;
 8001184:	e002      	b.n	800118c <RCC_PLL_GetFreqDomain_SYS+0x34>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8001186:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8001188:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800118a:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 800118c:	f7ff ff10 	bl	8000fb0 <LL_RCC_PLL_GetPrediv>
 8001190:	4603      	mov	r3, r0
 8001192:	3301      	adds	r3, #1
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	fbb2 f4f3 	udiv	r4, r2, r3
 800119a:	f7ff fefb 	bl	8000f94 <LL_RCC_PLL_GetMultiplicator>
 800119e:	4603      	mov	r3, r0
 80011a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80011a4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80011a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	fa92 f2a2 	rbit	r2, r2
 80011b0:	603a      	str	r2, [r7, #0]
  return(result);
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	fab2 f282 	clz	r2, r2
 80011b8:	40d3      	lsrs	r3, r2
 80011ba:	3302      	adds	r3, #2
 80011bc:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd90      	pop	{r4, r7, pc}
 80011c8:	003d0900 	.word	0x003d0900
 80011cc:	007a1200 	.word	0x007a1200

080011d0 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0301 	and.w	r3, r3, #1
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	bf0c      	ite	eq
 80011e4:	2301      	moveq	r3, #1
 80011e6:	2300      	movne	r3, #0
 80011e8:	b2db      	uxtb	r3, r3
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	605a      	str	r2, [r3, #4]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	609a      	str	r2, [r3, #8]
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8001242:	b4b0      	push	{r4, r5, r7}
 8001244:	b085      	sub	sp, #20
 8001246:	af00      	add	r7, sp, #0
 8001248:	60f8      	str	r0, [r7, #12]
 800124a:	60b9      	str	r1, [r7, #8]
 800124c:	607a      	str	r2, [r7, #4]
 800124e:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
 8001250:	2500      	movs	r5, #0
  register uint32_t brrtemp = 0x0U;
 8001252:	2400      	movs	r4, #0

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800125a:	d114      	bne.n	8001286 <LL_USART_SetBaudRate+0x44>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	005a      	lsls	r2, r3, #1
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	085b      	lsrs	r3, r3, #1
 8001264:	441a      	add	r2, r3
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	fbb2 f3f3 	udiv	r3, r2, r3
 800126c:	b29b      	uxth	r3, r3
 800126e:	461d      	mov	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 8001270:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8001274:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001276:	086b      	lsrs	r3, r5, #1
 8001278:	b29b      	uxth	r3, r3
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	60dc      	str	r4, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8001284:	e00a      	b.n	800129c <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	085a      	lsrs	r2, r3, #1
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	441a      	add	r2, r3
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	fbb2 f3f3 	udiv	r3, r2, r3
 8001294:	b29b      	uxth	r3, r3
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	60da      	str	r2, [r3, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bcb0      	pop	{r4, r5, r7}
 80012a4:	4770      	bx	lr
	...

080012a8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ff88 	bl	80011d0 <LL_USART_IsEnabled>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d14e      	bne.n	8001364 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	4b29      	ldr	r3, [pc, #164]	; (8001370 <LL_USART_Init+0xc8>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	6851      	ldr	r1, [r2, #4]
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	68d2      	ldr	r2, [r2, #12]
 80012d6:	4311      	orrs	r1, r2
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	6912      	ldr	r2, [r2, #16]
 80012dc:	4311      	orrs	r1, r2
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	6992      	ldr	r2, [r2, #24]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	431a      	orrs	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	4619      	mov	r1, r3
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff80 	bl	80011f6 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	4619      	mov	r1, r3
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff8d 	bl	800121c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a1b      	ldr	r2, [pc, #108]	; (8001374 <LL_USART_Init+0xcc>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d104      	bne.n	8001314 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800130a:	2000      	movs	r0, #0
 800130c:	f7ff fe84 	bl	8001018 <LL_RCC_GetUSARTClockFreq>
 8001310:	61b8      	str	r0, [r7, #24]
 8001312:	e016      	b.n	8001342 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a18      	ldr	r2, [pc, #96]	; (8001378 <LL_USART_Init+0xd0>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d107      	bne.n	800132c <LL_USART_Init+0x84>
    {
#if defined (RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800131c:	f107 0308 	add.w	r3, r7, #8
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fe53 	bl	8000fcc <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	61bb      	str	r3, [r7, #24]
 800132a:	e00a      	b.n	8001342 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a13      	ldr	r2, [pc, #76]	; (800137c <LL_USART_Init+0xd4>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d106      	bne.n	8001342 <LL_USART_Init+0x9a>
    {
#if defined (RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fe47 	bl	8000fcc <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00d      	beq.n	8001364 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d009      	beq.n	8001364 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8001350:	2300      	movs	r3, #0
 8001352:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	699a      	ldr	r2, [r3, #24]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	69b9      	ldr	r1, [r7, #24]
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ff6f 	bl	8001242 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001364:	7ffb      	ldrb	r3, [r7, #31]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3720      	adds	r7, #32
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	efff69f3 	.word	0xefff69f3
 8001374:	40013800 	.word	0x40013800
 8001378:	40004400 	.word	0x40004400
 800137c:	40004800 	.word	0x40004800

08001380 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001392:	4a07      	ldr	r2, [pc, #28]	; (80013b0 <LL_InitTick+0x30>)
 8001394:	3b01      	subs	r3, #1
 8001396:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <LL_InitTick+0x30>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <LL_InitTick+0x30>)
 80013a0:	2205      	movs	r2, #5
 80013a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr
 80013b0:	e000e010 	.word	0xe000e010

080013b4 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80013bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ffdd 	bl	8001380 <LL_InitTick>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80013d8:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <LL_mDelay+0x44>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80013de:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e6:	d00c      	beq.n	8001402 <LL_mDelay+0x32>
  {
    Delay++;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3301      	adds	r3, #1
 80013ec:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80013ee:	e008      	b.n	8001402 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <LL_mDelay+0x44>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d002      	beq.n	8001402 <LL_mDelay+0x32>
    {
      Delay--;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	607b      	str	r3, [r7, #4]
  while (Delay)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d1f3      	bne.n	80013f0 <LL_mDelay+0x20>
    }
  }
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000e010 	.word	0xe000e010

08001418 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001420:	4a04      	ldr	r2, [pc, #16]	; (8001434 <LL_SetSystemCoreClock+0x1c>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6013      	str	r3, [r2, #0]
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20000000 	.word	0x20000000

08001438 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	f003 021f 	and.w	r2, r3, #31
 8001448:	4907      	ldr	r1, [pc, #28]	; (8001468 <NVIC_EnableIRQ+0x30>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	095b      	lsrs	r3, r3, #5
 8001450:	2001      	movs	r0, #1
 8001452:	fa00 f202 	lsl.w	r2, r0, r2
 8001456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000e100 	.word	0xe000e100

0800146c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	da0b      	bge.n	8001498 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	490c      	ldr	r1, [pc, #48]	; (80014b8 <NVIC_SetPriority+0x4c>)
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	f003 030f 	and.w	r3, r3, #15
 800148c:	3b04      	subs	r3, #4
 800148e:	0112      	lsls	r2, r2, #4
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	440b      	add	r3, r1
 8001494:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001496:	e009      	b.n	80014ac <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	4907      	ldr	r1, [pc, #28]	; (80014bc <NVIC_SetPriority+0x50>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	0112      	lsls	r2, r2, #4
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	440b      	add	r3, r1
 80014a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000ed00 	.word	0xe000ed00
 80014bc:	e000e100 	.word	0xe000e100

080014c0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014ca:	695a      	ldr	r2, [r3, #20]
 80014cc:	4907      	ldr	r1, [pc, #28]	; (80014ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014d6:	695a      	ldr	r2, [r3, #20]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4013      	ands	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014de:	68fb      	ldr	r3, [r7, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	40021000 	.word	0x40021000

080014f0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80014f4:	2001      	movs	r0, #1
 80014f6:	f7ff ffe3 	bl	80014c0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, 0);
 80014fa:	2100      	movs	r1, #0
 80014fc:	2010      	movs	r0, #16
 80014fe:	f7ff ffb5 	bl	800146c <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001502:	2010      	movs	r0, #16
 8001504:	f7ff ff98 	bl	8001438 <NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, 0);
 8001508:	2100      	movs	r1, #0
 800150a:	2011      	movs	r0, #17
 800150c:	f7ff ffae 	bl	800146c <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001510:	2011      	movs	r0, #17
 8001512:	f7ff ff91 	bl	8001438 <NVIC_EnableIRQ>

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <LL_AHB1_GRP1_EnableClock>:
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001526:	695a      	ldr	r2, [r3, #20]
 8001528:	4907      	ldr	r1, [pc, #28]	; (8001548 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4313      	orrs	r3, r2
 800152e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001532:	695a      	ldr	r2, [r3, #20]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4013      	ands	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800153a:	68fb      	ldr	r3, [r7, #12]
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	40021000 	.word	0x40021000

0800154c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800155c:	bf00      	nop
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156e:	463b      	mov	r3, r7
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
 800157c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800157e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001582:	f7ff ffcb 	bl	800151c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001586:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800158a:	f7ff ffc7 	bl	800151c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 800158e:	2108      	movs	r1, #8
 8001590:	480a      	ldr	r0, [pc, #40]	; (80015bc <MX_GPIO_Init+0x54>)
 8001592:	f7ff ffdb 	bl	800154c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001596:	2308      	movs	r3, #8
 8001598:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800159a:	2301      	movs	r3, #1
 800159c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015aa:	463b      	mov	r3, r7
 80015ac:	4619      	mov	r1, r3
 80015ae:	4803      	ldr	r0, [pc, #12]	; (80015bc <MX_GPIO_Init+0x54>)
 80015b0:	f7ff fbf5 	bl	8000d9e <LL_GPIO_Init>

}
 80015b4:	bf00      	nop
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	48000400 	.word	0x48000400

080015c0 <NVIC_SetPriorityGrouping>:
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <NVIC_SetPriorityGrouping+0x44>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d6:	68ba      	ldr	r2, [r7, #8]
 80015d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015dc:	4013      	ands	r3, r2
 80015de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015f2:	4a04      	ldr	r2, [pc, #16]	; (8001604 <NVIC_SetPriorityGrouping+0x44>)
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	60d3      	str	r3, [r2, #12]
}
 80015f8:	bf00      	nop
 80015fa:	3714      	adds	r7, #20
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	3b01      	subs	r3, #1
 8001616:	4a06      	ldr	r2, [pc, #24]	; (8001630 <LL_DMA_GetDataLength+0x28>)
 8001618:	5cd3      	ldrb	r3, [r2, r3]
 800161a:	461a      	mov	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4413      	add	r3, r2
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	b29b      	uxth	r3, r3
                   DMA_CNDTR_NDT));
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	080049f8 	.word	0x080049f8

08001634 <LL_RCC_HSI_Enable>:
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <LL_RCC_HSI_Enable+0x1c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a04      	ldr	r2, [pc, #16]	; (8001650 <LL_RCC_HSI_Enable+0x1c>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6013      	str	r3, [r2, #0]
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000

08001654 <LL_RCC_HSI_IsReady>:
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001658:	4b06      	ldr	r3, [pc, #24]	; (8001674 <LL_RCC_HSI_IsReady+0x20>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b02      	cmp	r3, #2
 8001662:	bf0c      	ite	eq
 8001664:	2301      	moveq	r3, #1
 8001666:	2300      	movne	r3, #0
 8001668:	b2db      	uxtb	r3, r3
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	40021000 	.word	0x40021000

08001678 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	4904      	ldr	r1, [pc, #16]	; (80016a0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800168e:	4313      	orrs	r3, r2
 8001690:	600b      	str	r3, [r1, #0]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000

080016a4 <LL_RCC_SetSysClkSource>:
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <LL_RCC_SetSysClkSource+0x24>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f023 0203 	bic.w	r2, r3, #3
 80016b4:	4904      	ldr	r1, [pc, #16]	; (80016c8 <LL_RCC_SetSysClkSource+0x24>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	604b      	str	r3, [r1, #4]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	40021000 	.word	0x40021000

080016cc <LL_RCC_GetSysClkSource>:
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80016d0:	4b04      	ldr	r3, [pc, #16]	; (80016e4 <LL_RCC_GetSysClkSource+0x18>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 030c 	and.w	r3, r3, #12
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40021000 	.word	0x40021000

080016e8 <LL_RCC_SetAHBPrescaler>:
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <LL_RCC_SetAHBPrescaler+0x24>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f8:	4904      	ldr	r1, [pc, #16]	; (800170c <LL_RCC_SetAHBPrescaler+0x24>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	40021000 	.word	0x40021000

08001710 <LL_RCC_SetAPB1Prescaler>:
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <LL_RCC_SetAPB1Prescaler+0x24>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001720:	4904      	ldr	r1, [pc, #16]	; (8001734 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	40021000 	.word	0x40021000

08001738 <LL_RCC_SetAPB2Prescaler>:
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001748:	4904      	ldr	r1, [pc, #16]	; (800175c <LL_RCC_SetAPB2Prescaler+0x24>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4313      	orrs	r3, r2
 800174e:	604b      	str	r3, [r1, #4]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	40021000 	.word	0x40021000

08001760 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <LL_APB1_GRP1_EnableClock+0x2c>)
 800176a:	69da      	ldr	r2, [r3, #28]
 800176c:	4907      	ldr	r1, [pc, #28]	; (800178c <LL_APB1_GRP1_EnableClock+0x2c>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4313      	orrs	r3, r2
 8001772:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001776:	69da      	ldr	r2, [r3, #28]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4013      	ands	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800177e:	68fb      	ldr	r3, [r7, #12]
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	40021000 	.word	0x40021000

08001790 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <LL_APB2_GRP1_EnableClock+0x2c>)
 800179a:	699a      	ldr	r2, [r3, #24]
 800179c:	4907      	ldr	r1, [pc, #28]	; (80017bc <LL_APB2_GRP1_EnableClock+0x2c>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <LL_APB2_GRP1_EnableClock+0x2c>)
 80017a6:	699a      	ldr	r2, [r3, #24]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4013      	ands	r3, r2
 80017ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017ae:	68fb      	ldr	r3, [r7, #12]
}
 80017b0:	bf00      	nop
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	40021000 	.word	0x40021000

080017c0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <LL_FLASH_SetLatency+0x24>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f023 0207 	bic.w	r2, r3, #7
 80017d0:	4904      	ldr	r1, [pc, #16]	; (80017e4 <LL_FLASH_SetLatency+0x24>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	600b      	str	r3, [r1, #0]
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	40022000 	.word	0x40022000

080017e8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <LL_FLASH_GetLatency+0x18>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0307 	and.w	r3, r3, #7
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40022000 	.word	0x40022000

08001804 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b04      	cmp	r3, #4
 8001810:	d106      	bne.n	8001820 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <LL_SYSTICK_SetClkSource+0x34>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a08      	ldr	r2, [pc, #32]	; (8001838 <LL_SYSTICK_SetClkSource+0x34>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 800181e:	e005      	b.n	800182c <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <LL_SYSTICK_SetClkSource+0x34>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a04      	ldr	r2, [pc, #16]	; (8001838 <LL_SYSTICK_SetClkSource+0x34>)
 8001826:	f023 0304 	bic.w	r3, r3, #4
 800182a:	6013      	str	r3, [r2, #0]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000e010 	.word	0xe000e010

0800183c <main>:
uint8_t count_big = 0;
uint8_t count_small = 0;
uint8_t state = 0;

int main(void)
{
 800183c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183e:	b08b      	sub	sp, #44	; 0x2c
 8001840:	af04      	add	r7, sp, #16
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001842:	2001      	movs	r0, #1
 8001844:	f7ff ffa4 	bl	8001790 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001848:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800184c:	f7ff ff88 	bl	8001760 <LL_APB1_GRP1_EnableClock>
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001850:	2003      	movs	r0, #3
 8001852:	f7ff feb5 	bl	80015c0 <NVIC_SetPriorityGrouping>

  /* Configure the system clock */
  SystemClock_Config();
 8001856:	f000 f885 	bl	8001964 <SystemClock_Config>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800185a:	f7ff fe85 	bl	8001568 <MX_GPIO_Init>
  MX_DMA_Init();
 800185e:	f7ff fe47 	bl	80014f0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001862:	f000 fe39 	bl	80024d8 <MX_USART2_UART_Init>

  /* Space for your local variables, callback registration ...*/

  	  //type your code here:
  USART2_RegisterCallback(proccesDmaData);
 8001866:	4838      	ldr	r0, [pc, #224]	; (8001948 <main+0x10c>)
 8001868:	f000 fe24 	bl	80024b4 <USART2_RegisterCallback>

  uint8_t *text_template = "Buffer capacity: %d bytes, occupied memory: %d bytes, load [in %%]: %3.2f%%\n\r";
 800186c:	4b37      	ldr	r3, [pc, #220]	; (800194c <main+0x110>)
 800186e:	617b      	str	r3, [r7, #20]
  uint8_t *text_size = "Buffer capacity:  bytes, occupied memory:  bytes, load [in %]: %\n\r";
 8001870:	4b37      	ldr	r3, [pc, #220]	; (8001950 <main+0x114>)
 8001872:	613b      	str	r3, [r7, #16]
	   * Transmission frequency - 5Hz.
	   * Message format - "Buffer capacity: %d bytes, occupied memory: %d bytes, load [in %]: %f%"
	   * Example message (what I wish to see in terminal) - Buffer capacity: 1000 bytes, occupied memory: 231 bytes, load [in %]: 23.1%
	   */

	  uint8_t buffer_filled = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 8001874:	2106      	movs	r1, #6
 8001876:	4837      	ldr	r0, [pc, #220]	; (8001954 <main+0x118>)
 8001878:	f7ff fec6 	bl	8001608 <LL_DMA_GetDataLength>
 800187c:	4603      	mov	r3, r0
 800187e:	b2db      	uxtb	r3, r3
 8001880:	425b      	negs	r3, r3
 8001882:	73fb      	strb	r3, [r7, #15]
	  float buffer_percentage = (float)(100*buffer_filled)/(float)(DMA_USART2_BUFFER_SIZE);
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	2264      	movs	r2, #100	; 0x64
 8001888:	fb02 f303 	mul.w	r3, r2, r3
 800188c:	ee07 3a90 	vmov	s15, r3
 8001890:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001894:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001958 <main+0x11c>
 8001898:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800189c:	edc7 7a02 	vstr	s15, [r7, #8]

	  uint8_t length = snprintf( NULL, 0, "%d", DMA_USART2_BUFFER_SIZE);
 80018a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018a4:	4a2d      	ldr	r2, [pc, #180]	; (800195c <main+0x120>)
 80018a6:	2100      	movs	r1, #0
 80018a8:	2000      	movs	r0, #0
 80018aa:	f001 fd15 	bl	80032d8 <sniprintf>
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]
	  length = length + snprintf( NULL, 0, "%d", buffer_filled);
 80018b2:	7bfb      	ldrb	r3, [r7, #15]
 80018b4:	4a29      	ldr	r2, [pc, #164]	; (800195c <main+0x120>)
 80018b6:	2100      	movs	r1, #0
 80018b8:	2000      	movs	r0, #0
 80018ba:	f001 fd0d 	bl	80032d8 <sniprintf>
 80018be:	4603      	mov	r3, r0
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	4413      	add	r3, r2
 80018c6:	71fb      	strb	r3, [r7, #7]
	  length = length + snprintf( NULL, 0, "%3.2f", buffer_percentage);
 80018c8:	68b8      	ldr	r0, [r7, #8]
 80018ca:	f7fe fe3d 	bl	8000548 <__aeabi_f2d>
 80018ce:	4603      	mov	r3, r0
 80018d0:	460c      	mov	r4, r1
 80018d2:	e9cd 3400 	strd	r3, r4, [sp]
 80018d6:	4a22      	ldr	r2, [pc, #136]	; (8001960 <main+0x124>)
 80018d8:	2100      	movs	r1, #0
 80018da:	2000      	movs	r0, #0
 80018dc:	f001 fcfc 	bl	80032d8 <sniprintf>
 80018e0:	4603      	mov	r3, r0
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	4413      	add	r3, r2
 80018e8:	71fb      	strb	r3, [r7, #7]
	  length = length + strlen(text_size);
 80018ea:	6938      	ldr	r0, [r7, #16]
 80018ec:	f7fe fc70 	bl	80001d0 <strlen>
 80018f0:	4603      	mov	r3, r0
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	4413      	add	r3, r2
 80018f8:	71fb      	strb	r3, [r7, #7]

	  uint8_t *text = (uint8_t *) malloc(length + 1);
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	3301      	adds	r3, #1
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 ffc6 	bl	8002890 <malloc>
 8001904:	4603      	mov	r3, r0
 8001906:	603b      	str	r3, [r7, #0]
	  snprintf(text, length + 1, text_template, DMA_USART2_BUFFER_SIZE, buffer_filled, buffer_percentage);
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	3301      	adds	r3, #1
 800190c:	461e      	mov	r6, r3
 800190e:	7bfd      	ldrb	r5, [r7, #15]
 8001910:	68b8      	ldr	r0, [r7, #8]
 8001912:	f7fe fe19 	bl	8000548 <__aeabi_f2d>
 8001916:	4603      	mov	r3, r0
 8001918:	460c      	mov	r4, r1
 800191a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800191e:	9500      	str	r5, [sp, #0]
 8001920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	4631      	mov	r1, r6
 8001928:	6838      	ldr	r0, [r7, #0]
 800192a:	f001 fcd5 	bl	80032d8 <sniprintf>
	  USART2_PutBuffer(text, length + 1);
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	3301      	adds	r3, #1
 8001932:	b2db      	uxtb	r3, r3
 8001934:	4619      	mov	r1, r3
 8001936:	6838      	ldr	r0, [r7, #0]
 8001938:	f000 feb4 	bl	80026a4 <USART2_PutBuffer>
	  LL_mDelay(1000);
 800193c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001940:	f7ff fd46 	bl	80013d0 <LL_mDelay>
  {
 8001944:	e796      	b.n	8001874 <main+0x38>
 8001946:	bf00      	nop
 8001948:	080019d1 	.word	0x080019d1
 800194c:	08004958 	.word	0x08004958
 8001950:	080049a8 	.word	0x080049a8
 8001954:	40020000 	.word	0x40020000
 8001958:	43800000 	.word	0x43800000
 800195c:	080049ec 	.word	0x080049ec
 8001960:	080049f0 	.word	0x080049f0

08001964 <SystemClock_Config>:
  /* USER CODE END 3 */
}


void SystemClock_Config(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001968:	2000      	movs	r0, #0
 800196a:	f7ff ff29 	bl	80017c0 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 800196e:	f7ff ff3b 	bl	80017e8 <LL_FLASH_GetLatency>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8001978:	f000 f89e 	bl	8001ab8 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 800197c:	f7ff fe5a 	bl	8001634 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001980:	bf00      	nop
 8001982:	f7ff fe67 	bl	8001654 <LL_RCC_HSI_IsReady>
 8001986:	4603      	mov	r3, r0
 8001988:	2b01      	cmp	r3, #1
 800198a:	d1fa      	bne.n	8001982 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800198c:	2010      	movs	r0, #16
 800198e:	f7ff fe73 	bl	8001678 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001992:	2000      	movs	r0, #0
 8001994:	f7ff fea8 	bl	80016e8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001998:	2000      	movs	r0, #0
 800199a:	f7ff feb9 	bl	8001710 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 800199e:	2000      	movs	r0, #0
 80019a0:	f7ff feca 	bl	8001738 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80019a4:	2000      	movs	r0, #0
 80019a6:	f7ff fe7d 	bl	80016a4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80019aa:	bf00      	nop
 80019ac:	f7ff fe8e 	bl	80016cc <LL_RCC_GetSysClkSource>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1fa      	bne.n	80019ac <SystemClock_Config+0x48>
  {
  
  }
  LL_Init1msTick(8000000);
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <SystemClock_Config+0x68>)
 80019b8:	f7ff fcfc 	bl	80013b4 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 80019bc:	2004      	movs	r0, #4
 80019be:	f7ff ff21 	bl	8001804 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 80019c2:	4802      	ldr	r0, [pc, #8]	; (80019cc <SystemClock_Config+0x68>)
 80019c4:	f7ff fd28 	bl	8001418 <LL_SetSystemCoreClock>
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	007a1200 	.word	0x007a1200

080019d0 <proccesDmaData>:

/*
 * Implementation of function processing data received via USART.
 */
void proccesDmaData(const uint8_t* sign, uint8_t length)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	70fb      	strb	r3, [r7, #3]
	for (uint8_t i = 0; i < length; i++){
 80019dc:	2300      	movs	r3, #0
 80019de:	73fb      	strb	r3, [r7, #15]
 80019e0:	e058      	b.n	8001a94 <proccesDmaData+0xc4>

		if(*(sign+i) == '#' || state){
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	4413      	add	r3, r2
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b23      	cmp	r3, #35	; 0x23
 80019ec:	d003      	beq.n	80019f6 <proccesDmaData+0x26>
 80019ee:	4b2e      	ldr	r3, [pc, #184]	; (8001aa8 <proccesDmaData+0xd8>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d04b      	beq.n	8001a8e <proccesDmaData+0xbe>
			state = 1;
 80019f6:	4b2c      	ldr	r3, [pc, #176]	; (8001aa8 <proccesDmaData+0xd8>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	701a      	strb	r2, [r3, #0]
			if(*(sign+i) >= 'a' && *(sign+i) <= 'z'){
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	4413      	add	r3, r2
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b60      	cmp	r3, #96	; 0x60
 8001a06:	d90b      	bls.n	8001a20 <proccesDmaData+0x50>
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b7a      	cmp	r3, #122	; 0x7a
 8001a12:	d805      	bhi.n	8001a20 <proccesDmaData+0x50>
				count_small++;
 8001a14:	4b25      	ldr	r3, [pc, #148]	; (8001aac <proccesDmaData+0xdc>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	4b23      	ldr	r3, [pc, #140]	; (8001aac <proccesDmaData+0xdc>)
 8001a1e:	701a      	strb	r2, [r3, #0]
			}

			if(*(sign+i) >= 'A' && *(sign+i) <= 'Z'){
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b40      	cmp	r3, #64	; 0x40
 8001a2a:	d90b      	bls.n	8001a44 <proccesDmaData+0x74>
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b5a      	cmp	r3, #90	; 0x5a
 8001a36:	d805      	bhi.n	8001a44 <proccesDmaData+0x74>
				count_big++;
 8001a38:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <proccesDmaData+0xe0>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <proccesDmaData+0xe0>)
 8001a42:	701a      	strb	r2, [r3, #0]
			}
			if(*(sign+i) == '\r'){
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b0d      	cmp	r3, #13
 8001a4e:	d105      	bne.n	8001a5c <proccesDmaData+0x8c>
				count = i + 1;
 8001a50:	7bfb      	ldrb	r3, [r7, #15]
 8001a52:	3301      	adds	r3, #1
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <proccesDmaData+0xe4>)
 8001a58:	701a      	strb	r2, [r3, #0]
				break;
 8001a5a:	e01f      	b.n	8001a9c <proccesDmaData+0xcc>
			}
			if(*(sign+i) == '$' || (i + count + 1) >= 35){
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b24      	cmp	r3, #36	; 0x24
 8001a66:	d006      	beq.n	8001a76 <proccesDmaData+0xa6>
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	4a12      	ldr	r2, [pc, #72]	; (8001ab4 <proccesDmaData+0xe4>)
 8001a6c:	7812      	ldrb	r2, [r2, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	3301      	adds	r3, #1
 8001a72:	2b22      	cmp	r3, #34	; 0x22
 8001a74:	dd0b      	ble.n	8001a8e <proccesDmaData+0xbe>
				state = 0;
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <proccesDmaData+0xd8>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
				count_small = 0;
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <proccesDmaData+0xdc>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]
				count_big = 0;
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <proccesDmaData+0xe0>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]
				count = 0;
 8001a88:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <proccesDmaData+0xe4>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < length; i++){
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	3301      	adds	r3, #1
 8001a92:	73fb      	strb	r3, [r7, #15]
 8001a94:	7bfa      	ldrb	r2, [r7, #15]
 8001a96:	78fb      	ldrb	r3, [r7, #3]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d3a2      	bcc.n	80019e2 <proccesDmaData+0x12>
			}
		}
	}
	return;
 8001a9c:	bf00      	nop
}
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	200001f3 	.word	0x200001f3
 8001aac:	200001f2 	.word	0x200001f2
 8001ab0:	200001f1 	.word	0x200001f1
 8001ab4:	200001f0 	.word	0x200001f0

08001ab8 <Error_Handler>:


void Error_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0

}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
	...

08001ac8 <LL_DMA_DisableChannel>:
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	4a0b      	ldr	r2, [pc, #44]	; (8001b04 <LL_DMA_DisableChannel+0x3c>)
 8001ad8:	5cd3      	ldrb	r3, [r2, r3]
 8001ada:	461a      	mov	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4413      	add	r3, r2
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	3a01      	subs	r2, #1
 8001ae6:	4907      	ldr	r1, [pc, #28]	; (8001b04 <LL_DMA_DisableChannel+0x3c>)
 8001ae8:	5c8a      	ldrb	r2, [r1, r2]
 8001aea:	4611      	mov	r1, r2
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	440a      	add	r2, r1
 8001af0:	f023 0301 	bic.w	r3, r3, #1
 8001af4:	6013      	str	r3, [r2, #0]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	08004a00 	.word	0x08004a00

08001b08 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b1c:	bf0c      	ite	eq
 8001b1e:	2301      	moveq	r3, #1
 8001b20:	2300      	movne	r3, #0
 8001b22:	b2db      	uxtb	r3, r3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001b44:	bf0c      	ite	eq
 8001b46:	2301      	moveq	r3, #1
 8001b48:	2300      	movne	r3, #0
 8001b4a:	b2db      	uxtb	r3, r3
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b6c:	bf0c      	ite	eq
 8001b6e:	2301      	moveq	r3, #1
 8001b70:	2300      	movne	r3, #0
 8001b72:	b2db      	uxtb	r3, r3
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b8e:	605a      	str	r2, [r3, #4]
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001baa:	605a      	str	r2, [r3, #4]
}
 8001bac:	bf00      	nop
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001bc6:	605a      	str	r2, [r3, #4]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	f003 0310 	and.w	r3, r3, #16
 8001be4:	2b10      	cmp	r3, #16
 8001be6:	bf0c      	ite	eq
 8001be8:	2301      	moveq	r3, #1
 8001bea:	2300      	movne	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c0a:	2b40      	cmp	r3, #64	; 0x40
 8001c0c:	bf0c      	ite	eq
 8001c0e:	2301      	moveq	r3, #1
 8001c10:	2300      	movne	r3, #0
 8001c12:	b2db      	uxtb	r3, r3
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2210      	movs	r2, #16
 8001c2c:	621a      	str	r2, [r3, #32]
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <HardFault_Handler+0x4>

08001c4e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <MemManage_Handler+0x4>

08001c54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <BusFault_Handler+0x4>

08001c5a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <UsageFault_Handler+0x4>

08001c60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8001c9c:	480c      	ldr	r0, [pc, #48]	; (8001cd0 <DMA1_Channel6_IRQHandler+0x38>)
 8001c9e:	f7ff ff33 	bl	8001b08 <LL_DMA_IsActiveFlag_TC6>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d105      	bne.n	8001cb4 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8001ca8:	f000 fd1c 	bl	80026e4 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 8001cac:	4808      	ldr	r0, [pc, #32]	; (8001cd0 <DMA1_Channel6_IRQHandler+0x38>)
 8001cae:	f7ff ff67 	bl	8001b80 <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 8001cb2:	e00a      	b.n	8001cca <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8001cb4:	4806      	ldr	r0, [pc, #24]	; (8001cd0 <DMA1_Channel6_IRQHandler+0x38>)
 8001cb6:	f7ff ff4f 	bl	8001b58 <LL_DMA_IsActiveFlag_HT6>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d104      	bne.n	8001cca <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8001cc0:	f000 fd10 	bl	80026e4 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <DMA1_Channel6_IRQHandler+0x38>)
 8001cc6:	f7ff ff77 	bl	8001bb8 <LL_DMA_ClearFlag_HT6>
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40020000 	.word	0x40020000

08001cd4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8001cd8:	480a      	ldr	r0, [pc, #40]	; (8001d04 <DMA1_Channel7_IRQHandler+0x30>)
 8001cda:	f7ff ff29 	bl	8001b30 <LL_DMA_IsActiveFlag_TC7>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d10d      	bne.n	8001d00 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8001ce4:	4807      	ldr	r0, [pc, #28]	; (8001d04 <DMA1_Channel7_IRQHandler+0x30>)
 8001ce6:	f7ff ff59 	bl	8001b9c <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8001cea:	bf00      	nop
 8001cec:	4806      	ldr	r0, [pc, #24]	; (8001d08 <DMA1_Channel7_IRQHandler+0x34>)
 8001cee:	f7ff ff84 	bl	8001bfa <LL_USART_IsActiveFlag_TC>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f9      	beq.n	8001cec <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001cf8:	2107      	movs	r1, #7
 8001cfa:	4802      	ldr	r0, [pc, #8]	; (8001d04 <DMA1_Channel7_IRQHandler+0x30>)
 8001cfc:	f7ff fee4 	bl	8001ac8 <LL_DMA_DisableChannel>
	}
}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40020000 	.word	0x40020000
 8001d08:	40004400 	.word	0x40004400

08001d0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8001d10:	4806      	ldr	r0, [pc, #24]	; (8001d2c <USART2_IRQHandler+0x20>)
 8001d12:	f7ff ff5f 	bl	8001bd4 <LL_USART_IsActiveFlag_IDLE>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d004      	beq.n	8001d26 <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8001d1c:	f000 fce2 	bl	80026e4 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8001d20:	4802      	ldr	r0, [pc, #8]	; (8001d2c <USART2_IRQHandler+0x20>)
 8001d22:	f7ff ff7d 	bl	8001c20 <LL_USART_ClearFlag_IDLE>
	}
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40004400 	.word	0x40004400

08001d30 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <_sbrk+0x50>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d102      	bne.n	8001d46 <_sbrk+0x16>
		heap_end = &end;
 8001d40:	4b0f      	ldr	r3, [pc, #60]	; (8001d80 <_sbrk+0x50>)
 8001d42:	4a10      	ldr	r2, [pc, #64]	; (8001d84 <_sbrk+0x54>)
 8001d44:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d46:	4b0e      	ldr	r3, [pc, #56]	; (8001d80 <_sbrk+0x50>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	; (8001d80 <_sbrk+0x50>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4413      	add	r3, r2
 8001d54:	466a      	mov	r2, sp
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d907      	bls.n	8001d6a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d5a:	f000 fd6f 	bl	800283c <__errno>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	230c      	movs	r3, #12
 8001d62:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001d64:	f04f 33ff 	mov.w	r3, #4294967295
 8001d68:	e006      	b.n	8001d78 <_sbrk+0x48>
	}

	heap_end += incr;
 8001d6a:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <_sbrk+0x50>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	4a03      	ldr	r2, [pc, #12]	; (8001d80 <_sbrk+0x50>)
 8001d74:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001d76:	68fb      	ldr	r3, [r7, #12]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	200001f4 	.word	0x200001f4
 8001d84:	20000310 	.word	0x20000310

08001d88 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <SystemInit+0x84>)
 8001d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d92:	4a1e      	ldr	r2, [pc, #120]	; (8001e0c <SystemInit+0x84>)
 8001d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001d9c:	4b1c      	ldr	r3, [pc, #112]	; (8001e10 <SystemInit+0x88>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a1b      	ldr	r2, [pc, #108]	; (8001e10 <SystemInit+0x88>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001da8:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <SystemInit+0x88>)
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	4918      	ldr	r1, [pc, #96]	; (8001e10 <SystemInit+0x88>)
 8001dae:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <SystemInit+0x8c>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001db4:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <SystemInit+0x88>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a15      	ldr	r2, [pc, #84]	; (8001e10 <SystemInit+0x88>)
 8001dba:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <SystemInit+0x88>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a11      	ldr	r2, [pc, #68]	; (8001e10 <SystemInit+0x88>)
 8001dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dce:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	; (8001e10 <SystemInit+0x88>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	4a0e      	ldr	r2, [pc, #56]	; (8001e10 <SystemInit+0x88>)
 8001dd6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001dda:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <SystemInit+0x88>)
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	4a0b      	ldr	r2, [pc, #44]	; (8001e10 <SystemInit+0x88>)
 8001de2:	f023 030f 	bic.w	r3, r3, #15
 8001de6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001de8:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <SystemInit+0x88>)
 8001dea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dec:	4908      	ldr	r1, [pc, #32]	; (8001e10 <SystemInit+0x88>)
 8001dee:	4b0a      	ldr	r3, [pc, #40]	; (8001e18 <SystemInit+0x90>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <SystemInit+0x88>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dfa:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <SystemInit+0x84>)
 8001dfc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e00:	609a      	str	r2, [r3, #8]
#endif
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00
 8001e10:	40021000 	.word	0x40021000
 8001e14:	f87fc00c 	.word	0xf87fc00c
 8001e18:	ff00fccc 	.word	0xff00fccc

08001e1c <NVIC_EnableIRQ>:
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	f003 021f 	and.w	r2, r3, #31
 8001e2c:	4907      	ldr	r1, [pc, #28]	; (8001e4c <NVIC_EnableIRQ+0x30>)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	095b      	lsrs	r3, r3, #5
 8001e34:	2001      	movs	r0, #1
 8001e36:	fa00 f202 	lsl.w	r2, r0, r2
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	e000e100 	.word	0xe000e100

08001e50 <NVIC_SetPriority>:
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	6039      	str	r1, [r7, #0]
 8001e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	da0b      	bge.n	8001e7c <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	490c      	ldr	r1, [pc, #48]	; (8001e9c <NVIC_SetPriority+0x4c>)
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	f003 030f 	and.w	r3, r3, #15
 8001e70:	3b04      	subs	r3, #4
 8001e72:	0112      	lsls	r2, r2, #4
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	440b      	add	r3, r1
 8001e78:	761a      	strb	r2, [r3, #24]
}
 8001e7a:	e009      	b.n	8001e90 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	4907      	ldr	r1, [pc, #28]	; (8001ea0 <NVIC_SetPriority+0x50>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	0112      	lsls	r2, r2, #4
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e90:	bf00      	nop
 8001e92:	370c      	adds	r7, #12
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000ed00 	.word	0xe000ed00
 8001ea0:	e000e100 	.word	0xe000e100

08001ea4 <LL_DMA_EnableChannel>:
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	4a0b      	ldr	r2, [pc, #44]	; (8001ee0 <LL_DMA_EnableChannel+0x3c>)
 8001eb4:	5cd3      	ldrb	r3, [r2, r3]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4413      	add	r3, r2
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	3a01      	subs	r2, #1
 8001ec2:	4907      	ldr	r1, [pc, #28]	; (8001ee0 <LL_DMA_EnableChannel+0x3c>)
 8001ec4:	5c8a      	ldrb	r2, [r1, r2]
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	440a      	add	r2, r1
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	6013      	str	r3, [r2, #0]
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	08004a20 	.word	0x08004a20

08001ee4 <LL_DMA_DisableChannel>:
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	4a0b      	ldr	r2, [pc, #44]	; (8001f20 <LL_DMA_DisableChannel+0x3c>)
 8001ef4:	5cd3      	ldrb	r3, [r2, r3]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4413      	add	r3, r2
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	3a01      	subs	r2, #1
 8001f02:	4907      	ldr	r1, [pc, #28]	; (8001f20 <LL_DMA_DisableChannel+0x3c>)
 8001f04:	5c8a      	ldrb	r2, [r1, r2]
 8001f06:	4611      	mov	r1, r2
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	440a      	add	r2, r1
 8001f0c:	f023 0301 	bic.w	r3, r3, #1
 8001f10:	6013      	str	r3, [r2, #0]
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	08004a20 	.word	0x08004a20

08001f24 <LL_DMA_SetDataTransferDirection>:
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	4a0d      	ldr	r2, [pc, #52]	; (8001f6c <LL_DMA_SetDataTransferDirection+0x48>)
 8001f36:	5cd3      	ldrb	r3, [r2, r3]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f44:	f023 0310 	bic.w	r3, r3, #16
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	3a01      	subs	r2, #1
 8001f4c:	4907      	ldr	r1, [pc, #28]	; (8001f6c <LL_DMA_SetDataTransferDirection+0x48>)
 8001f4e:	5c8a      	ldrb	r2, [r1, r2]
 8001f50:	4611      	mov	r1, r2
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	440a      	add	r2, r1
 8001f56:	4611      	mov	r1, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]
}
 8001f5e:	bf00      	nop
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	08004a20 	.word	0x08004a20

08001f70 <LL_DMA_GetDataTransferDirection>:
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	4a07      	ldr	r2, [pc, #28]	; (8001f9c <LL_DMA_GetDataTransferDirection+0x2c>)
 8001f80:	5cd3      	ldrb	r3, [r2, r3]
 8001f82:	461a      	mov	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4413      	add	r3, r2
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	f244 0310 	movw	r3, #16400	; 0x4010
 8001f8e:	4013      	ands	r3, r2
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	08004a20 	.word	0x08004a20

08001fa0 <LL_DMA_SetMode>:
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	4a0c      	ldr	r2, [pc, #48]	; (8001fe4 <LL_DMA_SetMode+0x44>)
 8001fb2:	5cd3      	ldrb	r3, [r2, r3]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4413      	add	r3, r2
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f023 0220 	bic.w	r2, r3, #32
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	4907      	ldr	r1, [pc, #28]	; (8001fe4 <LL_DMA_SetMode+0x44>)
 8001fc6:	5ccb      	ldrb	r3, [r1, r3]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	440b      	add	r3, r1
 8001fce:	4619      	mov	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	600b      	str	r3, [r1, #0]
}
 8001fd6:	bf00      	nop
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	08004a20 	.word	0x08004a20

08001fe8 <LL_DMA_SetPeriphIncMode>:
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	4a0c      	ldr	r2, [pc, #48]	; (800202c <LL_DMA_SetPeriphIncMode+0x44>)
 8001ffa:	5cd3      	ldrb	r3, [r2, r3]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4413      	add	r3, r2
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	3b01      	subs	r3, #1
 800200c:	4907      	ldr	r1, [pc, #28]	; (800202c <LL_DMA_SetPeriphIncMode+0x44>)
 800200e:	5ccb      	ldrb	r3, [r1, r3]
 8002010:	4619      	mov	r1, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	440b      	add	r3, r1
 8002016:	4619      	mov	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]
}
 800201e:	bf00      	nop
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	08004a20 	.word	0x08004a20

08002030 <LL_DMA_SetMemoryIncMode>:
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	3b01      	subs	r3, #1
 8002040:	4a0c      	ldr	r2, [pc, #48]	; (8002074 <LL_DMA_SetMemoryIncMode+0x44>)
 8002042:	5cd3      	ldrb	r3, [r2, r3]
 8002044:	461a      	mov	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4413      	add	r3, r2
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	3b01      	subs	r3, #1
 8002054:	4907      	ldr	r1, [pc, #28]	; (8002074 <LL_DMA_SetMemoryIncMode+0x44>)
 8002056:	5ccb      	ldrb	r3, [r1, r3]
 8002058:	4619      	mov	r1, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	440b      	add	r3, r1
 800205e:	4619      	mov	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
}
 8002066:	bf00      	nop
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	08004a20 	.word	0x08004a20

08002078 <LL_DMA_SetPeriphSize>:
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	3b01      	subs	r3, #1
 8002088:	4a0c      	ldr	r2, [pc, #48]	; (80020bc <LL_DMA_SetPeriphSize+0x44>)
 800208a:	5cd3      	ldrb	r3, [r2, r3]
 800208c:	461a      	mov	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4413      	add	r3, r2
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	3b01      	subs	r3, #1
 800209c:	4907      	ldr	r1, [pc, #28]	; (80020bc <LL_DMA_SetPeriphSize+0x44>)
 800209e:	5ccb      	ldrb	r3, [r1, r3]
 80020a0:	4619      	mov	r1, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	440b      	add	r3, r1
 80020a6:	4619      	mov	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]
}
 80020ae:	bf00      	nop
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	08004a20 	.word	0x08004a20

080020c0 <LL_DMA_SetMemorySize>:
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	4a0c      	ldr	r2, [pc, #48]	; (8002104 <LL_DMA_SetMemorySize+0x44>)
 80020d2:	5cd3      	ldrb	r3, [r2, r3]
 80020d4:	461a      	mov	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4413      	add	r3, r2
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	3b01      	subs	r3, #1
 80020e4:	4907      	ldr	r1, [pc, #28]	; (8002104 <LL_DMA_SetMemorySize+0x44>)
 80020e6:	5ccb      	ldrb	r3, [r1, r3]
 80020e8:	4619      	mov	r1, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	440b      	add	r3, r1
 80020ee:	4619      	mov	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]
}
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	08004a20 	.word	0x08004a20

08002108 <LL_DMA_SetChannelPriorityLevel>:
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	3b01      	subs	r3, #1
 8002118:	4a0c      	ldr	r2, [pc, #48]	; (800214c <LL_DMA_SetChannelPriorityLevel+0x44>)
 800211a:	5cd3      	ldrb	r3, [r2, r3]
 800211c:	461a      	mov	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4413      	add	r3, r2
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	3b01      	subs	r3, #1
 800212c:	4907      	ldr	r1, [pc, #28]	; (800214c <LL_DMA_SetChannelPriorityLevel+0x44>)
 800212e:	5ccb      	ldrb	r3, [r1, r3]
 8002130:	4619      	mov	r1, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	440b      	add	r3, r1
 8002136:	4619      	mov	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]
}
 800213e:	bf00      	nop
 8002140:	3714      	adds	r7, #20
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	08004a20 	.word	0x08004a20

08002150 <LL_DMA_SetDataLength>:
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	3b01      	subs	r3, #1
 8002160:	4a0c      	ldr	r2, [pc, #48]	; (8002194 <LL_DMA_SetDataLength+0x44>)
 8002162:	5cd3      	ldrb	r3, [r2, r3]
 8002164:	461a      	mov	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4413      	add	r3, r2
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	0c1b      	lsrs	r3, r3, #16
 800216e:	041b      	lsls	r3, r3, #16
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	3a01      	subs	r2, #1
 8002174:	4907      	ldr	r1, [pc, #28]	; (8002194 <LL_DMA_SetDataLength+0x44>)
 8002176:	5c8a      	ldrb	r2, [r1, r2]
 8002178:	4611      	mov	r1, r2
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	440a      	add	r2, r1
 800217e:	4611      	mov	r1, r2
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	4313      	orrs	r3, r2
 8002184:	604b      	str	r3, [r1, #4]
}
 8002186:	bf00      	nop
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	08004a20 	.word	0x08004a20

08002198 <LL_DMA_GetDataLength>:
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	3b01      	subs	r3, #1
 80021a6:	4a06      	ldr	r2, [pc, #24]	; (80021c0 <LL_DMA_GetDataLength+0x28>)
 80021a8:	5cd3      	ldrb	r3, [r2, r3]
 80021aa:	461a      	mov	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4413      	add	r3, r2
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	b29b      	uxth	r3, r3
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	08004a20 	.word	0x08004a20

080021c4 <LL_DMA_ConfigAddresses>:
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
 80021d0:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	2b10      	cmp	r3, #16
 80021d6:	d114      	bne.n	8002202 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	3b01      	subs	r3, #1
 80021dc:	4a16      	ldr	r2, [pc, #88]	; (8002238 <LL_DMA_ConfigAddresses+0x74>)
 80021de:	5cd3      	ldrb	r3, [r2, r3]
 80021e0:	461a      	mov	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4413      	add	r3, r2
 80021e6:	461a      	mov	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	4a11      	ldr	r2, [pc, #68]	; (8002238 <LL_DMA_ConfigAddresses+0x74>)
 80021f2:	5cd3      	ldrb	r3, [r2, r3]
 80021f4:	461a      	mov	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4413      	add	r3, r2
 80021fa:	461a      	mov	r2, r3
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	6093      	str	r3, [r2, #8]
}
 8002200:	e013      	b.n	800222a <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3b01      	subs	r3, #1
 8002206:	4a0c      	ldr	r2, [pc, #48]	; (8002238 <LL_DMA_ConfigAddresses+0x74>)
 8002208:	5cd3      	ldrb	r3, [r2, r3]
 800220a:	461a      	mov	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4413      	add	r3, r2
 8002210:	461a      	mov	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	3b01      	subs	r3, #1
 800221a:	4a07      	ldr	r2, [pc, #28]	; (8002238 <LL_DMA_ConfigAddresses+0x74>)
 800221c:	5cd3      	ldrb	r3, [r2, r3]
 800221e:	461a      	mov	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4413      	add	r3, r2
 8002224:	461a      	mov	r2, r3
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	60d3      	str	r3, [r2, #12]
}
 800222a:	bf00      	nop
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	08004a20 	.word	0x08004a20

0800223c <LL_DMA_SetMemoryAddress>:
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	3b01      	subs	r3, #1
 800224c:	4a06      	ldr	r2, [pc, #24]	; (8002268 <LL_DMA_SetMemoryAddress+0x2c>)
 800224e:	5cd3      	ldrb	r3, [r2, r3]
 8002250:	461a      	mov	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4413      	add	r3, r2
 8002256:	461a      	mov	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	60d3      	str	r3, [r2, #12]
}
 800225c:	bf00      	nop
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	08004a20 	.word	0x08004a20

0800226c <LL_DMA_SetPeriphAddress>:
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	3b01      	subs	r3, #1
 800227c:	4a06      	ldr	r2, [pc, #24]	; (8002298 <LL_DMA_SetPeriphAddress+0x2c>)
 800227e:	5cd3      	ldrb	r3, [r2, r3]
 8002280:	461a      	mov	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	4413      	add	r3, r2
 8002286:	461a      	mov	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6093      	str	r3, [r2, #8]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	08004a20 	.word	0x08004a20

0800229c <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	3b01      	subs	r3, #1
 80022aa:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <LL_DMA_EnableIT_TC+0x3c>)
 80022ac:	5cd3      	ldrb	r3, [r2, r3]
 80022ae:	461a      	mov	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4413      	add	r3, r2
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	3a01      	subs	r2, #1
 80022ba:	4907      	ldr	r1, [pc, #28]	; (80022d8 <LL_DMA_EnableIT_TC+0x3c>)
 80022bc:	5c8a      	ldrb	r2, [r1, r2]
 80022be:	4611      	mov	r1, r2
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	440a      	add	r2, r1
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	6013      	str	r3, [r2, #0]
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	08004a20 	.word	0x08004a20

080022dc <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	3b01      	subs	r3, #1
 80022ea:	4a0b      	ldr	r2, [pc, #44]	; (8002318 <LL_DMA_EnableIT_HT+0x3c>)
 80022ec:	5cd3      	ldrb	r3, [r2, r3]
 80022ee:	461a      	mov	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4413      	add	r3, r2
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	3a01      	subs	r2, #1
 80022fa:	4907      	ldr	r1, [pc, #28]	; (8002318 <LL_DMA_EnableIT_HT+0x3c>)
 80022fc:	5c8a      	ldrb	r2, [r1, r2]
 80022fe:	4611      	mov	r1, r2
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	440a      	add	r2, r1
 8002304:	f043 0304 	orr.w	r3, r3, #4
 8002308:	6013      	str	r3, [r2, #0]
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	08004a20 	.word	0x08004a20

0800231c <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	3b01      	subs	r3, #1
 800232a:	4a0b      	ldr	r2, [pc, #44]	; (8002358 <LL_DMA_EnableIT_TE+0x3c>)
 800232c:	5cd3      	ldrb	r3, [r2, r3]
 800232e:	461a      	mov	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4413      	add	r3, r2
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	3a01      	subs	r2, #1
 800233a:	4907      	ldr	r1, [pc, #28]	; (8002358 <LL_DMA_EnableIT_TE+0x3c>)
 800233c:	5c8a      	ldrb	r2, [r1, r2]
 800233e:	4611      	mov	r1, r2
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	440a      	add	r2, r1
 8002344:	f043 0308 	orr.w	r3, r3, #8
 8002348:	6013      	str	r3, [r2, #0]
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	08004a20 	.word	0x08004a20

0800235c <LL_AHB1_GRP1_EnableClock>:
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002364:	4b08      	ldr	r3, [pc, #32]	; (8002388 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002366:	695a      	ldr	r2, [r3, #20]
 8002368:	4907      	ldr	r1, [pc, #28]	; (8002388 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4313      	orrs	r3, r2
 800236e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002372:	695a      	ldr	r2, [r3, #20]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4013      	ands	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800237a:	68fb      	ldr	r3, [r7, #12]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	40021000 	.word	0x40021000

0800238c <LL_APB1_GRP1_EnableClock>:
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002396:	69da      	ldr	r2, [r3, #28]
 8002398:	4907      	ldr	r1, [pc, #28]	; (80023b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4313      	orrs	r3, r2
 800239e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80023a0:	4b05      	ldr	r3, [pc, #20]	; (80023b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80023a2:	69da      	ldr	r2, [r3, #28]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4013      	ands	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023aa:	68fb      	ldr	r3, [r7, #12]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	40021000 	.word	0x40021000

080023bc <LL_USART_Enable>:
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f043 0201 	orr.w	r2, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	601a      	str	r2, [r3, #0]
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <LL_USART_ConfigAsyncMode>:
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	609a      	str	r2, [r3, #8]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f043 0210 	orr.w	r2, r3, #16
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	601a      	str	r2, [r3, #0]
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	609a      	str	r2, [r3, #8]
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	609a      	str	r2, [r3, #8]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	609a      	str	r2, [r3, #8]
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 8002488:	b490      	push	{r4, r7}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr = 0U;
 8002492:	2400      	movs	r4, #0

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d103      	bne.n	80024a2 <LL_USART_DMA_GetRegAddr+0x1a>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3328      	adds	r3, #40	; 0x28
 800249e:	461c      	mov	r4, r3
 80024a0:	e002      	b.n	80024a8 <LL_USART_DMA_GetRegAddr+0x20>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3324      	adds	r3, #36	; 0x24
 80024a6:	461c      	mov	r4, r3
  }

  return data_reg_addr;
 80024a8:	4623      	mov	r3, r4
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc90      	pop	{r4, r7}
 80024b2:	4770      	bx	lr

080024b4 <USART2_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART2_ProcessData)(uint8_t *data, uint8_t length) = 0;

/* Register callback */
void USART2_RegisterCallback(void *callback)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <USART2_RegisterCallback+0x14>
	{
		USART2_ProcessData = callback;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a03      	ldr	r2, [pc, #12]	; (80024d4 <USART2_RegisterCallback+0x20>)
 80024c6:	6013      	str	r3, [r2, #0]
	}
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	200001f8 	.word	0x200001f8

080024d8 <MX_USART2_UART_Init>:
	// type global variables here


/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 80024d8:	b5b0      	push	{r4, r5, r7, lr}
 80024da:	b090      	sub	sp, #64	; 0x40
 80024dc:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80024de:	f107 031c 	add.w	r3, r7, #28
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	609a      	str	r2, [r3, #8]
 80024ea:	60da      	str	r2, [r3, #12]
 80024ec:	611a      	str	r2, [r3, #16]
 80024ee:	615a      	str	r2, [r3, #20]
 80024f0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f2:	1d3b      	adds	r3, r7, #4
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	60da      	str	r2, [r3, #12]
 80024fe:	611a      	str	r2, [r3, #16]
 8002500:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002502:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002506:	f7ff ff41 	bl	800238c <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800250a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800250e:	f7ff ff25 	bl	800235c <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8002512:	f248 0304 	movw	r3, #32772	; 0x8004
 8002516:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002518:	2302      	movs	r3, #2
 800251a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800251c:	2303      	movs	r3, #3
 800251e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002520:	2300      	movs	r3, #0
 8002522:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002528:	2307      	movs	r3, #7
 800252a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	4619      	mov	r1, r3
 8002530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002534:	f7fe fc33 	bl	8000d9e <LL_GPIO_Init>
   */
  
  /* USART2_RX Init */

  	  // type DMA USART Rx configuration here
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002538:	2200      	movs	r2, #0
 800253a:	2106      	movs	r1, #6
 800253c:	4856      	ldr	r0, [pc, #344]	; (8002698 <MX_USART2_UART_Init+0x1c0>)
 800253e:	f7ff fcf1 	bl	8001f24 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8002542:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002546:	2106      	movs	r1, #6
 8002548:	4853      	ldr	r0, [pc, #332]	; (8002698 <MX_USART2_UART_Init+0x1c0>)
 800254a:	f7ff fddd 	bl	8002108 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 800254e:	2200      	movs	r2, #0
 8002550:	2106      	movs	r1, #6
 8002552:	4851      	ldr	r0, [pc, #324]	; (8002698 <MX_USART2_UART_Init+0x1c0>)
 8002554:	f7ff fd24 	bl	8001fa0 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8002558:	2200      	movs	r2, #0
 800255a:	2106      	movs	r1, #6
 800255c:	484e      	ldr	r0, [pc, #312]	; (8002698 <MX_USART2_UART_Init+0x1c0>)
 800255e:	f7ff fd43 	bl	8001fe8 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8002562:	2280      	movs	r2, #128	; 0x80
 8002564:	2106      	movs	r1, #6
 8002566:	484c      	ldr	r0, [pc, #304]	; (8002698 <MX_USART2_UART_Init+0x1c0>)
 8002568:	f7ff fd62 	bl	8002030 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 800256c:	2200      	movs	r2, #0
 800256e:	2106      	movs	r1, #6
 8002570:	4849      	ldr	r0, [pc, #292]	; (8002698 <MX_USART2_UART_Init+0x1c0>)
 8002572:	f7ff fd81 	bl	8002078 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8002576:	2200      	movs	r2, #0
 8002578:	2106      	movs	r1, #6
 800257a:	4847      	ldr	r0, [pc, #284]	; (8002698 <MX_USART2_UART_Init+0x1c0>)
 800257c:	f7ff fda0 	bl	80020c0 <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8002580:	2101      	movs	r1, #1
 8002582:	4846      	ldr	r0, [pc, #280]	; (800269c <MX_USART2_UART_Init+0x1c4>)
 8002584:	f7ff ff80 	bl	8002488 <LL_USART_DMA_GetRegAddr>
 8002588:	4605      	mov	r5, r0
 800258a:	4c45      	ldr	r4, [pc, #276]	; (80026a0 <MX_USART2_UART_Init+0x1c8>)
 800258c:	2106      	movs	r1, #6
 800258e:	4842      	ldr	r0, [pc, #264]	; (8002698 <MX_USART2_UART_Init+0x1c0>)
 8002590:	f7ff fcee 	bl	8001f70 <LL_DMA_GetDataTransferDirection>
 8002594:	4603      	mov	r3, r0
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	4623      	mov	r3, r4
 800259a:	462a      	mov	r2, r5
 800259c:	2106      	movs	r1, #6
 800259e:	483e      	ldr	r0, [pc, #248]	; (8002698 <MX_USART2_UART_Init+0x1c0>)
 80025a0:	f7ff fe10 	bl	80021c4 <LL_DMA_ConfigAddresses>
		  LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
		  (uint32_t)bufferUSART2dma,
		  LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 80025a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025a8:	2106      	movs	r1, #6
 80025aa:	483b      	ldr	r0, [pc, #236]	; (8002698 <MX_USART2_UART_Init+0x1c0>)
 80025ac:	f7ff fdd0 	bl	8002150 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80025b0:	2106      	movs	r1, #6
 80025b2:	4839      	ldr	r0, [pc, #228]	; (8002698 <MX_USART2_UART_Init+0x1c0>)
 80025b4:	f7ff fc76 	bl	8001ea4 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 80025b8:	4838      	ldr	r0, [pc, #224]	; (800269c <MX_USART2_UART_Init+0x1c4>)
 80025ba:	f7ff ff45 	bl	8002448 <LL_USART_EnableDMAReq_RX>

  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 80025be:	2106      	movs	r1, #6
 80025c0:	4835      	ldr	r0, [pc, #212]	; (8002698 <MX_USART2_UART_Init+0x1c0>)
 80025c2:	f7ff fe6b 	bl	800229c <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 80025c6:	2106      	movs	r1, #6
 80025c8:	4833      	ldr	r0, [pc, #204]	; (8002698 <MX_USART2_UART_Init+0x1c0>)
 80025ca:	f7ff fe87 	bl	80022dc <LL_DMA_EnableIT_HT>


  /* USART2_TX Init */

	  // type DMA USART Tx configuration here
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80025ce:	2210      	movs	r2, #16
 80025d0:	2107      	movs	r1, #7
 80025d2:	4831      	ldr	r0, [pc, #196]	; (8002698 <MX_USART2_UART_Init+0x1c0>)
 80025d4:	f7ff fca6 	bl	8001f24 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 80025d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025dc:	2107      	movs	r1, #7
 80025de:	482e      	ldr	r0, [pc, #184]	; (8002698 <MX_USART2_UART_Init+0x1c0>)
 80025e0:	f7ff fd92 	bl	8002108 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 80025e4:	2200      	movs	r2, #0
 80025e6:	2107      	movs	r1, #7
 80025e8:	482b      	ldr	r0, [pc, #172]	; (8002698 <MX_USART2_UART_Init+0x1c0>)
 80025ea:	f7ff fcd9 	bl	8001fa0 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 80025ee:	2200      	movs	r2, #0
 80025f0:	2107      	movs	r1, #7
 80025f2:	4829      	ldr	r0, [pc, #164]	; (8002698 <MX_USART2_UART_Init+0x1c0>)
 80025f4:	f7ff fcf8 	bl	8001fe8 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 80025f8:	2280      	movs	r2, #128	; 0x80
 80025fa:	2107      	movs	r1, #7
 80025fc:	4826      	ldr	r0, [pc, #152]	; (8002698 <MX_USART2_UART_Init+0x1c0>)
 80025fe:	f7ff fd17 	bl	8002030 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8002602:	2200      	movs	r2, #0
 8002604:	2107      	movs	r1, #7
 8002606:	4824      	ldr	r0, [pc, #144]	; (8002698 <MX_USART2_UART_Init+0x1c0>)
 8002608:	f7ff fd36 	bl	8002078 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 800260c:	2200      	movs	r2, #0
 800260e:	2107      	movs	r1, #7
 8002610:	4821      	ldr	r0, [pc, #132]	; (8002698 <MX_USART2_UART_Init+0x1c0>)
 8002612:	f7ff fd55 	bl	80020c0 <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8002616:	2100      	movs	r1, #0
 8002618:	4820      	ldr	r0, [pc, #128]	; (800269c <MX_USART2_UART_Init+0x1c4>)
 800261a:	f7ff ff35 	bl	8002488 <LL_USART_DMA_GetRegAddr>
 800261e:	4603      	mov	r3, r0
 8002620:	461a      	mov	r2, r3
 8002622:	2107      	movs	r1, #7
 8002624:	481c      	ldr	r0, [pc, #112]	; (8002698 <MX_USART2_UART_Init+0x1c0>)
 8002626:	f7ff fe21 	bl	800226c <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 800262a:	481c      	ldr	r0, [pc, #112]	; (800269c <MX_USART2_UART_Init+0x1c4>)
 800262c:	f7ff ff1c 	bl	8002468 <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8002630:	2107      	movs	r1, #7
 8002632:	4819      	ldr	r0, [pc, #100]	; (8002698 <MX_USART2_UART_Init+0x1c0>)
 8002634:	f7ff fe72 	bl	800231c <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8002638:	2100      	movs	r1, #0
 800263a:	2026      	movs	r0, #38	; 0x26
 800263c:	f7ff fc08 	bl	8001e50 <NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002640:	2026      	movs	r0, #38	; 0x26
 8002642:	f7ff fbeb 	bl	8001e1c <NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8002646:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800264a:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800264c:	2300      	movs	r3, #0
 800264e:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002650:	2300      	movs	r3, #0
 8002652:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002654:	2300      	movs	r3, #0
 8002656:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002658:	230c      	movs	r3, #12
 800265a:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800265c:	2300      	movs	r3, #0
 800265e:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002660:	2300      	movs	r3, #0
 8002662:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002664:	f107 031c 	add.w	r3, r7, #28
 8002668:	4619      	mov	r1, r3
 800266a:	480c      	ldr	r0, [pc, #48]	; (800269c <MX_USART2_UART_Init+0x1c4>)
 800266c:	f7fe fe1c 	bl	80012a8 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002670:	480a      	ldr	r0, [pc, #40]	; (800269c <MX_USART2_UART_Init+0x1c4>)
 8002672:	f7ff feb3 	bl	80023dc <LL_USART_ConfigAsyncMode>
  LL_USART_DisableIT_CTS(USART2);
 8002676:	4809      	ldr	r0, [pc, #36]	; (800269c <MX_USART2_UART_Init+0x1c4>)
 8002678:	f7ff fed6 	bl	8002428 <LL_USART_DisableIT_CTS>

  /* Enable USART2 peripheral and interrupts*/

  	  //type your code here:
  LL_USART_EnableIT_IDLE(USART2);
 800267c:	4807      	ldr	r0, [pc, #28]	; (800269c <MX_USART2_UART_Init+0x1c4>)
 800267e:	f7ff fec3 	bl	8002408 <LL_USART_EnableIT_IDLE>
  LL_USART_ConfigAsyncMode(USART2);
 8002682:	4806      	ldr	r0, [pc, #24]	; (800269c <MX_USART2_UART_Init+0x1c4>)
 8002684:	f7ff feaa 	bl	80023dc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002688:	4804      	ldr	r0, [pc, #16]	; (800269c <MX_USART2_UART_Init+0x1c4>)
 800268a:	f7ff fe97 	bl	80023bc <LL_USART_Enable>
}
 800268e:	bf00      	nop
 8002690:	3738      	adds	r7, #56	; 0x38
 8002692:	46bd      	mov	sp, r7
 8002694:	bdb0      	pop	{r4, r5, r7, pc}
 8002696:	bf00      	nop
 8002698:	40020000 	.word	0x40020000
 800269c:	40004400 	.word	0x40004400
 80026a0:	20000208 	.word	0x20000208

080026a4 <USART2_PutBuffer>:


// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	461a      	mov	r2, r3
 80026b4:	2107      	movs	r1, #7
 80026b6:	480a      	ldr	r0, [pc, #40]	; (80026e0 <USART2_PutBuffer+0x3c>)
 80026b8:	f7ff fdc0 	bl	800223c <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	461a      	mov	r2, r3
 80026c0:	2107      	movs	r1, #7
 80026c2:	4807      	ldr	r0, [pc, #28]	; (80026e0 <USART2_PutBuffer+0x3c>)
 80026c4:	f7ff fd44 	bl	8002150 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 80026c8:	2107      	movs	r1, #7
 80026ca:	4805      	ldr	r0, [pc, #20]	; (80026e0 <USART2_PutBuffer+0x3c>)
 80026cc:	f7ff fde6 	bl	800229c <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 80026d0:	2107      	movs	r1, #7
 80026d2:	4803      	ldr	r0, [pc, #12]	; (80026e0 <USART2_PutBuffer+0x3c>)
 80026d4:	f7ff fbe6 	bl	8001ea4 <LL_DMA_EnableChannel>
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40020000 	.word	0x40020000

080026e4 <USART2_CheckDmaReception>:
 *	Forwards data to callback function.
 *	Keeps track of pointer pointing to Rx memory buffer and resets the pointer if overflow is possible in next Rx.
 *	Refer to reference manual - "normal memory mode" and "increment memory mode".
 */
void USART2_CheckDmaReception(void)
{
 80026e4:	b5b0      	push	{r4, r5, r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af02      	add	r7, sp, #8
	//type your implementation here
	if(USART2_ProcessData == 0) return;
 80026ea:	4b3a      	ldr	r3, [pc, #232]	; (80027d4 <USART2_CheckDmaReception+0xf0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d06c      	beq.n	80027cc <USART2_CheckDmaReception+0xe8>

	static uint16_t old_pos = 0;

	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 80026f2:	2106      	movs	r1, #6
 80026f4:	4838      	ldr	r0, [pc, #224]	; (80027d8 <USART2_CheckDmaReception+0xf4>)
 80026f6:	f7ff fd4f 	bl	8002198 <LL_DMA_GetDataLength>
 80026fa:	4603      	mov	r3, r0
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002702:	80fb      	strh	r3, [r7, #6]

	if (pos != old_pos)
 8002704:	4b35      	ldr	r3, [pc, #212]	; (80027dc <USART2_CheckDmaReception+0xf8>)
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	88fa      	ldrh	r2, [r7, #6]
 800270a:	429a      	cmp	r2, r3
 800270c:	d052      	beq.n	80027b4 <USART2_CheckDmaReception+0xd0>
	{

		if (pos > old_pos)
 800270e:	4b33      	ldr	r3, [pc, #204]	; (80027dc <USART2_CheckDmaReception+0xf8>)
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	88fa      	ldrh	r2, [r7, #6]
 8002714:	429a      	cmp	r2, r3
 8002716:	d910      	bls.n	800273a <USART2_CheckDmaReception+0x56>
		{
			USART2_ProcessData(&bufferUSART2dma[old_pos], pos - old_pos);
 8002718:	4b2e      	ldr	r3, [pc, #184]	; (80027d4 <USART2_CheckDmaReception+0xf0>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a2f      	ldr	r2, [pc, #188]	; (80027dc <USART2_CheckDmaReception+0xf8>)
 800271e:	8812      	ldrh	r2, [r2, #0]
 8002720:	4611      	mov	r1, r2
 8002722:	4a2f      	ldr	r2, [pc, #188]	; (80027e0 <USART2_CheckDmaReception+0xfc>)
 8002724:	1888      	adds	r0, r1, r2
 8002726:	88fa      	ldrh	r2, [r7, #6]
 8002728:	b2d1      	uxtb	r1, r2
 800272a:	4a2c      	ldr	r2, [pc, #176]	; (80027dc <USART2_CheckDmaReception+0xf8>)
 800272c:	8812      	ldrh	r2, [r2, #0]
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	1a8a      	subs	r2, r1, r2
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	4611      	mov	r1, r2
 8002736:	4798      	blx	r3
 8002738:	e017      	b.n	800276a <USART2_CheckDmaReception+0x86>
		}
		else
		{
			USART2_ProcessData(&bufferUSART2dma[old_pos], DMA_USART2_BUFFER_SIZE - old_pos);
 800273a:	4b26      	ldr	r3, [pc, #152]	; (80027d4 <USART2_CheckDmaReception+0xf0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a27      	ldr	r2, [pc, #156]	; (80027dc <USART2_CheckDmaReception+0xf8>)
 8002740:	8812      	ldrh	r2, [r2, #0]
 8002742:	4611      	mov	r1, r2
 8002744:	4a26      	ldr	r2, [pc, #152]	; (80027e0 <USART2_CheckDmaReception+0xfc>)
 8002746:	1888      	adds	r0, r1, r2
 8002748:	4a24      	ldr	r2, [pc, #144]	; (80027dc <USART2_CheckDmaReception+0xf8>)
 800274a:	8812      	ldrh	r2, [r2, #0]
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	4252      	negs	r2, r2
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	4611      	mov	r1, r2
 8002754:	4798      	blx	r3

			if (pos > 0)
 8002756:	88fb      	ldrh	r3, [r7, #6]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d006      	beq.n	800276a <USART2_CheckDmaReception+0x86>
			{
				USART2_ProcessData(&bufferUSART2dma[0], pos);
 800275c:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <USART2_CheckDmaReception+0xf0>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	88fa      	ldrh	r2, [r7, #6]
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	4611      	mov	r1, r2
 8002766:	481e      	ldr	r0, [pc, #120]	; (80027e0 <USART2_CheckDmaReception+0xfc>)
 8002768:	4798      	blx	r3
			}
		}

		if (DMA_USART2_BUFFER_SIZE - pos < 20){
 800276a:	88fb      	ldrh	r3, [r7, #6]
 800276c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8002770:	2b13      	cmp	r3, #19
 8002772:	dc1f      	bgt.n	80027b4 <USART2_CheckDmaReception+0xd0>
			LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002774:	2106      	movs	r1, #6
 8002776:	4818      	ldr	r0, [pc, #96]	; (80027d8 <USART2_CheckDmaReception+0xf4>)
 8002778:	f7ff fbb4 	bl	8001ee4 <LL_DMA_DisableChannel>
			LL_DMA_ConfigAddresses(    DMA1, LL_DMA_CHANNEL_6,
 800277c:	2101      	movs	r1, #1
 800277e:	4819      	ldr	r0, [pc, #100]	; (80027e4 <USART2_CheckDmaReception+0x100>)
 8002780:	f7ff fe82 	bl	8002488 <LL_USART_DMA_GetRegAddr>
 8002784:	4605      	mov	r5, r0
 8002786:	4c16      	ldr	r4, [pc, #88]	; (80027e0 <USART2_CheckDmaReception+0xfc>)
 8002788:	2106      	movs	r1, #6
 800278a:	4813      	ldr	r0, [pc, #76]	; (80027d8 <USART2_CheckDmaReception+0xf4>)
 800278c:	f7ff fbf0 	bl	8001f70 <LL_DMA_GetDataTransferDirection>
 8002790:	4603      	mov	r3, r0
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	4623      	mov	r3, r4
 8002796:	462a      	mov	r2, r5
 8002798:	2106      	movs	r1, #6
 800279a:	480f      	ldr	r0, [pc, #60]	; (80027d8 <USART2_CheckDmaReception+0xf4>)
 800279c:	f7ff fd12 	bl	80021c4 <LL_DMA_ConfigAddresses>
			LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
			(uint32_t)bufferUSART2dma,
			LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));
			LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 80027a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027a4:	2106      	movs	r1, #6
 80027a6:	480c      	ldr	r0, [pc, #48]	; (80027d8 <USART2_CheckDmaReception+0xf4>)
 80027a8:	f7ff fcd2 	bl	8002150 <LL_DMA_SetDataLength>
			LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80027ac:	2106      	movs	r1, #6
 80027ae:	480a      	ldr	r0, [pc, #40]	; (80027d8 <USART2_CheckDmaReception+0xf4>)
 80027b0:	f7ff fb78 	bl	8001ea4 <LL_DMA_EnableChannel>
		}
	}

	old_pos = pos;
 80027b4:	4a09      	ldr	r2, [pc, #36]	; (80027dc <USART2_CheckDmaReception+0xf8>)
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	8013      	strh	r3, [r2, #0]

	if (old_pos == DMA_USART2_BUFFER_SIZE)
 80027ba:	4b08      	ldr	r3, [pc, #32]	; (80027dc <USART2_CheckDmaReception+0xf8>)
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027c2:	d104      	bne.n	80027ce <USART2_CheckDmaReception+0xea>
	{
		old_pos = 0;
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <USART2_CheckDmaReception+0xf8>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	801a      	strh	r2, [r3, #0]
 80027ca:	e000      	b.n	80027ce <USART2_CheckDmaReception+0xea>
	if(USART2_ProcessData == 0) return;
 80027cc:	bf00      	nop
	}
}
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bdb0      	pop	{r4, r5, r7, pc}
 80027d4:	200001f8 	.word	0x200001f8
 80027d8:	40020000 	.word	0x40020000
 80027dc:	200001fc 	.word	0x200001fc
 80027e0:	20000208 	.word	0x20000208
 80027e4:	40004400 	.word	0x40004400

080027e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80027e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002820 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80027ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80027ee:	e003      	b.n	80027f8 <LoopCopyDataInit>

080027f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80027f0:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80027f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80027f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80027f6:	3104      	adds	r1, #4

080027f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80027f8:	480b      	ldr	r0, [pc, #44]	; (8002828 <LoopForever+0xa>)
	ldr	r3, =_edata
 80027fa:	4b0c      	ldr	r3, [pc, #48]	; (800282c <LoopForever+0xe>)
	adds	r2, r0, r1
 80027fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80027fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002800:	d3f6      	bcc.n	80027f0 <CopyDataInit>
	ldr	r2, =_sbss
 8002802:	4a0b      	ldr	r2, [pc, #44]	; (8002830 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002804:	e002      	b.n	800280c <LoopFillZerobss>

08002806 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002806:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002808:	f842 3b04 	str.w	r3, [r2], #4

0800280c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800280c:	4b09      	ldr	r3, [pc, #36]	; (8002834 <LoopForever+0x16>)
	cmp	r2, r3
 800280e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002810:	d3f9      	bcc.n	8002806 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002812:	f7ff fab9 	bl	8001d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002816:	f000 f817 	bl	8002848 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800281a:	f7ff f80f 	bl	800183c <main>

0800281e <LoopForever>:

LoopForever:
    b LoopForever
 800281e:	e7fe      	b.n	800281e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002820:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8002824:	08004c88 	.word	0x08004c88
	ldr	r0, =_sdata
 8002828:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800282c:	200001d4 	.word	0x200001d4
	ldr	r2, =_sbss
 8002830:	200001d4 	.word	0x200001d4
	ldr	r3, = _ebss
 8002834:	2000030c 	.word	0x2000030c

08002838 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002838:	e7fe      	b.n	8002838 <ADC1_2_IRQHandler>
	...

0800283c <__errno>:
 800283c:	4b01      	ldr	r3, [pc, #4]	; (8002844 <__errno+0x8>)
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	20000004 	.word	0x20000004

08002848 <__libc_init_array>:
 8002848:	b570      	push	{r4, r5, r6, lr}
 800284a:	4e0d      	ldr	r6, [pc, #52]	; (8002880 <__libc_init_array+0x38>)
 800284c:	4c0d      	ldr	r4, [pc, #52]	; (8002884 <__libc_init_array+0x3c>)
 800284e:	1ba4      	subs	r4, r4, r6
 8002850:	10a4      	asrs	r4, r4, #2
 8002852:	2500      	movs	r5, #0
 8002854:	42a5      	cmp	r5, r4
 8002856:	d109      	bne.n	800286c <__libc_init_array+0x24>
 8002858:	4e0b      	ldr	r6, [pc, #44]	; (8002888 <__libc_init_array+0x40>)
 800285a:	4c0c      	ldr	r4, [pc, #48]	; (800288c <__libc_init_array+0x44>)
 800285c:	f002 f870 	bl	8004940 <_init>
 8002860:	1ba4      	subs	r4, r4, r6
 8002862:	10a4      	asrs	r4, r4, #2
 8002864:	2500      	movs	r5, #0
 8002866:	42a5      	cmp	r5, r4
 8002868:	d105      	bne.n	8002876 <__libc_init_array+0x2e>
 800286a:	bd70      	pop	{r4, r5, r6, pc}
 800286c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002870:	4798      	blx	r3
 8002872:	3501      	adds	r5, #1
 8002874:	e7ee      	b.n	8002854 <__libc_init_array+0xc>
 8002876:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800287a:	4798      	blx	r3
 800287c:	3501      	adds	r5, #1
 800287e:	e7f2      	b.n	8002866 <__libc_init_array+0x1e>
 8002880:	08004c80 	.word	0x08004c80
 8002884:	08004c80 	.word	0x08004c80
 8002888:	08004c80 	.word	0x08004c80
 800288c:	08004c84 	.word	0x08004c84

08002890 <malloc>:
 8002890:	4b02      	ldr	r3, [pc, #8]	; (800289c <malloc+0xc>)
 8002892:	4601      	mov	r1, r0
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	f000 b859 	b.w	800294c <_malloc_r>
 800289a:	bf00      	nop
 800289c:	20000004 	.word	0x20000004

080028a0 <memset>:
 80028a0:	4402      	add	r2, r0
 80028a2:	4603      	mov	r3, r0
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d100      	bne.n	80028aa <memset+0xa>
 80028a8:	4770      	bx	lr
 80028aa:	f803 1b01 	strb.w	r1, [r3], #1
 80028ae:	e7f9      	b.n	80028a4 <memset+0x4>

080028b0 <_free_r>:
 80028b0:	b538      	push	{r3, r4, r5, lr}
 80028b2:	4605      	mov	r5, r0
 80028b4:	2900      	cmp	r1, #0
 80028b6:	d045      	beq.n	8002944 <_free_r+0x94>
 80028b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028bc:	1f0c      	subs	r4, r1, #4
 80028be:	2b00      	cmp	r3, #0
 80028c0:	bfb8      	it	lt
 80028c2:	18e4      	addlt	r4, r4, r3
 80028c4:	f001 fb99 	bl	8003ffa <__malloc_lock>
 80028c8:	4a1f      	ldr	r2, [pc, #124]	; (8002948 <_free_r+0x98>)
 80028ca:	6813      	ldr	r3, [r2, #0]
 80028cc:	4610      	mov	r0, r2
 80028ce:	b933      	cbnz	r3, 80028de <_free_r+0x2e>
 80028d0:	6063      	str	r3, [r4, #4]
 80028d2:	6014      	str	r4, [r2, #0]
 80028d4:	4628      	mov	r0, r5
 80028d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80028da:	f001 bb8f 	b.w	8003ffc <__malloc_unlock>
 80028de:	42a3      	cmp	r3, r4
 80028e0:	d90c      	bls.n	80028fc <_free_r+0x4c>
 80028e2:	6821      	ldr	r1, [r4, #0]
 80028e4:	1862      	adds	r2, r4, r1
 80028e6:	4293      	cmp	r3, r2
 80028e8:	bf04      	itt	eq
 80028ea:	681a      	ldreq	r2, [r3, #0]
 80028ec:	685b      	ldreq	r3, [r3, #4]
 80028ee:	6063      	str	r3, [r4, #4]
 80028f0:	bf04      	itt	eq
 80028f2:	1852      	addeq	r2, r2, r1
 80028f4:	6022      	streq	r2, [r4, #0]
 80028f6:	6004      	str	r4, [r0, #0]
 80028f8:	e7ec      	b.n	80028d4 <_free_r+0x24>
 80028fa:	4613      	mov	r3, r2
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	b10a      	cbz	r2, 8002904 <_free_r+0x54>
 8002900:	42a2      	cmp	r2, r4
 8002902:	d9fa      	bls.n	80028fa <_free_r+0x4a>
 8002904:	6819      	ldr	r1, [r3, #0]
 8002906:	1858      	adds	r0, r3, r1
 8002908:	42a0      	cmp	r0, r4
 800290a:	d10b      	bne.n	8002924 <_free_r+0x74>
 800290c:	6820      	ldr	r0, [r4, #0]
 800290e:	4401      	add	r1, r0
 8002910:	1858      	adds	r0, r3, r1
 8002912:	4282      	cmp	r2, r0
 8002914:	6019      	str	r1, [r3, #0]
 8002916:	d1dd      	bne.n	80028d4 <_free_r+0x24>
 8002918:	6810      	ldr	r0, [r2, #0]
 800291a:	6852      	ldr	r2, [r2, #4]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	4401      	add	r1, r0
 8002920:	6019      	str	r1, [r3, #0]
 8002922:	e7d7      	b.n	80028d4 <_free_r+0x24>
 8002924:	d902      	bls.n	800292c <_free_r+0x7c>
 8002926:	230c      	movs	r3, #12
 8002928:	602b      	str	r3, [r5, #0]
 800292a:	e7d3      	b.n	80028d4 <_free_r+0x24>
 800292c:	6820      	ldr	r0, [r4, #0]
 800292e:	1821      	adds	r1, r4, r0
 8002930:	428a      	cmp	r2, r1
 8002932:	bf04      	itt	eq
 8002934:	6811      	ldreq	r1, [r2, #0]
 8002936:	6852      	ldreq	r2, [r2, #4]
 8002938:	6062      	str	r2, [r4, #4]
 800293a:	bf04      	itt	eq
 800293c:	1809      	addeq	r1, r1, r0
 800293e:	6021      	streq	r1, [r4, #0]
 8002940:	605c      	str	r4, [r3, #4]
 8002942:	e7c7      	b.n	80028d4 <_free_r+0x24>
 8002944:	bd38      	pop	{r3, r4, r5, pc}
 8002946:	bf00      	nop
 8002948:	20000200 	.word	0x20000200

0800294c <_malloc_r>:
 800294c:	b570      	push	{r4, r5, r6, lr}
 800294e:	1ccd      	adds	r5, r1, #3
 8002950:	f025 0503 	bic.w	r5, r5, #3
 8002954:	3508      	adds	r5, #8
 8002956:	2d0c      	cmp	r5, #12
 8002958:	bf38      	it	cc
 800295a:	250c      	movcc	r5, #12
 800295c:	2d00      	cmp	r5, #0
 800295e:	4606      	mov	r6, r0
 8002960:	db01      	blt.n	8002966 <_malloc_r+0x1a>
 8002962:	42a9      	cmp	r1, r5
 8002964:	d903      	bls.n	800296e <_malloc_r+0x22>
 8002966:	230c      	movs	r3, #12
 8002968:	6033      	str	r3, [r6, #0]
 800296a:	2000      	movs	r0, #0
 800296c:	bd70      	pop	{r4, r5, r6, pc}
 800296e:	f001 fb44 	bl	8003ffa <__malloc_lock>
 8002972:	4a21      	ldr	r2, [pc, #132]	; (80029f8 <_malloc_r+0xac>)
 8002974:	6814      	ldr	r4, [r2, #0]
 8002976:	4621      	mov	r1, r4
 8002978:	b991      	cbnz	r1, 80029a0 <_malloc_r+0x54>
 800297a:	4c20      	ldr	r4, [pc, #128]	; (80029fc <_malloc_r+0xb0>)
 800297c:	6823      	ldr	r3, [r4, #0]
 800297e:	b91b      	cbnz	r3, 8002988 <_malloc_r+0x3c>
 8002980:	4630      	mov	r0, r6
 8002982:	f000 fc99 	bl	80032b8 <_sbrk_r>
 8002986:	6020      	str	r0, [r4, #0]
 8002988:	4629      	mov	r1, r5
 800298a:	4630      	mov	r0, r6
 800298c:	f000 fc94 	bl	80032b8 <_sbrk_r>
 8002990:	1c43      	adds	r3, r0, #1
 8002992:	d124      	bne.n	80029de <_malloc_r+0x92>
 8002994:	230c      	movs	r3, #12
 8002996:	6033      	str	r3, [r6, #0]
 8002998:	4630      	mov	r0, r6
 800299a:	f001 fb2f 	bl	8003ffc <__malloc_unlock>
 800299e:	e7e4      	b.n	800296a <_malloc_r+0x1e>
 80029a0:	680b      	ldr	r3, [r1, #0]
 80029a2:	1b5b      	subs	r3, r3, r5
 80029a4:	d418      	bmi.n	80029d8 <_malloc_r+0x8c>
 80029a6:	2b0b      	cmp	r3, #11
 80029a8:	d90f      	bls.n	80029ca <_malloc_r+0x7e>
 80029aa:	600b      	str	r3, [r1, #0]
 80029ac:	50cd      	str	r5, [r1, r3]
 80029ae:	18cc      	adds	r4, r1, r3
 80029b0:	4630      	mov	r0, r6
 80029b2:	f001 fb23 	bl	8003ffc <__malloc_unlock>
 80029b6:	f104 000b 	add.w	r0, r4, #11
 80029ba:	1d23      	adds	r3, r4, #4
 80029bc:	f020 0007 	bic.w	r0, r0, #7
 80029c0:	1ac3      	subs	r3, r0, r3
 80029c2:	d0d3      	beq.n	800296c <_malloc_r+0x20>
 80029c4:	425a      	negs	r2, r3
 80029c6:	50e2      	str	r2, [r4, r3]
 80029c8:	e7d0      	b.n	800296c <_malloc_r+0x20>
 80029ca:	428c      	cmp	r4, r1
 80029cc:	684b      	ldr	r3, [r1, #4]
 80029ce:	bf16      	itet	ne
 80029d0:	6063      	strne	r3, [r4, #4]
 80029d2:	6013      	streq	r3, [r2, #0]
 80029d4:	460c      	movne	r4, r1
 80029d6:	e7eb      	b.n	80029b0 <_malloc_r+0x64>
 80029d8:	460c      	mov	r4, r1
 80029da:	6849      	ldr	r1, [r1, #4]
 80029dc:	e7cc      	b.n	8002978 <_malloc_r+0x2c>
 80029de:	1cc4      	adds	r4, r0, #3
 80029e0:	f024 0403 	bic.w	r4, r4, #3
 80029e4:	42a0      	cmp	r0, r4
 80029e6:	d005      	beq.n	80029f4 <_malloc_r+0xa8>
 80029e8:	1a21      	subs	r1, r4, r0
 80029ea:	4630      	mov	r0, r6
 80029ec:	f000 fc64 	bl	80032b8 <_sbrk_r>
 80029f0:	3001      	adds	r0, #1
 80029f2:	d0cf      	beq.n	8002994 <_malloc_r+0x48>
 80029f4:	6025      	str	r5, [r4, #0]
 80029f6:	e7db      	b.n	80029b0 <_malloc_r+0x64>
 80029f8:	20000200 	.word	0x20000200
 80029fc:	20000204 	.word	0x20000204

08002a00 <__cvt>:
 8002a00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a04:	ec55 4b10 	vmov	r4, r5, d0
 8002a08:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002a0a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002a0e:	2d00      	cmp	r5, #0
 8002a10:	460e      	mov	r6, r1
 8002a12:	4691      	mov	r9, r2
 8002a14:	4619      	mov	r1, r3
 8002a16:	bfb8      	it	lt
 8002a18:	4622      	movlt	r2, r4
 8002a1a:	462b      	mov	r3, r5
 8002a1c:	f027 0720 	bic.w	r7, r7, #32
 8002a20:	bfbb      	ittet	lt
 8002a22:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002a26:	461d      	movlt	r5, r3
 8002a28:	2300      	movge	r3, #0
 8002a2a:	232d      	movlt	r3, #45	; 0x2d
 8002a2c:	bfb8      	it	lt
 8002a2e:	4614      	movlt	r4, r2
 8002a30:	2f46      	cmp	r7, #70	; 0x46
 8002a32:	700b      	strb	r3, [r1, #0]
 8002a34:	d004      	beq.n	8002a40 <__cvt+0x40>
 8002a36:	2f45      	cmp	r7, #69	; 0x45
 8002a38:	d100      	bne.n	8002a3c <__cvt+0x3c>
 8002a3a:	3601      	adds	r6, #1
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	e000      	b.n	8002a42 <__cvt+0x42>
 8002a40:	2103      	movs	r1, #3
 8002a42:	ab03      	add	r3, sp, #12
 8002a44:	9301      	str	r3, [sp, #4]
 8002a46:	ab02      	add	r3, sp, #8
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	4632      	mov	r2, r6
 8002a4c:	4653      	mov	r3, sl
 8002a4e:	ec45 4b10 	vmov	d0, r4, r5
 8002a52:	f000 fd01 	bl	8003458 <_dtoa_r>
 8002a56:	2f47      	cmp	r7, #71	; 0x47
 8002a58:	4680      	mov	r8, r0
 8002a5a:	d102      	bne.n	8002a62 <__cvt+0x62>
 8002a5c:	f019 0f01 	tst.w	r9, #1
 8002a60:	d026      	beq.n	8002ab0 <__cvt+0xb0>
 8002a62:	2f46      	cmp	r7, #70	; 0x46
 8002a64:	eb08 0906 	add.w	r9, r8, r6
 8002a68:	d111      	bne.n	8002a8e <__cvt+0x8e>
 8002a6a:	f898 3000 	ldrb.w	r3, [r8]
 8002a6e:	2b30      	cmp	r3, #48	; 0x30
 8002a70:	d10a      	bne.n	8002a88 <__cvt+0x88>
 8002a72:	2200      	movs	r2, #0
 8002a74:	2300      	movs	r3, #0
 8002a76:	4620      	mov	r0, r4
 8002a78:	4629      	mov	r1, r5
 8002a7a:	f7fe f825 	bl	8000ac8 <__aeabi_dcmpeq>
 8002a7e:	b918      	cbnz	r0, 8002a88 <__cvt+0x88>
 8002a80:	f1c6 0601 	rsb	r6, r6, #1
 8002a84:	f8ca 6000 	str.w	r6, [sl]
 8002a88:	f8da 3000 	ldr.w	r3, [sl]
 8002a8c:	4499      	add	r9, r3
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2300      	movs	r3, #0
 8002a92:	4620      	mov	r0, r4
 8002a94:	4629      	mov	r1, r5
 8002a96:	f7fe f817 	bl	8000ac8 <__aeabi_dcmpeq>
 8002a9a:	b938      	cbnz	r0, 8002aac <__cvt+0xac>
 8002a9c:	2230      	movs	r2, #48	; 0x30
 8002a9e:	9b03      	ldr	r3, [sp, #12]
 8002aa0:	454b      	cmp	r3, r9
 8002aa2:	d205      	bcs.n	8002ab0 <__cvt+0xb0>
 8002aa4:	1c59      	adds	r1, r3, #1
 8002aa6:	9103      	str	r1, [sp, #12]
 8002aa8:	701a      	strb	r2, [r3, #0]
 8002aaa:	e7f8      	b.n	8002a9e <__cvt+0x9e>
 8002aac:	f8cd 900c 	str.w	r9, [sp, #12]
 8002ab0:	9b03      	ldr	r3, [sp, #12]
 8002ab2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002ab4:	eba3 0308 	sub.w	r3, r3, r8
 8002ab8:	4640      	mov	r0, r8
 8002aba:	6013      	str	r3, [r2, #0]
 8002abc:	b004      	add	sp, #16
 8002abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002ac2 <__exponent>:
 8002ac2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ac4:	2900      	cmp	r1, #0
 8002ac6:	4604      	mov	r4, r0
 8002ac8:	bfba      	itte	lt
 8002aca:	4249      	neglt	r1, r1
 8002acc:	232d      	movlt	r3, #45	; 0x2d
 8002ace:	232b      	movge	r3, #43	; 0x2b
 8002ad0:	2909      	cmp	r1, #9
 8002ad2:	f804 2b02 	strb.w	r2, [r4], #2
 8002ad6:	7043      	strb	r3, [r0, #1]
 8002ad8:	dd20      	ble.n	8002b1c <__exponent+0x5a>
 8002ada:	f10d 0307 	add.w	r3, sp, #7
 8002ade:	461f      	mov	r7, r3
 8002ae0:	260a      	movs	r6, #10
 8002ae2:	fb91 f5f6 	sdiv	r5, r1, r6
 8002ae6:	fb06 1115 	mls	r1, r6, r5, r1
 8002aea:	3130      	adds	r1, #48	; 0x30
 8002aec:	2d09      	cmp	r5, #9
 8002aee:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002af2:	f103 32ff 	add.w	r2, r3, #4294967295
 8002af6:	4629      	mov	r1, r5
 8002af8:	dc09      	bgt.n	8002b0e <__exponent+0x4c>
 8002afa:	3130      	adds	r1, #48	; 0x30
 8002afc:	3b02      	subs	r3, #2
 8002afe:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002b02:	42bb      	cmp	r3, r7
 8002b04:	4622      	mov	r2, r4
 8002b06:	d304      	bcc.n	8002b12 <__exponent+0x50>
 8002b08:	1a10      	subs	r0, r2, r0
 8002b0a:	b003      	add	sp, #12
 8002b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b0e:	4613      	mov	r3, r2
 8002b10:	e7e7      	b.n	8002ae2 <__exponent+0x20>
 8002b12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b16:	f804 2b01 	strb.w	r2, [r4], #1
 8002b1a:	e7f2      	b.n	8002b02 <__exponent+0x40>
 8002b1c:	2330      	movs	r3, #48	; 0x30
 8002b1e:	4419      	add	r1, r3
 8002b20:	7083      	strb	r3, [r0, #2]
 8002b22:	1d02      	adds	r2, r0, #4
 8002b24:	70c1      	strb	r1, [r0, #3]
 8002b26:	e7ef      	b.n	8002b08 <__exponent+0x46>

08002b28 <_printf_float>:
 8002b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b2c:	b08d      	sub	sp, #52	; 0x34
 8002b2e:	460c      	mov	r4, r1
 8002b30:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8002b34:	4616      	mov	r6, r2
 8002b36:	461f      	mov	r7, r3
 8002b38:	4605      	mov	r5, r0
 8002b3a:	f001 fa45 	bl	8003fc8 <_localeconv_r>
 8002b3e:	6803      	ldr	r3, [r0, #0]
 8002b40:	9304      	str	r3, [sp, #16]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fd fb44 	bl	80001d0 <strlen>
 8002b48:	2300      	movs	r3, #0
 8002b4a:	930a      	str	r3, [sp, #40]	; 0x28
 8002b4c:	f8d8 3000 	ldr.w	r3, [r8]
 8002b50:	9005      	str	r0, [sp, #20]
 8002b52:	3307      	adds	r3, #7
 8002b54:	f023 0307 	bic.w	r3, r3, #7
 8002b58:	f103 0208 	add.w	r2, r3, #8
 8002b5c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002b60:	f8d4 b000 	ldr.w	fp, [r4]
 8002b64:	f8c8 2000 	str.w	r2, [r8]
 8002b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002b70:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002b74:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002b78:	9307      	str	r3, [sp, #28]
 8002b7a:	f8cd 8018 	str.w	r8, [sp, #24]
 8002b7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b82:	4ba7      	ldr	r3, [pc, #668]	; (8002e20 <_printf_float+0x2f8>)
 8002b84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002b88:	f7fd ffd0 	bl	8000b2c <__aeabi_dcmpun>
 8002b8c:	bb70      	cbnz	r0, 8002bec <_printf_float+0xc4>
 8002b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b92:	4ba3      	ldr	r3, [pc, #652]	; (8002e20 <_printf_float+0x2f8>)
 8002b94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002b98:	f7fd ffaa 	bl	8000af0 <__aeabi_dcmple>
 8002b9c:	bb30      	cbnz	r0, 8002bec <_printf_float+0xc4>
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	4640      	mov	r0, r8
 8002ba4:	4649      	mov	r1, r9
 8002ba6:	f7fd ff99 	bl	8000adc <__aeabi_dcmplt>
 8002baa:	b110      	cbz	r0, 8002bb2 <_printf_float+0x8a>
 8002bac:	232d      	movs	r3, #45	; 0x2d
 8002bae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bb2:	4a9c      	ldr	r2, [pc, #624]	; (8002e24 <_printf_float+0x2fc>)
 8002bb4:	4b9c      	ldr	r3, [pc, #624]	; (8002e28 <_printf_float+0x300>)
 8002bb6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002bba:	bf8c      	ite	hi
 8002bbc:	4690      	movhi	r8, r2
 8002bbe:	4698      	movls	r8, r3
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	f02b 0204 	bic.w	r2, fp, #4
 8002bc6:	6123      	str	r3, [r4, #16]
 8002bc8:	6022      	str	r2, [r4, #0]
 8002bca:	f04f 0900 	mov.w	r9, #0
 8002bce:	9700      	str	r7, [sp, #0]
 8002bd0:	4633      	mov	r3, r6
 8002bd2:	aa0b      	add	r2, sp, #44	; 0x2c
 8002bd4:	4621      	mov	r1, r4
 8002bd6:	4628      	mov	r0, r5
 8002bd8:	f000 f9e6 	bl	8002fa8 <_printf_common>
 8002bdc:	3001      	adds	r0, #1
 8002bde:	f040 808d 	bne.w	8002cfc <_printf_float+0x1d4>
 8002be2:	f04f 30ff 	mov.w	r0, #4294967295
 8002be6:	b00d      	add	sp, #52	; 0x34
 8002be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bec:	4642      	mov	r2, r8
 8002bee:	464b      	mov	r3, r9
 8002bf0:	4640      	mov	r0, r8
 8002bf2:	4649      	mov	r1, r9
 8002bf4:	f7fd ff9a 	bl	8000b2c <__aeabi_dcmpun>
 8002bf8:	b110      	cbz	r0, 8002c00 <_printf_float+0xd8>
 8002bfa:	4a8c      	ldr	r2, [pc, #560]	; (8002e2c <_printf_float+0x304>)
 8002bfc:	4b8c      	ldr	r3, [pc, #560]	; (8002e30 <_printf_float+0x308>)
 8002bfe:	e7da      	b.n	8002bb6 <_printf_float+0x8e>
 8002c00:	6861      	ldr	r1, [r4, #4]
 8002c02:	1c4b      	adds	r3, r1, #1
 8002c04:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8002c08:	a80a      	add	r0, sp, #40	; 0x28
 8002c0a:	d13e      	bne.n	8002c8a <_printf_float+0x162>
 8002c0c:	2306      	movs	r3, #6
 8002c0e:	6063      	str	r3, [r4, #4]
 8002c10:	2300      	movs	r3, #0
 8002c12:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8002c16:	ab09      	add	r3, sp, #36	; 0x24
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	ec49 8b10 	vmov	d0, r8, r9
 8002c1e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002c22:	6022      	str	r2, [r4, #0]
 8002c24:	f8cd a004 	str.w	sl, [sp, #4]
 8002c28:	6861      	ldr	r1, [r4, #4]
 8002c2a:	4628      	mov	r0, r5
 8002c2c:	f7ff fee8 	bl	8002a00 <__cvt>
 8002c30:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8002c34:	2b47      	cmp	r3, #71	; 0x47
 8002c36:	4680      	mov	r8, r0
 8002c38:	d109      	bne.n	8002c4e <_printf_float+0x126>
 8002c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c3c:	1cd8      	adds	r0, r3, #3
 8002c3e:	db02      	blt.n	8002c46 <_printf_float+0x11e>
 8002c40:	6862      	ldr	r2, [r4, #4]
 8002c42:	4293      	cmp	r3, r2
 8002c44:	dd47      	ble.n	8002cd6 <_printf_float+0x1ae>
 8002c46:	f1aa 0a02 	sub.w	sl, sl, #2
 8002c4a:	fa5f fa8a 	uxtb.w	sl, sl
 8002c4e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002c52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002c54:	d824      	bhi.n	8002ca0 <_printf_float+0x178>
 8002c56:	3901      	subs	r1, #1
 8002c58:	4652      	mov	r2, sl
 8002c5a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002c5e:	9109      	str	r1, [sp, #36]	; 0x24
 8002c60:	f7ff ff2f 	bl	8002ac2 <__exponent>
 8002c64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002c66:	1813      	adds	r3, r2, r0
 8002c68:	2a01      	cmp	r2, #1
 8002c6a:	4681      	mov	r9, r0
 8002c6c:	6123      	str	r3, [r4, #16]
 8002c6e:	dc02      	bgt.n	8002c76 <_printf_float+0x14e>
 8002c70:	6822      	ldr	r2, [r4, #0]
 8002c72:	07d1      	lsls	r1, r2, #31
 8002c74:	d501      	bpl.n	8002c7a <_printf_float+0x152>
 8002c76:	3301      	adds	r3, #1
 8002c78:	6123      	str	r3, [r4, #16]
 8002c7a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0a5      	beq.n	8002bce <_printf_float+0xa6>
 8002c82:	232d      	movs	r3, #45	; 0x2d
 8002c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c88:	e7a1      	b.n	8002bce <_printf_float+0xa6>
 8002c8a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8002c8e:	f000 8177 	beq.w	8002f80 <_printf_float+0x458>
 8002c92:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002c96:	d1bb      	bne.n	8002c10 <_printf_float+0xe8>
 8002c98:	2900      	cmp	r1, #0
 8002c9a:	d1b9      	bne.n	8002c10 <_printf_float+0xe8>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e7b6      	b.n	8002c0e <_printf_float+0xe6>
 8002ca0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8002ca4:	d119      	bne.n	8002cda <_printf_float+0x1b2>
 8002ca6:	2900      	cmp	r1, #0
 8002ca8:	6863      	ldr	r3, [r4, #4]
 8002caa:	dd0c      	ble.n	8002cc6 <_printf_float+0x19e>
 8002cac:	6121      	str	r1, [r4, #16]
 8002cae:	b913      	cbnz	r3, 8002cb6 <_printf_float+0x18e>
 8002cb0:	6822      	ldr	r2, [r4, #0]
 8002cb2:	07d2      	lsls	r2, r2, #31
 8002cb4:	d502      	bpl.n	8002cbc <_printf_float+0x194>
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	440b      	add	r3, r1
 8002cba:	6123      	str	r3, [r4, #16]
 8002cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cbe:	65a3      	str	r3, [r4, #88]	; 0x58
 8002cc0:	f04f 0900 	mov.w	r9, #0
 8002cc4:	e7d9      	b.n	8002c7a <_printf_float+0x152>
 8002cc6:	b913      	cbnz	r3, 8002cce <_printf_float+0x1a6>
 8002cc8:	6822      	ldr	r2, [r4, #0]
 8002cca:	07d0      	lsls	r0, r2, #31
 8002ccc:	d501      	bpl.n	8002cd2 <_printf_float+0x1aa>
 8002cce:	3302      	adds	r3, #2
 8002cd0:	e7f3      	b.n	8002cba <_printf_float+0x192>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e7f1      	b.n	8002cba <_printf_float+0x192>
 8002cd6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8002cda:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	db05      	blt.n	8002cee <_printf_float+0x1c6>
 8002ce2:	6822      	ldr	r2, [r4, #0]
 8002ce4:	6123      	str	r3, [r4, #16]
 8002ce6:	07d1      	lsls	r1, r2, #31
 8002ce8:	d5e8      	bpl.n	8002cbc <_printf_float+0x194>
 8002cea:	3301      	adds	r3, #1
 8002cec:	e7e5      	b.n	8002cba <_printf_float+0x192>
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	bfd4      	ite	le
 8002cf2:	f1c3 0302 	rsble	r3, r3, #2
 8002cf6:	2301      	movgt	r3, #1
 8002cf8:	4413      	add	r3, r2
 8002cfa:	e7de      	b.n	8002cba <_printf_float+0x192>
 8002cfc:	6823      	ldr	r3, [r4, #0]
 8002cfe:	055a      	lsls	r2, r3, #21
 8002d00:	d407      	bmi.n	8002d12 <_printf_float+0x1ea>
 8002d02:	6923      	ldr	r3, [r4, #16]
 8002d04:	4642      	mov	r2, r8
 8002d06:	4631      	mov	r1, r6
 8002d08:	4628      	mov	r0, r5
 8002d0a:	47b8      	blx	r7
 8002d0c:	3001      	adds	r0, #1
 8002d0e:	d12b      	bne.n	8002d68 <_printf_float+0x240>
 8002d10:	e767      	b.n	8002be2 <_printf_float+0xba>
 8002d12:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002d16:	f240 80dc 	bls.w	8002ed2 <_printf_float+0x3aa>
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002d22:	f7fd fed1 	bl	8000ac8 <__aeabi_dcmpeq>
 8002d26:	2800      	cmp	r0, #0
 8002d28:	d033      	beq.n	8002d92 <_printf_float+0x26a>
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	4a41      	ldr	r2, [pc, #260]	; (8002e34 <_printf_float+0x30c>)
 8002d2e:	4631      	mov	r1, r6
 8002d30:	4628      	mov	r0, r5
 8002d32:	47b8      	blx	r7
 8002d34:	3001      	adds	r0, #1
 8002d36:	f43f af54 	beq.w	8002be2 <_printf_float+0xba>
 8002d3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	db02      	blt.n	8002d48 <_printf_float+0x220>
 8002d42:	6823      	ldr	r3, [r4, #0]
 8002d44:	07d8      	lsls	r0, r3, #31
 8002d46:	d50f      	bpl.n	8002d68 <_printf_float+0x240>
 8002d48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002d4c:	4631      	mov	r1, r6
 8002d4e:	4628      	mov	r0, r5
 8002d50:	47b8      	blx	r7
 8002d52:	3001      	adds	r0, #1
 8002d54:	f43f af45 	beq.w	8002be2 <_printf_float+0xba>
 8002d58:	f04f 0800 	mov.w	r8, #0
 8002d5c:	f104 091a 	add.w	r9, r4, #26
 8002d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d62:	3b01      	subs	r3, #1
 8002d64:	4543      	cmp	r3, r8
 8002d66:	dc09      	bgt.n	8002d7c <_printf_float+0x254>
 8002d68:	6823      	ldr	r3, [r4, #0]
 8002d6a:	079b      	lsls	r3, r3, #30
 8002d6c:	f100 8103 	bmi.w	8002f76 <_printf_float+0x44e>
 8002d70:	68e0      	ldr	r0, [r4, #12]
 8002d72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002d74:	4298      	cmp	r0, r3
 8002d76:	bfb8      	it	lt
 8002d78:	4618      	movlt	r0, r3
 8002d7a:	e734      	b.n	8002be6 <_printf_float+0xbe>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	464a      	mov	r2, r9
 8002d80:	4631      	mov	r1, r6
 8002d82:	4628      	mov	r0, r5
 8002d84:	47b8      	blx	r7
 8002d86:	3001      	adds	r0, #1
 8002d88:	f43f af2b 	beq.w	8002be2 <_printf_float+0xba>
 8002d8c:	f108 0801 	add.w	r8, r8, #1
 8002d90:	e7e6      	b.n	8002d60 <_printf_float+0x238>
 8002d92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	dc2b      	bgt.n	8002df0 <_printf_float+0x2c8>
 8002d98:	2301      	movs	r3, #1
 8002d9a:	4a26      	ldr	r2, [pc, #152]	; (8002e34 <_printf_float+0x30c>)
 8002d9c:	4631      	mov	r1, r6
 8002d9e:	4628      	mov	r0, r5
 8002da0:	47b8      	blx	r7
 8002da2:	3001      	adds	r0, #1
 8002da4:	f43f af1d 	beq.w	8002be2 <_printf_float+0xba>
 8002da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002daa:	b923      	cbnz	r3, 8002db6 <_printf_float+0x28e>
 8002dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002dae:	b913      	cbnz	r3, 8002db6 <_printf_float+0x28e>
 8002db0:	6823      	ldr	r3, [r4, #0]
 8002db2:	07d9      	lsls	r1, r3, #31
 8002db4:	d5d8      	bpl.n	8002d68 <_printf_float+0x240>
 8002db6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002dba:	4631      	mov	r1, r6
 8002dbc:	4628      	mov	r0, r5
 8002dbe:	47b8      	blx	r7
 8002dc0:	3001      	adds	r0, #1
 8002dc2:	f43f af0e 	beq.w	8002be2 <_printf_float+0xba>
 8002dc6:	f04f 0900 	mov.w	r9, #0
 8002dca:	f104 0a1a 	add.w	sl, r4, #26
 8002dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dd0:	425b      	negs	r3, r3
 8002dd2:	454b      	cmp	r3, r9
 8002dd4:	dc01      	bgt.n	8002dda <_printf_float+0x2b2>
 8002dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002dd8:	e794      	b.n	8002d04 <_printf_float+0x1dc>
 8002dda:	2301      	movs	r3, #1
 8002ddc:	4652      	mov	r2, sl
 8002dde:	4631      	mov	r1, r6
 8002de0:	4628      	mov	r0, r5
 8002de2:	47b8      	blx	r7
 8002de4:	3001      	adds	r0, #1
 8002de6:	f43f aefc 	beq.w	8002be2 <_printf_float+0xba>
 8002dea:	f109 0901 	add.w	r9, r9, #1
 8002dee:	e7ee      	b.n	8002dce <_printf_float+0x2a6>
 8002df0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002df2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002df4:	429a      	cmp	r2, r3
 8002df6:	bfa8      	it	ge
 8002df8:	461a      	movge	r2, r3
 8002dfa:	2a00      	cmp	r2, #0
 8002dfc:	4691      	mov	r9, r2
 8002dfe:	dd07      	ble.n	8002e10 <_printf_float+0x2e8>
 8002e00:	4613      	mov	r3, r2
 8002e02:	4631      	mov	r1, r6
 8002e04:	4642      	mov	r2, r8
 8002e06:	4628      	mov	r0, r5
 8002e08:	47b8      	blx	r7
 8002e0a:	3001      	adds	r0, #1
 8002e0c:	f43f aee9 	beq.w	8002be2 <_printf_float+0xba>
 8002e10:	f104 031a 	add.w	r3, r4, #26
 8002e14:	f04f 0b00 	mov.w	fp, #0
 8002e18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002e1c:	9306      	str	r3, [sp, #24]
 8002e1e:	e015      	b.n	8002e4c <_printf_float+0x324>
 8002e20:	7fefffff 	.word	0x7fefffff
 8002e24:	08004a2b 	.word	0x08004a2b
 8002e28:	08004a27 	.word	0x08004a27
 8002e2c:	08004a33 	.word	0x08004a33
 8002e30:	08004a2f 	.word	0x08004a2f
 8002e34:	08004a37 	.word	0x08004a37
 8002e38:	2301      	movs	r3, #1
 8002e3a:	9a06      	ldr	r2, [sp, #24]
 8002e3c:	4631      	mov	r1, r6
 8002e3e:	4628      	mov	r0, r5
 8002e40:	47b8      	blx	r7
 8002e42:	3001      	adds	r0, #1
 8002e44:	f43f aecd 	beq.w	8002be2 <_printf_float+0xba>
 8002e48:	f10b 0b01 	add.w	fp, fp, #1
 8002e4c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002e50:	ebaa 0309 	sub.w	r3, sl, r9
 8002e54:	455b      	cmp	r3, fp
 8002e56:	dcef      	bgt.n	8002e38 <_printf_float+0x310>
 8002e58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	44d0      	add	r8, sl
 8002e60:	db15      	blt.n	8002e8e <_printf_float+0x366>
 8002e62:	6823      	ldr	r3, [r4, #0]
 8002e64:	07da      	lsls	r2, r3, #31
 8002e66:	d412      	bmi.n	8002e8e <_printf_float+0x366>
 8002e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002e6c:	eba3 020a 	sub.w	r2, r3, sl
 8002e70:	eba3 0a01 	sub.w	sl, r3, r1
 8002e74:	4592      	cmp	sl, r2
 8002e76:	bfa8      	it	ge
 8002e78:	4692      	movge	sl, r2
 8002e7a:	f1ba 0f00 	cmp.w	sl, #0
 8002e7e:	dc0e      	bgt.n	8002e9e <_printf_float+0x376>
 8002e80:	f04f 0800 	mov.w	r8, #0
 8002e84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8002e88:	f104 091a 	add.w	r9, r4, #26
 8002e8c:	e019      	b.n	8002ec2 <_printf_float+0x39a>
 8002e8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002e92:	4631      	mov	r1, r6
 8002e94:	4628      	mov	r0, r5
 8002e96:	47b8      	blx	r7
 8002e98:	3001      	adds	r0, #1
 8002e9a:	d1e5      	bne.n	8002e68 <_printf_float+0x340>
 8002e9c:	e6a1      	b.n	8002be2 <_printf_float+0xba>
 8002e9e:	4653      	mov	r3, sl
 8002ea0:	4642      	mov	r2, r8
 8002ea2:	4631      	mov	r1, r6
 8002ea4:	4628      	mov	r0, r5
 8002ea6:	47b8      	blx	r7
 8002ea8:	3001      	adds	r0, #1
 8002eaa:	d1e9      	bne.n	8002e80 <_printf_float+0x358>
 8002eac:	e699      	b.n	8002be2 <_printf_float+0xba>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	464a      	mov	r2, r9
 8002eb2:	4631      	mov	r1, r6
 8002eb4:	4628      	mov	r0, r5
 8002eb6:	47b8      	blx	r7
 8002eb8:	3001      	adds	r0, #1
 8002eba:	f43f ae92 	beq.w	8002be2 <_printf_float+0xba>
 8002ebe:	f108 0801 	add.w	r8, r8, #1
 8002ec2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002ec6:	1a9b      	subs	r3, r3, r2
 8002ec8:	eba3 030a 	sub.w	r3, r3, sl
 8002ecc:	4543      	cmp	r3, r8
 8002ece:	dcee      	bgt.n	8002eae <_printf_float+0x386>
 8002ed0:	e74a      	b.n	8002d68 <_printf_float+0x240>
 8002ed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002ed4:	2a01      	cmp	r2, #1
 8002ed6:	dc01      	bgt.n	8002edc <_printf_float+0x3b4>
 8002ed8:	07db      	lsls	r3, r3, #31
 8002eda:	d53a      	bpl.n	8002f52 <_printf_float+0x42a>
 8002edc:	2301      	movs	r3, #1
 8002ede:	4642      	mov	r2, r8
 8002ee0:	4631      	mov	r1, r6
 8002ee2:	4628      	mov	r0, r5
 8002ee4:	47b8      	blx	r7
 8002ee6:	3001      	adds	r0, #1
 8002ee8:	f43f ae7b 	beq.w	8002be2 <_printf_float+0xba>
 8002eec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002ef0:	4631      	mov	r1, r6
 8002ef2:	4628      	mov	r0, r5
 8002ef4:	47b8      	blx	r7
 8002ef6:	3001      	adds	r0, #1
 8002ef8:	f108 0801 	add.w	r8, r8, #1
 8002efc:	f43f ae71 	beq.w	8002be2 <_printf_float+0xba>
 8002f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f02:	2200      	movs	r2, #0
 8002f04:	f103 3aff 	add.w	sl, r3, #4294967295
 8002f08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	f7fd fddb 	bl	8000ac8 <__aeabi_dcmpeq>
 8002f12:	b9c8      	cbnz	r0, 8002f48 <_printf_float+0x420>
 8002f14:	4653      	mov	r3, sl
 8002f16:	4642      	mov	r2, r8
 8002f18:	4631      	mov	r1, r6
 8002f1a:	4628      	mov	r0, r5
 8002f1c:	47b8      	blx	r7
 8002f1e:	3001      	adds	r0, #1
 8002f20:	d10e      	bne.n	8002f40 <_printf_float+0x418>
 8002f22:	e65e      	b.n	8002be2 <_printf_float+0xba>
 8002f24:	2301      	movs	r3, #1
 8002f26:	4652      	mov	r2, sl
 8002f28:	4631      	mov	r1, r6
 8002f2a:	4628      	mov	r0, r5
 8002f2c:	47b8      	blx	r7
 8002f2e:	3001      	adds	r0, #1
 8002f30:	f43f ae57 	beq.w	8002be2 <_printf_float+0xba>
 8002f34:	f108 0801 	add.w	r8, r8, #1
 8002f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	4543      	cmp	r3, r8
 8002f3e:	dcf1      	bgt.n	8002f24 <_printf_float+0x3fc>
 8002f40:	464b      	mov	r3, r9
 8002f42:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002f46:	e6de      	b.n	8002d06 <_printf_float+0x1de>
 8002f48:	f04f 0800 	mov.w	r8, #0
 8002f4c:	f104 0a1a 	add.w	sl, r4, #26
 8002f50:	e7f2      	b.n	8002f38 <_printf_float+0x410>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e7df      	b.n	8002f16 <_printf_float+0x3ee>
 8002f56:	2301      	movs	r3, #1
 8002f58:	464a      	mov	r2, r9
 8002f5a:	4631      	mov	r1, r6
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	47b8      	blx	r7
 8002f60:	3001      	adds	r0, #1
 8002f62:	f43f ae3e 	beq.w	8002be2 <_printf_float+0xba>
 8002f66:	f108 0801 	add.w	r8, r8, #1
 8002f6a:	68e3      	ldr	r3, [r4, #12]
 8002f6c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	4543      	cmp	r3, r8
 8002f72:	dcf0      	bgt.n	8002f56 <_printf_float+0x42e>
 8002f74:	e6fc      	b.n	8002d70 <_printf_float+0x248>
 8002f76:	f04f 0800 	mov.w	r8, #0
 8002f7a:	f104 0919 	add.w	r9, r4, #25
 8002f7e:	e7f4      	b.n	8002f6a <_printf_float+0x442>
 8002f80:	2900      	cmp	r1, #0
 8002f82:	f43f ae8b 	beq.w	8002c9c <_printf_float+0x174>
 8002f86:	2300      	movs	r3, #0
 8002f88:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8002f8c:	ab09      	add	r3, sp, #36	; 0x24
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	ec49 8b10 	vmov	d0, r8, r9
 8002f94:	6022      	str	r2, [r4, #0]
 8002f96:	f8cd a004 	str.w	sl, [sp, #4]
 8002f9a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002f9e:	4628      	mov	r0, r5
 8002fa0:	f7ff fd2e 	bl	8002a00 <__cvt>
 8002fa4:	4680      	mov	r8, r0
 8002fa6:	e648      	b.n	8002c3a <_printf_float+0x112>

08002fa8 <_printf_common>:
 8002fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fac:	4691      	mov	r9, r2
 8002fae:	461f      	mov	r7, r3
 8002fb0:	688a      	ldr	r2, [r1, #8]
 8002fb2:	690b      	ldr	r3, [r1, #16]
 8002fb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	bfb8      	it	lt
 8002fbc:	4613      	movlt	r3, r2
 8002fbe:	f8c9 3000 	str.w	r3, [r9]
 8002fc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fc6:	4606      	mov	r6, r0
 8002fc8:	460c      	mov	r4, r1
 8002fca:	b112      	cbz	r2, 8002fd2 <_printf_common+0x2a>
 8002fcc:	3301      	adds	r3, #1
 8002fce:	f8c9 3000 	str.w	r3, [r9]
 8002fd2:	6823      	ldr	r3, [r4, #0]
 8002fd4:	0699      	lsls	r1, r3, #26
 8002fd6:	bf42      	ittt	mi
 8002fd8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002fdc:	3302      	addmi	r3, #2
 8002fde:	f8c9 3000 	strmi.w	r3, [r9]
 8002fe2:	6825      	ldr	r5, [r4, #0]
 8002fe4:	f015 0506 	ands.w	r5, r5, #6
 8002fe8:	d107      	bne.n	8002ffa <_printf_common+0x52>
 8002fea:	f104 0a19 	add.w	sl, r4, #25
 8002fee:	68e3      	ldr	r3, [r4, #12]
 8002ff0:	f8d9 2000 	ldr.w	r2, [r9]
 8002ff4:	1a9b      	subs	r3, r3, r2
 8002ff6:	42ab      	cmp	r3, r5
 8002ff8:	dc28      	bgt.n	800304c <_printf_common+0xa4>
 8002ffa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002ffe:	6822      	ldr	r2, [r4, #0]
 8003000:	3300      	adds	r3, #0
 8003002:	bf18      	it	ne
 8003004:	2301      	movne	r3, #1
 8003006:	0692      	lsls	r2, r2, #26
 8003008:	d42d      	bmi.n	8003066 <_printf_common+0xbe>
 800300a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800300e:	4639      	mov	r1, r7
 8003010:	4630      	mov	r0, r6
 8003012:	47c0      	blx	r8
 8003014:	3001      	adds	r0, #1
 8003016:	d020      	beq.n	800305a <_printf_common+0xb2>
 8003018:	6823      	ldr	r3, [r4, #0]
 800301a:	68e5      	ldr	r5, [r4, #12]
 800301c:	f8d9 2000 	ldr.w	r2, [r9]
 8003020:	f003 0306 	and.w	r3, r3, #6
 8003024:	2b04      	cmp	r3, #4
 8003026:	bf08      	it	eq
 8003028:	1aad      	subeq	r5, r5, r2
 800302a:	68a3      	ldr	r3, [r4, #8]
 800302c:	6922      	ldr	r2, [r4, #16]
 800302e:	bf0c      	ite	eq
 8003030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003034:	2500      	movne	r5, #0
 8003036:	4293      	cmp	r3, r2
 8003038:	bfc4      	itt	gt
 800303a:	1a9b      	subgt	r3, r3, r2
 800303c:	18ed      	addgt	r5, r5, r3
 800303e:	f04f 0900 	mov.w	r9, #0
 8003042:	341a      	adds	r4, #26
 8003044:	454d      	cmp	r5, r9
 8003046:	d11a      	bne.n	800307e <_printf_common+0xd6>
 8003048:	2000      	movs	r0, #0
 800304a:	e008      	b.n	800305e <_printf_common+0xb6>
 800304c:	2301      	movs	r3, #1
 800304e:	4652      	mov	r2, sl
 8003050:	4639      	mov	r1, r7
 8003052:	4630      	mov	r0, r6
 8003054:	47c0      	blx	r8
 8003056:	3001      	adds	r0, #1
 8003058:	d103      	bne.n	8003062 <_printf_common+0xba>
 800305a:	f04f 30ff 	mov.w	r0, #4294967295
 800305e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003062:	3501      	adds	r5, #1
 8003064:	e7c3      	b.n	8002fee <_printf_common+0x46>
 8003066:	18e1      	adds	r1, r4, r3
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	2030      	movs	r0, #48	; 0x30
 800306c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003070:	4422      	add	r2, r4
 8003072:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003076:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800307a:	3302      	adds	r3, #2
 800307c:	e7c5      	b.n	800300a <_printf_common+0x62>
 800307e:	2301      	movs	r3, #1
 8003080:	4622      	mov	r2, r4
 8003082:	4639      	mov	r1, r7
 8003084:	4630      	mov	r0, r6
 8003086:	47c0      	blx	r8
 8003088:	3001      	adds	r0, #1
 800308a:	d0e6      	beq.n	800305a <_printf_common+0xb2>
 800308c:	f109 0901 	add.w	r9, r9, #1
 8003090:	e7d8      	b.n	8003044 <_printf_common+0x9c>
	...

08003094 <_printf_i>:
 8003094:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003098:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800309c:	460c      	mov	r4, r1
 800309e:	7e09      	ldrb	r1, [r1, #24]
 80030a0:	b085      	sub	sp, #20
 80030a2:	296e      	cmp	r1, #110	; 0x6e
 80030a4:	4617      	mov	r7, r2
 80030a6:	4606      	mov	r6, r0
 80030a8:	4698      	mov	r8, r3
 80030aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80030ac:	f000 80b3 	beq.w	8003216 <_printf_i+0x182>
 80030b0:	d822      	bhi.n	80030f8 <_printf_i+0x64>
 80030b2:	2963      	cmp	r1, #99	; 0x63
 80030b4:	d036      	beq.n	8003124 <_printf_i+0x90>
 80030b6:	d80a      	bhi.n	80030ce <_printf_i+0x3a>
 80030b8:	2900      	cmp	r1, #0
 80030ba:	f000 80b9 	beq.w	8003230 <_printf_i+0x19c>
 80030be:	2958      	cmp	r1, #88	; 0x58
 80030c0:	f000 8083 	beq.w	80031ca <_printf_i+0x136>
 80030c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030c8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80030cc:	e032      	b.n	8003134 <_printf_i+0xa0>
 80030ce:	2964      	cmp	r1, #100	; 0x64
 80030d0:	d001      	beq.n	80030d6 <_printf_i+0x42>
 80030d2:	2969      	cmp	r1, #105	; 0x69
 80030d4:	d1f6      	bne.n	80030c4 <_printf_i+0x30>
 80030d6:	6820      	ldr	r0, [r4, #0]
 80030d8:	6813      	ldr	r3, [r2, #0]
 80030da:	0605      	lsls	r5, r0, #24
 80030dc:	f103 0104 	add.w	r1, r3, #4
 80030e0:	d52a      	bpl.n	8003138 <_printf_i+0xa4>
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6011      	str	r1, [r2, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	da03      	bge.n	80030f2 <_printf_i+0x5e>
 80030ea:	222d      	movs	r2, #45	; 0x2d
 80030ec:	425b      	negs	r3, r3
 80030ee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80030f2:	486f      	ldr	r0, [pc, #444]	; (80032b0 <_printf_i+0x21c>)
 80030f4:	220a      	movs	r2, #10
 80030f6:	e039      	b.n	800316c <_printf_i+0xd8>
 80030f8:	2973      	cmp	r1, #115	; 0x73
 80030fa:	f000 809d 	beq.w	8003238 <_printf_i+0x1a4>
 80030fe:	d808      	bhi.n	8003112 <_printf_i+0x7e>
 8003100:	296f      	cmp	r1, #111	; 0x6f
 8003102:	d020      	beq.n	8003146 <_printf_i+0xb2>
 8003104:	2970      	cmp	r1, #112	; 0x70
 8003106:	d1dd      	bne.n	80030c4 <_printf_i+0x30>
 8003108:	6823      	ldr	r3, [r4, #0]
 800310a:	f043 0320 	orr.w	r3, r3, #32
 800310e:	6023      	str	r3, [r4, #0]
 8003110:	e003      	b.n	800311a <_printf_i+0x86>
 8003112:	2975      	cmp	r1, #117	; 0x75
 8003114:	d017      	beq.n	8003146 <_printf_i+0xb2>
 8003116:	2978      	cmp	r1, #120	; 0x78
 8003118:	d1d4      	bne.n	80030c4 <_printf_i+0x30>
 800311a:	2378      	movs	r3, #120	; 0x78
 800311c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003120:	4864      	ldr	r0, [pc, #400]	; (80032b4 <_printf_i+0x220>)
 8003122:	e055      	b.n	80031d0 <_printf_i+0x13c>
 8003124:	6813      	ldr	r3, [r2, #0]
 8003126:	1d19      	adds	r1, r3, #4
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6011      	str	r1, [r2, #0]
 800312c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003130:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003134:	2301      	movs	r3, #1
 8003136:	e08c      	b.n	8003252 <_printf_i+0x1be>
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6011      	str	r1, [r2, #0]
 800313c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003140:	bf18      	it	ne
 8003142:	b21b      	sxthne	r3, r3
 8003144:	e7cf      	b.n	80030e6 <_printf_i+0x52>
 8003146:	6813      	ldr	r3, [r2, #0]
 8003148:	6825      	ldr	r5, [r4, #0]
 800314a:	1d18      	adds	r0, r3, #4
 800314c:	6010      	str	r0, [r2, #0]
 800314e:	0628      	lsls	r0, r5, #24
 8003150:	d501      	bpl.n	8003156 <_printf_i+0xc2>
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	e002      	b.n	800315c <_printf_i+0xc8>
 8003156:	0668      	lsls	r0, r5, #25
 8003158:	d5fb      	bpl.n	8003152 <_printf_i+0xbe>
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	4854      	ldr	r0, [pc, #336]	; (80032b0 <_printf_i+0x21c>)
 800315e:	296f      	cmp	r1, #111	; 0x6f
 8003160:	bf14      	ite	ne
 8003162:	220a      	movne	r2, #10
 8003164:	2208      	moveq	r2, #8
 8003166:	2100      	movs	r1, #0
 8003168:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800316c:	6865      	ldr	r5, [r4, #4]
 800316e:	60a5      	str	r5, [r4, #8]
 8003170:	2d00      	cmp	r5, #0
 8003172:	f2c0 8095 	blt.w	80032a0 <_printf_i+0x20c>
 8003176:	6821      	ldr	r1, [r4, #0]
 8003178:	f021 0104 	bic.w	r1, r1, #4
 800317c:	6021      	str	r1, [r4, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d13d      	bne.n	80031fe <_printf_i+0x16a>
 8003182:	2d00      	cmp	r5, #0
 8003184:	f040 808e 	bne.w	80032a4 <_printf_i+0x210>
 8003188:	4665      	mov	r5, ip
 800318a:	2a08      	cmp	r2, #8
 800318c:	d10b      	bne.n	80031a6 <_printf_i+0x112>
 800318e:	6823      	ldr	r3, [r4, #0]
 8003190:	07db      	lsls	r3, r3, #31
 8003192:	d508      	bpl.n	80031a6 <_printf_i+0x112>
 8003194:	6923      	ldr	r3, [r4, #16]
 8003196:	6862      	ldr	r2, [r4, #4]
 8003198:	429a      	cmp	r2, r3
 800319a:	bfde      	ittt	le
 800319c:	2330      	movle	r3, #48	; 0x30
 800319e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80031a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80031a6:	ebac 0305 	sub.w	r3, ip, r5
 80031aa:	6123      	str	r3, [r4, #16]
 80031ac:	f8cd 8000 	str.w	r8, [sp]
 80031b0:	463b      	mov	r3, r7
 80031b2:	aa03      	add	r2, sp, #12
 80031b4:	4621      	mov	r1, r4
 80031b6:	4630      	mov	r0, r6
 80031b8:	f7ff fef6 	bl	8002fa8 <_printf_common>
 80031bc:	3001      	adds	r0, #1
 80031be:	d14d      	bne.n	800325c <_printf_i+0x1c8>
 80031c0:	f04f 30ff 	mov.w	r0, #4294967295
 80031c4:	b005      	add	sp, #20
 80031c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80031ca:	4839      	ldr	r0, [pc, #228]	; (80032b0 <_printf_i+0x21c>)
 80031cc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80031d0:	6813      	ldr	r3, [r2, #0]
 80031d2:	6821      	ldr	r1, [r4, #0]
 80031d4:	1d1d      	adds	r5, r3, #4
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6015      	str	r5, [r2, #0]
 80031da:	060a      	lsls	r2, r1, #24
 80031dc:	d50b      	bpl.n	80031f6 <_printf_i+0x162>
 80031de:	07ca      	lsls	r2, r1, #31
 80031e0:	bf44      	itt	mi
 80031e2:	f041 0120 	orrmi.w	r1, r1, #32
 80031e6:	6021      	strmi	r1, [r4, #0]
 80031e8:	b91b      	cbnz	r3, 80031f2 <_printf_i+0x15e>
 80031ea:	6822      	ldr	r2, [r4, #0]
 80031ec:	f022 0220 	bic.w	r2, r2, #32
 80031f0:	6022      	str	r2, [r4, #0]
 80031f2:	2210      	movs	r2, #16
 80031f4:	e7b7      	b.n	8003166 <_printf_i+0xd2>
 80031f6:	064d      	lsls	r5, r1, #25
 80031f8:	bf48      	it	mi
 80031fa:	b29b      	uxthmi	r3, r3
 80031fc:	e7ef      	b.n	80031de <_printf_i+0x14a>
 80031fe:	4665      	mov	r5, ip
 8003200:	fbb3 f1f2 	udiv	r1, r3, r2
 8003204:	fb02 3311 	mls	r3, r2, r1, r3
 8003208:	5cc3      	ldrb	r3, [r0, r3]
 800320a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800320e:	460b      	mov	r3, r1
 8003210:	2900      	cmp	r1, #0
 8003212:	d1f5      	bne.n	8003200 <_printf_i+0x16c>
 8003214:	e7b9      	b.n	800318a <_printf_i+0xf6>
 8003216:	6813      	ldr	r3, [r2, #0]
 8003218:	6825      	ldr	r5, [r4, #0]
 800321a:	6961      	ldr	r1, [r4, #20]
 800321c:	1d18      	adds	r0, r3, #4
 800321e:	6010      	str	r0, [r2, #0]
 8003220:	0628      	lsls	r0, r5, #24
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	d501      	bpl.n	800322a <_printf_i+0x196>
 8003226:	6019      	str	r1, [r3, #0]
 8003228:	e002      	b.n	8003230 <_printf_i+0x19c>
 800322a:	066a      	lsls	r2, r5, #25
 800322c:	d5fb      	bpl.n	8003226 <_printf_i+0x192>
 800322e:	8019      	strh	r1, [r3, #0]
 8003230:	2300      	movs	r3, #0
 8003232:	6123      	str	r3, [r4, #16]
 8003234:	4665      	mov	r5, ip
 8003236:	e7b9      	b.n	80031ac <_printf_i+0x118>
 8003238:	6813      	ldr	r3, [r2, #0]
 800323a:	1d19      	adds	r1, r3, #4
 800323c:	6011      	str	r1, [r2, #0]
 800323e:	681d      	ldr	r5, [r3, #0]
 8003240:	6862      	ldr	r2, [r4, #4]
 8003242:	2100      	movs	r1, #0
 8003244:	4628      	mov	r0, r5
 8003246:	f7fc ffcb 	bl	80001e0 <memchr>
 800324a:	b108      	cbz	r0, 8003250 <_printf_i+0x1bc>
 800324c:	1b40      	subs	r0, r0, r5
 800324e:	6060      	str	r0, [r4, #4]
 8003250:	6863      	ldr	r3, [r4, #4]
 8003252:	6123      	str	r3, [r4, #16]
 8003254:	2300      	movs	r3, #0
 8003256:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800325a:	e7a7      	b.n	80031ac <_printf_i+0x118>
 800325c:	6923      	ldr	r3, [r4, #16]
 800325e:	462a      	mov	r2, r5
 8003260:	4639      	mov	r1, r7
 8003262:	4630      	mov	r0, r6
 8003264:	47c0      	blx	r8
 8003266:	3001      	adds	r0, #1
 8003268:	d0aa      	beq.n	80031c0 <_printf_i+0x12c>
 800326a:	6823      	ldr	r3, [r4, #0]
 800326c:	079b      	lsls	r3, r3, #30
 800326e:	d413      	bmi.n	8003298 <_printf_i+0x204>
 8003270:	68e0      	ldr	r0, [r4, #12]
 8003272:	9b03      	ldr	r3, [sp, #12]
 8003274:	4298      	cmp	r0, r3
 8003276:	bfb8      	it	lt
 8003278:	4618      	movlt	r0, r3
 800327a:	e7a3      	b.n	80031c4 <_printf_i+0x130>
 800327c:	2301      	movs	r3, #1
 800327e:	464a      	mov	r2, r9
 8003280:	4639      	mov	r1, r7
 8003282:	4630      	mov	r0, r6
 8003284:	47c0      	blx	r8
 8003286:	3001      	adds	r0, #1
 8003288:	d09a      	beq.n	80031c0 <_printf_i+0x12c>
 800328a:	3501      	adds	r5, #1
 800328c:	68e3      	ldr	r3, [r4, #12]
 800328e:	9a03      	ldr	r2, [sp, #12]
 8003290:	1a9b      	subs	r3, r3, r2
 8003292:	42ab      	cmp	r3, r5
 8003294:	dcf2      	bgt.n	800327c <_printf_i+0x1e8>
 8003296:	e7eb      	b.n	8003270 <_printf_i+0x1dc>
 8003298:	2500      	movs	r5, #0
 800329a:	f104 0919 	add.w	r9, r4, #25
 800329e:	e7f5      	b.n	800328c <_printf_i+0x1f8>
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1ac      	bne.n	80031fe <_printf_i+0x16a>
 80032a4:	7803      	ldrb	r3, [r0, #0]
 80032a6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032aa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032ae:	e76c      	b.n	800318a <_printf_i+0xf6>
 80032b0:	08004a39 	.word	0x08004a39
 80032b4:	08004a4a 	.word	0x08004a4a

080032b8 <_sbrk_r>:
 80032b8:	b538      	push	{r3, r4, r5, lr}
 80032ba:	4c06      	ldr	r4, [pc, #24]	; (80032d4 <_sbrk_r+0x1c>)
 80032bc:	2300      	movs	r3, #0
 80032be:	4605      	mov	r5, r0
 80032c0:	4608      	mov	r0, r1
 80032c2:	6023      	str	r3, [r4, #0]
 80032c4:	f7fe fd34 	bl	8001d30 <_sbrk>
 80032c8:	1c43      	adds	r3, r0, #1
 80032ca:	d102      	bne.n	80032d2 <_sbrk_r+0x1a>
 80032cc:	6823      	ldr	r3, [r4, #0]
 80032ce:	b103      	cbz	r3, 80032d2 <_sbrk_r+0x1a>
 80032d0:	602b      	str	r3, [r5, #0]
 80032d2:	bd38      	pop	{r3, r4, r5, pc}
 80032d4:	20000308 	.word	0x20000308

080032d8 <sniprintf>:
 80032d8:	b40c      	push	{r2, r3}
 80032da:	b530      	push	{r4, r5, lr}
 80032dc:	4b17      	ldr	r3, [pc, #92]	; (800333c <sniprintf+0x64>)
 80032de:	1e0c      	subs	r4, r1, #0
 80032e0:	b09d      	sub	sp, #116	; 0x74
 80032e2:	681d      	ldr	r5, [r3, #0]
 80032e4:	da08      	bge.n	80032f8 <sniprintf+0x20>
 80032e6:	238b      	movs	r3, #139	; 0x8b
 80032e8:	602b      	str	r3, [r5, #0]
 80032ea:	f04f 30ff 	mov.w	r0, #4294967295
 80032ee:	b01d      	add	sp, #116	; 0x74
 80032f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80032f4:	b002      	add	sp, #8
 80032f6:	4770      	bx	lr
 80032f8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80032fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003300:	bf14      	ite	ne
 8003302:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003306:	4623      	moveq	r3, r4
 8003308:	9304      	str	r3, [sp, #16]
 800330a:	9307      	str	r3, [sp, #28]
 800330c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003310:	9002      	str	r0, [sp, #8]
 8003312:	9006      	str	r0, [sp, #24]
 8003314:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003318:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800331a:	ab21      	add	r3, sp, #132	; 0x84
 800331c:	a902      	add	r1, sp, #8
 800331e:	4628      	mov	r0, r5
 8003320:	9301      	str	r3, [sp, #4]
 8003322:	f001 f9af 	bl	8004684 <_svfiprintf_r>
 8003326:	1c43      	adds	r3, r0, #1
 8003328:	bfbc      	itt	lt
 800332a:	238b      	movlt	r3, #139	; 0x8b
 800332c:	602b      	strlt	r3, [r5, #0]
 800332e:	2c00      	cmp	r4, #0
 8003330:	d0dd      	beq.n	80032ee <sniprintf+0x16>
 8003332:	9b02      	ldr	r3, [sp, #8]
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
 8003338:	e7d9      	b.n	80032ee <sniprintf+0x16>
 800333a:	bf00      	nop
 800333c:	20000004 	.word	0x20000004

08003340 <quorem>:
 8003340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003344:	6903      	ldr	r3, [r0, #16]
 8003346:	690c      	ldr	r4, [r1, #16]
 8003348:	42a3      	cmp	r3, r4
 800334a:	4680      	mov	r8, r0
 800334c:	f2c0 8082 	blt.w	8003454 <quorem+0x114>
 8003350:	3c01      	subs	r4, #1
 8003352:	f101 0714 	add.w	r7, r1, #20
 8003356:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800335a:	f100 0614 	add.w	r6, r0, #20
 800335e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003362:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003366:	eb06 030c 	add.w	r3, r6, ip
 800336a:	3501      	adds	r5, #1
 800336c:	eb07 090c 	add.w	r9, r7, ip
 8003370:	9301      	str	r3, [sp, #4]
 8003372:	fbb0 f5f5 	udiv	r5, r0, r5
 8003376:	b395      	cbz	r5, 80033de <quorem+0x9e>
 8003378:	f04f 0a00 	mov.w	sl, #0
 800337c:	4638      	mov	r0, r7
 800337e:	46b6      	mov	lr, r6
 8003380:	46d3      	mov	fp, sl
 8003382:	f850 2b04 	ldr.w	r2, [r0], #4
 8003386:	b293      	uxth	r3, r2
 8003388:	fb05 a303 	mla	r3, r5, r3, sl
 800338c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003390:	b29b      	uxth	r3, r3
 8003392:	ebab 0303 	sub.w	r3, fp, r3
 8003396:	0c12      	lsrs	r2, r2, #16
 8003398:	f8de b000 	ldr.w	fp, [lr]
 800339c:	fb05 a202 	mla	r2, r5, r2, sl
 80033a0:	fa13 f38b 	uxtah	r3, r3, fp
 80033a4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80033a8:	fa1f fb82 	uxth.w	fp, r2
 80033ac:	f8de 2000 	ldr.w	r2, [lr]
 80033b0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80033b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80033be:	4581      	cmp	r9, r0
 80033c0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80033c4:	f84e 3b04 	str.w	r3, [lr], #4
 80033c8:	d2db      	bcs.n	8003382 <quorem+0x42>
 80033ca:	f856 300c 	ldr.w	r3, [r6, ip]
 80033ce:	b933      	cbnz	r3, 80033de <quorem+0x9e>
 80033d0:	9b01      	ldr	r3, [sp, #4]
 80033d2:	3b04      	subs	r3, #4
 80033d4:	429e      	cmp	r6, r3
 80033d6:	461a      	mov	r2, r3
 80033d8:	d330      	bcc.n	800343c <quorem+0xfc>
 80033da:	f8c8 4010 	str.w	r4, [r8, #16]
 80033de:	4640      	mov	r0, r8
 80033e0:	f001 f822 	bl	8004428 <__mcmp>
 80033e4:	2800      	cmp	r0, #0
 80033e6:	db25      	blt.n	8003434 <quorem+0xf4>
 80033e8:	3501      	adds	r5, #1
 80033ea:	4630      	mov	r0, r6
 80033ec:	f04f 0c00 	mov.w	ip, #0
 80033f0:	f857 2b04 	ldr.w	r2, [r7], #4
 80033f4:	f8d0 e000 	ldr.w	lr, [r0]
 80033f8:	b293      	uxth	r3, r2
 80033fa:	ebac 0303 	sub.w	r3, ip, r3
 80033fe:	0c12      	lsrs	r2, r2, #16
 8003400:	fa13 f38e 	uxtah	r3, r3, lr
 8003404:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003408:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800340c:	b29b      	uxth	r3, r3
 800340e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003412:	45b9      	cmp	r9, r7
 8003414:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003418:	f840 3b04 	str.w	r3, [r0], #4
 800341c:	d2e8      	bcs.n	80033f0 <quorem+0xb0>
 800341e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003422:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003426:	b92a      	cbnz	r2, 8003434 <quorem+0xf4>
 8003428:	3b04      	subs	r3, #4
 800342a:	429e      	cmp	r6, r3
 800342c:	461a      	mov	r2, r3
 800342e:	d30b      	bcc.n	8003448 <quorem+0x108>
 8003430:	f8c8 4010 	str.w	r4, [r8, #16]
 8003434:	4628      	mov	r0, r5
 8003436:	b003      	add	sp, #12
 8003438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800343c:	6812      	ldr	r2, [r2, #0]
 800343e:	3b04      	subs	r3, #4
 8003440:	2a00      	cmp	r2, #0
 8003442:	d1ca      	bne.n	80033da <quorem+0x9a>
 8003444:	3c01      	subs	r4, #1
 8003446:	e7c5      	b.n	80033d4 <quorem+0x94>
 8003448:	6812      	ldr	r2, [r2, #0]
 800344a:	3b04      	subs	r3, #4
 800344c:	2a00      	cmp	r2, #0
 800344e:	d1ef      	bne.n	8003430 <quorem+0xf0>
 8003450:	3c01      	subs	r4, #1
 8003452:	e7ea      	b.n	800342a <quorem+0xea>
 8003454:	2000      	movs	r0, #0
 8003456:	e7ee      	b.n	8003436 <quorem+0xf6>

08003458 <_dtoa_r>:
 8003458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800345c:	ec57 6b10 	vmov	r6, r7, d0
 8003460:	b097      	sub	sp, #92	; 0x5c
 8003462:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003464:	9106      	str	r1, [sp, #24]
 8003466:	4604      	mov	r4, r0
 8003468:	920b      	str	r2, [sp, #44]	; 0x2c
 800346a:	9312      	str	r3, [sp, #72]	; 0x48
 800346c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003470:	e9cd 6700 	strd	r6, r7, [sp]
 8003474:	b93d      	cbnz	r5, 8003486 <_dtoa_r+0x2e>
 8003476:	2010      	movs	r0, #16
 8003478:	f7ff fa0a 	bl	8002890 <malloc>
 800347c:	6260      	str	r0, [r4, #36]	; 0x24
 800347e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003482:	6005      	str	r5, [r0, #0]
 8003484:	60c5      	str	r5, [r0, #12]
 8003486:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003488:	6819      	ldr	r1, [r3, #0]
 800348a:	b151      	cbz	r1, 80034a2 <_dtoa_r+0x4a>
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	604a      	str	r2, [r1, #4]
 8003490:	2301      	movs	r3, #1
 8003492:	4093      	lsls	r3, r2
 8003494:	608b      	str	r3, [r1, #8]
 8003496:	4620      	mov	r0, r4
 8003498:	f000 fde5 	bl	8004066 <_Bfree>
 800349c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	1e3b      	subs	r3, r7, #0
 80034a4:	bfbb      	ittet	lt
 80034a6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80034aa:	9301      	strlt	r3, [sp, #4]
 80034ac:	2300      	movge	r3, #0
 80034ae:	2201      	movlt	r2, #1
 80034b0:	bfac      	ite	ge
 80034b2:	f8c8 3000 	strge.w	r3, [r8]
 80034b6:	f8c8 2000 	strlt.w	r2, [r8]
 80034ba:	4baf      	ldr	r3, [pc, #700]	; (8003778 <_dtoa_r+0x320>)
 80034bc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80034c0:	ea33 0308 	bics.w	r3, r3, r8
 80034c4:	d114      	bne.n	80034f0 <_dtoa_r+0x98>
 80034c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80034c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	9b00      	ldr	r3, [sp, #0]
 80034d0:	b923      	cbnz	r3, 80034dc <_dtoa_r+0x84>
 80034d2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80034d6:	2800      	cmp	r0, #0
 80034d8:	f000 8542 	beq.w	8003f60 <_dtoa_r+0xb08>
 80034dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80034de:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800378c <_dtoa_r+0x334>
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 8544 	beq.w	8003f70 <_dtoa_r+0xb18>
 80034e8:	f10b 0303 	add.w	r3, fp, #3
 80034ec:	f000 bd3e 	b.w	8003f6c <_dtoa_r+0xb14>
 80034f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80034f4:	2200      	movs	r2, #0
 80034f6:	2300      	movs	r3, #0
 80034f8:	4630      	mov	r0, r6
 80034fa:	4639      	mov	r1, r7
 80034fc:	f7fd fae4 	bl	8000ac8 <__aeabi_dcmpeq>
 8003500:	4681      	mov	r9, r0
 8003502:	b168      	cbz	r0, 8003520 <_dtoa_r+0xc8>
 8003504:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003506:	2301      	movs	r3, #1
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 8524 	beq.w	8003f5a <_dtoa_r+0xb02>
 8003512:	4b9a      	ldr	r3, [pc, #616]	; (800377c <_dtoa_r+0x324>)
 8003514:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003516:	f103 3bff 	add.w	fp, r3, #4294967295
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	f000 bd28 	b.w	8003f70 <_dtoa_r+0xb18>
 8003520:	aa14      	add	r2, sp, #80	; 0x50
 8003522:	a915      	add	r1, sp, #84	; 0x54
 8003524:	ec47 6b10 	vmov	d0, r6, r7
 8003528:	4620      	mov	r0, r4
 800352a:	f000 fff4 	bl	8004516 <__d2b>
 800352e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003532:	9004      	str	r0, [sp, #16]
 8003534:	2d00      	cmp	r5, #0
 8003536:	d07c      	beq.n	8003632 <_dtoa_r+0x1da>
 8003538:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800353c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8003540:	46b2      	mov	sl, r6
 8003542:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8003546:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800354a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800354e:	2200      	movs	r2, #0
 8003550:	4b8b      	ldr	r3, [pc, #556]	; (8003780 <_dtoa_r+0x328>)
 8003552:	4650      	mov	r0, sl
 8003554:	4659      	mov	r1, fp
 8003556:	f7fc fe97 	bl	8000288 <__aeabi_dsub>
 800355a:	a381      	add	r3, pc, #516	; (adr r3, 8003760 <_dtoa_r+0x308>)
 800355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003560:	f7fd f84a 	bl	80005f8 <__aeabi_dmul>
 8003564:	a380      	add	r3, pc, #512	; (adr r3, 8003768 <_dtoa_r+0x310>)
 8003566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356a:	f7fc fe8f 	bl	800028c <__adddf3>
 800356e:	4606      	mov	r6, r0
 8003570:	4628      	mov	r0, r5
 8003572:	460f      	mov	r7, r1
 8003574:	f7fc ffd6 	bl	8000524 <__aeabi_i2d>
 8003578:	a37d      	add	r3, pc, #500	; (adr r3, 8003770 <_dtoa_r+0x318>)
 800357a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357e:	f7fd f83b 	bl	80005f8 <__aeabi_dmul>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4630      	mov	r0, r6
 8003588:	4639      	mov	r1, r7
 800358a:	f7fc fe7f 	bl	800028c <__adddf3>
 800358e:	4606      	mov	r6, r0
 8003590:	460f      	mov	r7, r1
 8003592:	f7fd fae1 	bl	8000b58 <__aeabi_d2iz>
 8003596:	2200      	movs	r2, #0
 8003598:	4682      	mov	sl, r0
 800359a:	2300      	movs	r3, #0
 800359c:	4630      	mov	r0, r6
 800359e:	4639      	mov	r1, r7
 80035a0:	f7fd fa9c 	bl	8000adc <__aeabi_dcmplt>
 80035a4:	b148      	cbz	r0, 80035ba <_dtoa_r+0x162>
 80035a6:	4650      	mov	r0, sl
 80035a8:	f7fc ffbc 	bl	8000524 <__aeabi_i2d>
 80035ac:	4632      	mov	r2, r6
 80035ae:	463b      	mov	r3, r7
 80035b0:	f7fd fa8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80035b4:	b908      	cbnz	r0, 80035ba <_dtoa_r+0x162>
 80035b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80035ba:	f1ba 0f16 	cmp.w	sl, #22
 80035be:	d859      	bhi.n	8003674 <_dtoa_r+0x21c>
 80035c0:	4970      	ldr	r1, [pc, #448]	; (8003784 <_dtoa_r+0x32c>)
 80035c2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80035c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80035ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035ce:	f7fd faa3 	bl	8000b18 <__aeabi_dcmpgt>
 80035d2:	2800      	cmp	r0, #0
 80035d4:	d050      	beq.n	8003678 <_dtoa_r+0x220>
 80035d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80035da:	2300      	movs	r3, #0
 80035dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80035de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80035e0:	1b5d      	subs	r5, r3, r5
 80035e2:	f1b5 0801 	subs.w	r8, r5, #1
 80035e6:	bf49      	itett	mi
 80035e8:	f1c5 0301 	rsbmi	r3, r5, #1
 80035ec:	2300      	movpl	r3, #0
 80035ee:	9305      	strmi	r3, [sp, #20]
 80035f0:	f04f 0800 	movmi.w	r8, #0
 80035f4:	bf58      	it	pl
 80035f6:	9305      	strpl	r3, [sp, #20]
 80035f8:	f1ba 0f00 	cmp.w	sl, #0
 80035fc:	db3e      	blt.n	800367c <_dtoa_r+0x224>
 80035fe:	2300      	movs	r3, #0
 8003600:	44d0      	add	r8, sl
 8003602:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003606:	9307      	str	r3, [sp, #28]
 8003608:	9b06      	ldr	r3, [sp, #24]
 800360a:	2b09      	cmp	r3, #9
 800360c:	f200 8090 	bhi.w	8003730 <_dtoa_r+0x2d8>
 8003610:	2b05      	cmp	r3, #5
 8003612:	bfc4      	itt	gt
 8003614:	3b04      	subgt	r3, #4
 8003616:	9306      	strgt	r3, [sp, #24]
 8003618:	9b06      	ldr	r3, [sp, #24]
 800361a:	f1a3 0302 	sub.w	r3, r3, #2
 800361e:	bfcc      	ite	gt
 8003620:	2500      	movgt	r5, #0
 8003622:	2501      	movle	r5, #1
 8003624:	2b03      	cmp	r3, #3
 8003626:	f200 808f 	bhi.w	8003748 <_dtoa_r+0x2f0>
 800362a:	e8df f003 	tbb	[pc, r3]
 800362e:	7f7d      	.short	0x7f7d
 8003630:	7131      	.short	0x7131
 8003632:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8003636:	441d      	add	r5, r3
 8003638:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800363c:	2820      	cmp	r0, #32
 800363e:	dd13      	ble.n	8003668 <_dtoa_r+0x210>
 8003640:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8003644:	9b00      	ldr	r3, [sp, #0]
 8003646:	fa08 f800 	lsl.w	r8, r8, r0
 800364a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800364e:	fa23 f000 	lsr.w	r0, r3, r0
 8003652:	ea48 0000 	orr.w	r0, r8, r0
 8003656:	f7fc ff55 	bl	8000504 <__aeabi_ui2d>
 800365a:	2301      	movs	r3, #1
 800365c:	4682      	mov	sl, r0
 800365e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8003662:	3d01      	subs	r5, #1
 8003664:	9313      	str	r3, [sp, #76]	; 0x4c
 8003666:	e772      	b.n	800354e <_dtoa_r+0xf6>
 8003668:	9b00      	ldr	r3, [sp, #0]
 800366a:	f1c0 0020 	rsb	r0, r0, #32
 800366e:	fa03 f000 	lsl.w	r0, r3, r0
 8003672:	e7f0      	b.n	8003656 <_dtoa_r+0x1fe>
 8003674:	2301      	movs	r3, #1
 8003676:	e7b1      	b.n	80035dc <_dtoa_r+0x184>
 8003678:	900f      	str	r0, [sp, #60]	; 0x3c
 800367a:	e7b0      	b.n	80035de <_dtoa_r+0x186>
 800367c:	9b05      	ldr	r3, [sp, #20]
 800367e:	eba3 030a 	sub.w	r3, r3, sl
 8003682:	9305      	str	r3, [sp, #20]
 8003684:	f1ca 0300 	rsb	r3, sl, #0
 8003688:	9307      	str	r3, [sp, #28]
 800368a:	2300      	movs	r3, #0
 800368c:	930e      	str	r3, [sp, #56]	; 0x38
 800368e:	e7bb      	b.n	8003608 <_dtoa_r+0x1b0>
 8003690:	2301      	movs	r3, #1
 8003692:	930a      	str	r3, [sp, #40]	; 0x28
 8003694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003696:	2b00      	cmp	r3, #0
 8003698:	dd59      	ble.n	800374e <_dtoa_r+0x2f6>
 800369a:	9302      	str	r3, [sp, #8]
 800369c:	4699      	mov	r9, r3
 800369e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80036a0:	2200      	movs	r2, #0
 80036a2:	6072      	str	r2, [r6, #4]
 80036a4:	2204      	movs	r2, #4
 80036a6:	f102 0014 	add.w	r0, r2, #20
 80036aa:	4298      	cmp	r0, r3
 80036ac:	6871      	ldr	r1, [r6, #4]
 80036ae:	d953      	bls.n	8003758 <_dtoa_r+0x300>
 80036b0:	4620      	mov	r0, r4
 80036b2:	f000 fca4 	bl	8003ffe <_Balloc>
 80036b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036b8:	6030      	str	r0, [r6, #0]
 80036ba:	f1b9 0f0e 	cmp.w	r9, #14
 80036be:	f8d3 b000 	ldr.w	fp, [r3]
 80036c2:	f200 80e6 	bhi.w	8003892 <_dtoa_r+0x43a>
 80036c6:	2d00      	cmp	r5, #0
 80036c8:	f000 80e3 	beq.w	8003892 <_dtoa_r+0x43a>
 80036cc:	ed9d 7b00 	vldr	d7, [sp]
 80036d0:	f1ba 0f00 	cmp.w	sl, #0
 80036d4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80036d8:	dd74      	ble.n	80037c4 <_dtoa_r+0x36c>
 80036da:	4a2a      	ldr	r2, [pc, #168]	; (8003784 <_dtoa_r+0x32c>)
 80036dc:	f00a 030f 	and.w	r3, sl, #15
 80036e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80036e4:	ed93 7b00 	vldr	d7, [r3]
 80036e8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80036ec:	06f0      	lsls	r0, r6, #27
 80036ee:	ed8d 7b08 	vstr	d7, [sp, #32]
 80036f2:	d565      	bpl.n	80037c0 <_dtoa_r+0x368>
 80036f4:	4b24      	ldr	r3, [pc, #144]	; (8003788 <_dtoa_r+0x330>)
 80036f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80036fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80036fe:	f7fd f8a5 	bl	800084c <__aeabi_ddiv>
 8003702:	e9cd 0100 	strd	r0, r1, [sp]
 8003706:	f006 060f 	and.w	r6, r6, #15
 800370a:	2503      	movs	r5, #3
 800370c:	4f1e      	ldr	r7, [pc, #120]	; (8003788 <_dtoa_r+0x330>)
 800370e:	e04c      	b.n	80037aa <_dtoa_r+0x352>
 8003710:	2301      	movs	r3, #1
 8003712:	930a      	str	r3, [sp, #40]	; 0x28
 8003714:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003716:	4453      	add	r3, sl
 8003718:	f103 0901 	add.w	r9, r3, #1
 800371c:	9302      	str	r3, [sp, #8]
 800371e:	464b      	mov	r3, r9
 8003720:	2b01      	cmp	r3, #1
 8003722:	bfb8      	it	lt
 8003724:	2301      	movlt	r3, #1
 8003726:	e7ba      	b.n	800369e <_dtoa_r+0x246>
 8003728:	2300      	movs	r3, #0
 800372a:	e7b2      	b.n	8003692 <_dtoa_r+0x23a>
 800372c:	2300      	movs	r3, #0
 800372e:	e7f0      	b.n	8003712 <_dtoa_r+0x2ba>
 8003730:	2501      	movs	r5, #1
 8003732:	2300      	movs	r3, #0
 8003734:	9306      	str	r3, [sp, #24]
 8003736:	950a      	str	r5, [sp, #40]	; 0x28
 8003738:	f04f 33ff 	mov.w	r3, #4294967295
 800373c:	9302      	str	r3, [sp, #8]
 800373e:	4699      	mov	r9, r3
 8003740:	2200      	movs	r2, #0
 8003742:	2312      	movs	r3, #18
 8003744:	920b      	str	r2, [sp, #44]	; 0x2c
 8003746:	e7aa      	b.n	800369e <_dtoa_r+0x246>
 8003748:	2301      	movs	r3, #1
 800374a:	930a      	str	r3, [sp, #40]	; 0x28
 800374c:	e7f4      	b.n	8003738 <_dtoa_r+0x2e0>
 800374e:	2301      	movs	r3, #1
 8003750:	9302      	str	r3, [sp, #8]
 8003752:	4699      	mov	r9, r3
 8003754:	461a      	mov	r2, r3
 8003756:	e7f5      	b.n	8003744 <_dtoa_r+0x2ec>
 8003758:	3101      	adds	r1, #1
 800375a:	6071      	str	r1, [r6, #4]
 800375c:	0052      	lsls	r2, r2, #1
 800375e:	e7a2      	b.n	80036a6 <_dtoa_r+0x24e>
 8003760:	636f4361 	.word	0x636f4361
 8003764:	3fd287a7 	.word	0x3fd287a7
 8003768:	8b60c8b3 	.word	0x8b60c8b3
 800376c:	3fc68a28 	.word	0x3fc68a28
 8003770:	509f79fb 	.word	0x509f79fb
 8003774:	3fd34413 	.word	0x3fd34413
 8003778:	7ff00000 	.word	0x7ff00000
 800377c:	08004a38 	.word	0x08004a38
 8003780:	3ff80000 	.word	0x3ff80000
 8003784:	08004a90 	.word	0x08004a90
 8003788:	08004a68 	.word	0x08004a68
 800378c:	08004a64 	.word	0x08004a64
 8003790:	07f1      	lsls	r1, r6, #31
 8003792:	d508      	bpl.n	80037a6 <_dtoa_r+0x34e>
 8003794:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8003798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800379c:	f7fc ff2c 	bl	80005f8 <__aeabi_dmul>
 80037a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80037a4:	3501      	adds	r5, #1
 80037a6:	1076      	asrs	r6, r6, #1
 80037a8:	3708      	adds	r7, #8
 80037aa:	2e00      	cmp	r6, #0
 80037ac:	d1f0      	bne.n	8003790 <_dtoa_r+0x338>
 80037ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80037b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80037b6:	f7fd f849 	bl	800084c <__aeabi_ddiv>
 80037ba:	e9cd 0100 	strd	r0, r1, [sp]
 80037be:	e01a      	b.n	80037f6 <_dtoa_r+0x39e>
 80037c0:	2502      	movs	r5, #2
 80037c2:	e7a3      	b.n	800370c <_dtoa_r+0x2b4>
 80037c4:	f000 80a0 	beq.w	8003908 <_dtoa_r+0x4b0>
 80037c8:	f1ca 0600 	rsb	r6, sl, #0
 80037cc:	4b9f      	ldr	r3, [pc, #636]	; (8003a4c <_dtoa_r+0x5f4>)
 80037ce:	4fa0      	ldr	r7, [pc, #640]	; (8003a50 <_dtoa_r+0x5f8>)
 80037d0:	f006 020f 	and.w	r2, r6, #15
 80037d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80037d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80037e0:	f7fc ff0a 	bl	80005f8 <__aeabi_dmul>
 80037e4:	e9cd 0100 	strd	r0, r1, [sp]
 80037e8:	1136      	asrs	r6, r6, #4
 80037ea:	2300      	movs	r3, #0
 80037ec:	2502      	movs	r5, #2
 80037ee:	2e00      	cmp	r6, #0
 80037f0:	d17f      	bne.n	80038f2 <_dtoa_r+0x49a>
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1e1      	bne.n	80037ba <_dtoa_r+0x362>
 80037f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 8087 	beq.w	800390c <_dtoa_r+0x4b4>
 80037fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003802:	2200      	movs	r2, #0
 8003804:	4b93      	ldr	r3, [pc, #588]	; (8003a54 <_dtoa_r+0x5fc>)
 8003806:	4630      	mov	r0, r6
 8003808:	4639      	mov	r1, r7
 800380a:	f7fd f967 	bl	8000adc <__aeabi_dcmplt>
 800380e:	2800      	cmp	r0, #0
 8003810:	d07c      	beq.n	800390c <_dtoa_r+0x4b4>
 8003812:	f1b9 0f00 	cmp.w	r9, #0
 8003816:	d079      	beq.n	800390c <_dtoa_r+0x4b4>
 8003818:	9b02      	ldr	r3, [sp, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	dd35      	ble.n	800388a <_dtoa_r+0x432>
 800381e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003822:	9308      	str	r3, [sp, #32]
 8003824:	4639      	mov	r1, r7
 8003826:	2200      	movs	r2, #0
 8003828:	4b8b      	ldr	r3, [pc, #556]	; (8003a58 <_dtoa_r+0x600>)
 800382a:	4630      	mov	r0, r6
 800382c:	f7fc fee4 	bl	80005f8 <__aeabi_dmul>
 8003830:	e9cd 0100 	strd	r0, r1, [sp]
 8003834:	9f02      	ldr	r7, [sp, #8]
 8003836:	3501      	adds	r5, #1
 8003838:	4628      	mov	r0, r5
 800383a:	f7fc fe73 	bl	8000524 <__aeabi_i2d>
 800383e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003842:	f7fc fed9 	bl	80005f8 <__aeabi_dmul>
 8003846:	2200      	movs	r2, #0
 8003848:	4b84      	ldr	r3, [pc, #528]	; (8003a5c <_dtoa_r+0x604>)
 800384a:	f7fc fd1f 	bl	800028c <__adddf3>
 800384e:	4605      	mov	r5, r0
 8003850:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003854:	2f00      	cmp	r7, #0
 8003856:	d15d      	bne.n	8003914 <_dtoa_r+0x4bc>
 8003858:	2200      	movs	r2, #0
 800385a:	4b81      	ldr	r3, [pc, #516]	; (8003a60 <_dtoa_r+0x608>)
 800385c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003860:	f7fc fd12 	bl	8000288 <__aeabi_dsub>
 8003864:	462a      	mov	r2, r5
 8003866:	4633      	mov	r3, r6
 8003868:	e9cd 0100 	strd	r0, r1, [sp]
 800386c:	f7fd f954 	bl	8000b18 <__aeabi_dcmpgt>
 8003870:	2800      	cmp	r0, #0
 8003872:	f040 8288 	bne.w	8003d86 <_dtoa_r+0x92e>
 8003876:	462a      	mov	r2, r5
 8003878:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800387c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003880:	f7fd f92c 	bl	8000adc <__aeabi_dcmplt>
 8003884:	2800      	cmp	r0, #0
 8003886:	f040 827c 	bne.w	8003d82 <_dtoa_r+0x92a>
 800388a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800388e:	e9cd 2300 	strd	r2, r3, [sp]
 8003892:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003894:	2b00      	cmp	r3, #0
 8003896:	f2c0 8150 	blt.w	8003b3a <_dtoa_r+0x6e2>
 800389a:	f1ba 0f0e 	cmp.w	sl, #14
 800389e:	f300 814c 	bgt.w	8003b3a <_dtoa_r+0x6e2>
 80038a2:	4b6a      	ldr	r3, [pc, #424]	; (8003a4c <_dtoa_r+0x5f4>)
 80038a4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80038a8:	ed93 7b00 	vldr	d7, [r3]
 80038ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80038b4:	f280 80d8 	bge.w	8003a68 <_dtoa_r+0x610>
 80038b8:	f1b9 0f00 	cmp.w	r9, #0
 80038bc:	f300 80d4 	bgt.w	8003a68 <_dtoa_r+0x610>
 80038c0:	f040 825e 	bne.w	8003d80 <_dtoa_r+0x928>
 80038c4:	2200      	movs	r2, #0
 80038c6:	4b66      	ldr	r3, [pc, #408]	; (8003a60 <_dtoa_r+0x608>)
 80038c8:	ec51 0b17 	vmov	r0, r1, d7
 80038cc:	f7fc fe94 	bl	80005f8 <__aeabi_dmul>
 80038d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80038d4:	f7fd f916 	bl	8000b04 <__aeabi_dcmpge>
 80038d8:	464f      	mov	r7, r9
 80038da:	464e      	mov	r6, r9
 80038dc:	2800      	cmp	r0, #0
 80038de:	f040 8234 	bne.w	8003d4a <_dtoa_r+0x8f2>
 80038e2:	2331      	movs	r3, #49	; 0x31
 80038e4:	f10b 0501 	add.w	r5, fp, #1
 80038e8:	f88b 3000 	strb.w	r3, [fp]
 80038ec:	f10a 0a01 	add.w	sl, sl, #1
 80038f0:	e22f      	b.n	8003d52 <_dtoa_r+0x8fa>
 80038f2:	07f2      	lsls	r2, r6, #31
 80038f4:	d505      	bpl.n	8003902 <_dtoa_r+0x4aa>
 80038f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038fa:	f7fc fe7d 	bl	80005f8 <__aeabi_dmul>
 80038fe:	3501      	adds	r5, #1
 8003900:	2301      	movs	r3, #1
 8003902:	1076      	asrs	r6, r6, #1
 8003904:	3708      	adds	r7, #8
 8003906:	e772      	b.n	80037ee <_dtoa_r+0x396>
 8003908:	2502      	movs	r5, #2
 800390a:	e774      	b.n	80037f6 <_dtoa_r+0x39e>
 800390c:	f8cd a020 	str.w	sl, [sp, #32]
 8003910:	464f      	mov	r7, r9
 8003912:	e791      	b.n	8003838 <_dtoa_r+0x3e0>
 8003914:	4b4d      	ldr	r3, [pc, #308]	; (8003a4c <_dtoa_r+0x5f4>)
 8003916:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800391a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800391e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003920:	2b00      	cmp	r3, #0
 8003922:	d047      	beq.n	80039b4 <_dtoa_r+0x55c>
 8003924:	4602      	mov	r2, r0
 8003926:	460b      	mov	r3, r1
 8003928:	2000      	movs	r0, #0
 800392a:	494e      	ldr	r1, [pc, #312]	; (8003a64 <_dtoa_r+0x60c>)
 800392c:	f7fc ff8e 	bl	800084c <__aeabi_ddiv>
 8003930:	462a      	mov	r2, r5
 8003932:	4633      	mov	r3, r6
 8003934:	f7fc fca8 	bl	8000288 <__aeabi_dsub>
 8003938:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800393c:	465d      	mov	r5, fp
 800393e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003942:	f7fd f909 	bl	8000b58 <__aeabi_d2iz>
 8003946:	4606      	mov	r6, r0
 8003948:	f7fc fdec 	bl	8000524 <__aeabi_i2d>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003954:	f7fc fc98 	bl	8000288 <__aeabi_dsub>
 8003958:	3630      	adds	r6, #48	; 0x30
 800395a:	f805 6b01 	strb.w	r6, [r5], #1
 800395e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003962:	e9cd 0100 	strd	r0, r1, [sp]
 8003966:	f7fd f8b9 	bl	8000adc <__aeabi_dcmplt>
 800396a:	2800      	cmp	r0, #0
 800396c:	d163      	bne.n	8003a36 <_dtoa_r+0x5de>
 800396e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003972:	2000      	movs	r0, #0
 8003974:	4937      	ldr	r1, [pc, #220]	; (8003a54 <_dtoa_r+0x5fc>)
 8003976:	f7fc fc87 	bl	8000288 <__aeabi_dsub>
 800397a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800397e:	f7fd f8ad 	bl	8000adc <__aeabi_dcmplt>
 8003982:	2800      	cmp	r0, #0
 8003984:	f040 80b7 	bne.w	8003af6 <_dtoa_r+0x69e>
 8003988:	eba5 030b 	sub.w	r3, r5, fp
 800398c:	429f      	cmp	r7, r3
 800398e:	f77f af7c 	ble.w	800388a <_dtoa_r+0x432>
 8003992:	2200      	movs	r2, #0
 8003994:	4b30      	ldr	r3, [pc, #192]	; (8003a58 <_dtoa_r+0x600>)
 8003996:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800399a:	f7fc fe2d 	bl	80005f8 <__aeabi_dmul>
 800399e:	2200      	movs	r2, #0
 80039a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80039a4:	4b2c      	ldr	r3, [pc, #176]	; (8003a58 <_dtoa_r+0x600>)
 80039a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039aa:	f7fc fe25 	bl	80005f8 <__aeabi_dmul>
 80039ae:	e9cd 0100 	strd	r0, r1, [sp]
 80039b2:	e7c4      	b.n	800393e <_dtoa_r+0x4e6>
 80039b4:	462a      	mov	r2, r5
 80039b6:	4633      	mov	r3, r6
 80039b8:	f7fc fe1e 	bl	80005f8 <__aeabi_dmul>
 80039bc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80039c0:	eb0b 0507 	add.w	r5, fp, r7
 80039c4:	465e      	mov	r6, fp
 80039c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039ca:	f7fd f8c5 	bl	8000b58 <__aeabi_d2iz>
 80039ce:	4607      	mov	r7, r0
 80039d0:	f7fc fda8 	bl	8000524 <__aeabi_i2d>
 80039d4:	3730      	adds	r7, #48	; 0x30
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80039de:	f7fc fc53 	bl	8000288 <__aeabi_dsub>
 80039e2:	f806 7b01 	strb.w	r7, [r6], #1
 80039e6:	42ae      	cmp	r6, r5
 80039e8:	e9cd 0100 	strd	r0, r1, [sp]
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	d126      	bne.n	8003a40 <_dtoa_r+0x5e8>
 80039f2:	4b1c      	ldr	r3, [pc, #112]	; (8003a64 <_dtoa_r+0x60c>)
 80039f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80039f8:	f7fc fc48 	bl	800028c <__adddf3>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a04:	f7fd f888 	bl	8000b18 <__aeabi_dcmpgt>
 8003a08:	2800      	cmp	r0, #0
 8003a0a:	d174      	bne.n	8003af6 <_dtoa_r+0x69e>
 8003a0c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003a10:	2000      	movs	r0, #0
 8003a12:	4914      	ldr	r1, [pc, #80]	; (8003a64 <_dtoa_r+0x60c>)
 8003a14:	f7fc fc38 	bl	8000288 <__aeabi_dsub>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a20:	f7fd f85c 	bl	8000adc <__aeabi_dcmplt>
 8003a24:	2800      	cmp	r0, #0
 8003a26:	f43f af30 	beq.w	800388a <_dtoa_r+0x432>
 8003a2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003a2e:	2b30      	cmp	r3, #48	; 0x30
 8003a30:	f105 32ff 	add.w	r2, r5, #4294967295
 8003a34:	d002      	beq.n	8003a3c <_dtoa_r+0x5e4>
 8003a36:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003a3a:	e04a      	b.n	8003ad2 <_dtoa_r+0x67a>
 8003a3c:	4615      	mov	r5, r2
 8003a3e:	e7f4      	b.n	8003a2a <_dtoa_r+0x5d2>
 8003a40:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <_dtoa_r+0x600>)
 8003a42:	f7fc fdd9 	bl	80005f8 <__aeabi_dmul>
 8003a46:	e9cd 0100 	strd	r0, r1, [sp]
 8003a4a:	e7bc      	b.n	80039c6 <_dtoa_r+0x56e>
 8003a4c:	08004a90 	.word	0x08004a90
 8003a50:	08004a68 	.word	0x08004a68
 8003a54:	3ff00000 	.word	0x3ff00000
 8003a58:	40240000 	.word	0x40240000
 8003a5c:	401c0000 	.word	0x401c0000
 8003a60:	40140000 	.word	0x40140000
 8003a64:	3fe00000 	.word	0x3fe00000
 8003a68:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003a6c:	465d      	mov	r5, fp
 8003a6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a72:	4630      	mov	r0, r6
 8003a74:	4639      	mov	r1, r7
 8003a76:	f7fc fee9 	bl	800084c <__aeabi_ddiv>
 8003a7a:	f7fd f86d 	bl	8000b58 <__aeabi_d2iz>
 8003a7e:	4680      	mov	r8, r0
 8003a80:	f7fc fd50 	bl	8000524 <__aeabi_i2d>
 8003a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003a88:	f7fc fdb6 	bl	80005f8 <__aeabi_dmul>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	460b      	mov	r3, r1
 8003a90:	4630      	mov	r0, r6
 8003a92:	4639      	mov	r1, r7
 8003a94:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8003a98:	f7fc fbf6 	bl	8000288 <__aeabi_dsub>
 8003a9c:	f805 6b01 	strb.w	r6, [r5], #1
 8003aa0:	eba5 060b 	sub.w	r6, r5, fp
 8003aa4:	45b1      	cmp	r9, r6
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	d139      	bne.n	8003b20 <_dtoa_r+0x6c8>
 8003aac:	f7fc fbee 	bl	800028c <__adddf3>
 8003ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ab4:	4606      	mov	r6, r0
 8003ab6:	460f      	mov	r7, r1
 8003ab8:	f7fd f82e 	bl	8000b18 <__aeabi_dcmpgt>
 8003abc:	b9c8      	cbnz	r0, 8003af2 <_dtoa_r+0x69a>
 8003abe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	4639      	mov	r1, r7
 8003ac6:	f7fc ffff 	bl	8000ac8 <__aeabi_dcmpeq>
 8003aca:	b110      	cbz	r0, 8003ad2 <_dtoa_r+0x67a>
 8003acc:	f018 0f01 	tst.w	r8, #1
 8003ad0:	d10f      	bne.n	8003af2 <_dtoa_r+0x69a>
 8003ad2:	9904      	ldr	r1, [sp, #16]
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	f000 fac6 	bl	8004066 <_Bfree>
 8003ada:	2300      	movs	r3, #0
 8003adc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003ade:	702b      	strb	r3, [r5, #0]
 8003ae0:	f10a 0301 	add.w	r3, sl, #1
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 8241 	beq.w	8003f70 <_dtoa_r+0xb18>
 8003aee:	601d      	str	r5, [r3, #0]
 8003af0:	e23e      	b.n	8003f70 <_dtoa_r+0xb18>
 8003af2:	f8cd a020 	str.w	sl, [sp, #32]
 8003af6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003afa:	2a39      	cmp	r2, #57	; 0x39
 8003afc:	f105 33ff 	add.w	r3, r5, #4294967295
 8003b00:	d108      	bne.n	8003b14 <_dtoa_r+0x6bc>
 8003b02:	459b      	cmp	fp, r3
 8003b04:	d10a      	bne.n	8003b1c <_dtoa_r+0x6c4>
 8003b06:	9b08      	ldr	r3, [sp, #32]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	9308      	str	r3, [sp, #32]
 8003b0c:	2330      	movs	r3, #48	; 0x30
 8003b0e:	f88b 3000 	strb.w	r3, [fp]
 8003b12:	465b      	mov	r3, fp
 8003b14:	781a      	ldrb	r2, [r3, #0]
 8003b16:	3201      	adds	r2, #1
 8003b18:	701a      	strb	r2, [r3, #0]
 8003b1a:	e78c      	b.n	8003a36 <_dtoa_r+0x5de>
 8003b1c:	461d      	mov	r5, r3
 8003b1e:	e7ea      	b.n	8003af6 <_dtoa_r+0x69e>
 8003b20:	2200      	movs	r2, #0
 8003b22:	4b9b      	ldr	r3, [pc, #620]	; (8003d90 <_dtoa_r+0x938>)
 8003b24:	f7fc fd68 	bl	80005f8 <__aeabi_dmul>
 8003b28:	2200      	movs	r2, #0
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	4606      	mov	r6, r0
 8003b2e:	460f      	mov	r7, r1
 8003b30:	f7fc ffca 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b34:	2800      	cmp	r0, #0
 8003b36:	d09a      	beq.n	8003a6e <_dtoa_r+0x616>
 8003b38:	e7cb      	b.n	8003ad2 <_dtoa_r+0x67a>
 8003b3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b3c:	2a00      	cmp	r2, #0
 8003b3e:	f000 808b 	beq.w	8003c58 <_dtoa_r+0x800>
 8003b42:	9a06      	ldr	r2, [sp, #24]
 8003b44:	2a01      	cmp	r2, #1
 8003b46:	dc6e      	bgt.n	8003c26 <_dtoa_r+0x7ce>
 8003b48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003b4a:	2a00      	cmp	r2, #0
 8003b4c:	d067      	beq.n	8003c1e <_dtoa_r+0x7c6>
 8003b4e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003b52:	9f07      	ldr	r7, [sp, #28]
 8003b54:	9d05      	ldr	r5, [sp, #20]
 8003b56:	9a05      	ldr	r2, [sp, #20]
 8003b58:	2101      	movs	r1, #1
 8003b5a:	441a      	add	r2, r3
 8003b5c:	4620      	mov	r0, r4
 8003b5e:	9205      	str	r2, [sp, #20]
 8003b60:	4498      	add	r8, r3
 8003b62:	f000 fb20 	bl	80041a6 <__i2b>
 8003b66:	4606      	mov	r6, r0
 8003b68:	2d00      	cmp	r5, #0
 8003b6a:	dd0c      	ble.n	8003b86 <_dtoa_r+0x72e>
 8003b6c:	f1b8 0f00 	cmp.w	r8, #0
 8003b70:	dd09      	ble.n	8003b86 <_dtoa_r+0x72e>
 8003b72:	4545      	cmp	r5, r8
 8003b74:	9a05      	ldr	r2, [sp, #20]
 8003b76:	462b      	mov	r3, r5
 8003b78:	bfa8      	it	ge
 8003b7a:	4643      	movge	r3, r8
 8003b7c:	1ad2      	subs	r2, r2, r3
 8003b7e:	9205      	str	r2, [sp, #20]
 8003b80:	1aed      	subs	r5, r5, r3
 8003b82:	eba8 0803 	sub.w	r8, r8, r3
 8003b86:	9b07      	ldr	r3, [sp, #28]
 8003b88:	b1eb      	cbz	r3, 8003bc6 <_dtoa_r+0x76e>
 8003b8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d067      	beq.n	8003c60 <_dtoa_r+0x808>
 8003b90:	b18f      	cbz	r7, 8003bb6 <_dtoa_r+0x75e>
 8003b92:	4631      	mov	r1, r6
 8003b94:	463a      	mov	r2, r7
 8003b96:	4620      	mov	r0, r4
 8003b98:	f000 fba4 	bl	80042e4 <__pow5mult>
 8003b9c:	9a04      	ldr	r2, [sp, #16]
 8003b9e:	4601      	mov	r1, r0
 8003ba0:	4606      	mov	r6, r0
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	f000 fb08 	bl	80041b8 <__multiply>
 8003ba8:	9904      	ldr	r1, [sp, #16]
 8003baa:	9008      	str	r0, [sp, #32]
 8003bac:	4620      	mov	r0, r4
 8003bae:	f000 fa5a 	bl	8004066 <_Bfree>
 8003bb2:	9b08      	ldr	r3, [sp, #32]
 8003bb4:	9304      	str	r3, [sp, #16]
 8003bb6:	9b07      	ldr	r3, [sp, #28]
 8003bb8:	1bda      	subs	r2, r3, r7
 8003bba:	d004      	beq.n	8003bc6 <_dtoa_r+0x76e>
 8003bbc:	9904      	ldr	r1, [sp, #16]
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	f000 fb90 	bl	80042e4 <__pow5mult>
 8003bc4:	9004      	str	r0, [sp, #16]
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	4620      	mov	r0, r4
 8003bca:	f000 faec 	bl	80041a6 <__i2b>
 8003bce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bd0:	4607      	mov	r7, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 81d0 	beq.w	8003f78 <_dtoa_r+0xb20>
 8003bd8:	461a      	mov	r2, r3
 8003bda:	4601      	mov	r1, r0
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f000 fb81 	bl	80042e4 <__pow5mult>
 8003be2:	9b06      	ldr	r3, [sp, #24]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	4607      	mov	r7, r0
 8003be8:	dc40      	bgt.n	8003c6c <_dtoa_r+0x814>
 8003bea:	9b00      	ldr	r3, [sp, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d139      	bne.n	8003c64 <_dtoa_r+0x80c>
 8003bf0:	9b01      	ldr	r3, [sp, #4]
 8003bf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d136      	bne.n	8003c68 <_dtoa_r+0x810>
 8003bfa:	9b01      	ldr	r3, [sp, #4]
 8003bfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c00:	0d1b      	lsrs	r3, r3, #20
 8003c02:	051b      	lsls	r3, r3, #20
 8003c04:	b12b      	cbz	r3, 8003c12 <_dtoa_r+0x7ba>
 8003c06:	9b05      	ldr	r3, [sp, #20]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	9305      	str	r3, [sp, #20]
 8003c0c:	f108 0801 	add.w	r8, r8, #1
 8003c10:	2301      	movs	r3, #1
 8003c12:	9307      	str	r3, [sp, #28]
 8003c14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d12a      	bne.n	8003c70 <_dtoa_r+0x818>
 8003c1a:	2001      	movs	r0, #1
 8003c1c:	e030      	b.n	8003c80 <_dtoa_r+0x828>
 8003c1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003c20:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003c24:	e795      	b.n	8003b52 <_dtoa_r+0x6fa>
 8003c26:	9b07      	ldr	r3, [sp, #28]
 8003c28:	f109 37ff 	add.w	r7, r9, #4294967295
 8003c2c:	42bb      	cmp	r3, r7
 8003c2e:	bfbf      	itttt	lt
 8003c30:	9b07      	ldrlt	r3, [sp, #28]
 8003c32:	9707      	strlt	r7, [sp, #28]
 8003c34:	1afa      	sublt	r2, r7, r3
 8003c36:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003c38:	bfbb      	ittet	lt
 8003c3a:	189b      	addlt	r3, r3, r2
 8003c3c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003c3e:	1bdf      	subge	r7, r3, r7
 8003c40:	2700      	movlt	r7, #0
 8003c42:	f1b9 0f00 	cmp.w	r9, #0
 8003c46:	bfb5      	itete	lt
 8003c48:	9b05      	ldrlt	r3, [sp, #20]
 8003c4a:	9d05      	ldrge	r5, [sp, #20]
 8003c4c:	eba3 0509 	sublt.w	r5, r3, r9
 8003c50:	464b      	movge	r3, r9
 8003c52:	bfb8      	it	lt
 8003c54:	2300      	movlt	r3, #0
 8003c56:	e77e      	b.n	8003b56 <_dtoa_r+0x6fe>
 8003c58:	9f07      	ldr	r7, [sp, #28]
 8003c5a:	9d05      	ldr	r5, [sp, #20]
 8003c5c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003c5e:	e783      	b.n	8003b68 <_dtoa_r+0x710>
 8003c60:	9a07      	ldr	r2, [sp, #28]
 8003c62:	e7ab      	b.n	8003bbc <_dtoa_r+0x764>
 8003c64:	2300      	movs	r3, #0
 8003c66:	e7d4      	b.n	8003c12 <_dtoa_r+0x7ba>
 8003c68:	9b00      	ldr	r3, [sp, #0]
 8003c6a:	e7d2      	b.n	8003c12 <_dtoa_r+0x7ba>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	9307      	str	r3, [sp, #28]
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8003c76:	6918      	ldr	r0, [r3, #16]
 8003c78:	f000 fa47 	bl	800410a <__hi0bits>
 8003c7c:	f1c0 0020 	rsb	r0, r0, #32
 8003c80:	4440      	add	r0, r8
 8003c82:	f010 001f 	ands.w	r0, r0, #31
 8003c86:	d047      	beq.n	8003d18 <_dtoa_r+0x8c0>
 8003c88:	f1c0 0320 	rsb	r3, r0, #32
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	dd3b      	ble.n	8003d08 <_dtoa_r+0x8b0>
 8003c90:	9b05      	ldr	r3, [sp, #20]
 8003c92:	f1c0 001c 	rsb	r0, r0, #28
 8003c96:	4403      	add	r3, r0
 8003c98:	9305      	str	r3, [sp, #20]
 8003c9a:	4405      	add	r5, r0
 8003c9c:	4480      	add	r8, r0
 8003c9e:	9b05      	ldr	r3, [sp, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	dd05      	ble.n	8003cb0 <_dtoa_r+0x858>
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	9904      	ldr	r1, [sp, #16]
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f000 fb69 	bl	8004380 <__lshift>
 8003cae:	9004      	str	r0, [sp, #16]
 8003cb0:	f1b8 0f00 	cmp.w	r8, #0
 8003cb4:	dd05      	ble.n	8003cc2 <_dtoa_r+0x86a>
 8003cb6:	4639      	mov	r1, r7
 8003cb8:	4642      	mov	r2, r8
 8003cba:	4620      	mov	r0, r4
 8003cbc:	f000 fb60 	bl	8004380 <__lshift>
 8003cc0:	4607      	mov	r7, r0
 8003cc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003cc4:	b353      	cbz	r3, 8003d1c <_dtoa_r+0x8c4>
 8003cc6:	4639      	mov	r1, r7
 8003cc8:	9804      	ldr	r0, [sp, #16]
 8003cca:	f000 fbad 	bl	8004428 <__mcmp>
 8003cce:	2800      	cmp	r0, #0
 8003cd0:	da24      	bge.n	8003d1c <_dtoa_r+0x8c4>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	220a      	movs	r2, #10
 8003cd6:	9904      	ldr	r1, [sp, #16]
 8003cd8:	4620      	mov	r0, r4
 8003cda:	f000 f9db 	bl	8004094 <__multadd>
 8003cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ce0:	9004      	str	r0, [sp, #16]
 8003ce2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 814d 	beq.w	8003f86 <_dtoa_r+0xb2e>
 8003cec:	2300      	movs	r3, #0
 8003cee:	4631      	mov	r1, r6
 8003cf0:	220a      	movs	r2, #10
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	f000 f9ce 	bl	8004094 <__multadd>
 8003cf8:	9b02      	ldr	r3, [sp, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	4606      	mov	r6, r0
 8003cfe:	dc4f      	bgt.n	8003da0 <_dtoa_r+0x948>
 8003d00:	9b06      	ldr	r3, [sp, #24]
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	dd4c      	ble.n	8003da0 <_dtoa_r+0x948>
 8003d06:	e011      	b.n	8003d2c <_dtoa_r+0x8d4>
 8003d08:	d0c9      	beq.n	8003c9e <_dtoa_r+0x846>
 8003d0a:	9a05      	ldr	r2, [sp, #20]
 8003d0c:	331c      	adds	r3, #28
 8003d0e:	441a      	add	r2, r3
 8003d10:	9205      	str	r2, [sp, #20]
 8003d12:	441d      	add	r5, r3
 8003d14:	4498      	add	r8, r3
 8003d16:	e7c2      	b.n	8003c9e <_dtoa_r+0x846>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	e7f6      	b.n	8003d0a <_dtoa_r+0x8b2>
 8003d1c:	f1b9 0f00 	cmp.w	r9, #0
 8003d20:	dc38      	bgt.n	8003d94 <_dtoa_r+0x93c>
 8003d22:	9b06      	ldr	r3, [sp, #24]
 8003d24:	2b02      	cmp	r3, #2
 8003d26:	dd35      	ble.n	8003d94 <_dtoa_r+0x93c>
 8003d28:	f8cd 9008 	str.w	r9, [sp, #8]
 8003d2c:	9b02      	ldr	r3, [sp, #8]
 8003d2e:	b963      	cbnz	r3, 8003d4a <_dtoa_r+0x8f2>
 8003d30:	4639      	mov	r1, r7
 8003d32:	2205      	movs	r2, #5
 8003d34:	4620      	mov	r0, r4
 8003d36:	f000 f9ad 	bl	8004094 <__multadd>
 8003d3a:	4601      	mov	r1, r0
 8003d3c:	4607      	mov	r7, r0
 8003d3e:	9804      	ldr	r0, [sp, #16]
 8003d40:	f000 fb72 	bl	8004428 <__mcmp>
 8003d44:	2800      	cmp	r0, #0
 8003d46:	f73f adcc 	bgt.w	80038e2 <_dtoa_r+0x48a>
 8003d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d4c:	465d      	mov	r5, fp
 8003d4e:	ea6f 0a03 	mvn.w	sl, r3
 8003d52:	f04f 0900 	mov.w	r9, #0
 8003d56:	4639      	mov	r1, r7
 8003d58:	4620      	mov	r0, r4
 8003d5a:	f000 f984 	bl	8004066 <_Bfree>
 8003d5e:	2e00      	cmp	r6, #0
 8003d60:	f43f aeb7 	beq.w	8003ad2 <_dtoa_r+0x67a>
 8003d64:	f1b9 0f00 	cmp.w	r9, #0
 8003d68:	d005      	beq.n	8003d76 <_dtoa_r+0x91e>
 8003d6a:	45b1      	cmp	r9, r6
 8003d6c:	d003      	beq.n	8003d76 <_dtoa_r+0x91e>
 8003d6e:	4649      	mov	r1, r9
 8003d70:	4620      	mov	r0, r4
 8003d72:	f000 f978 	bl	8004066 <_Bfree>
 8003d76:	4631      	mov	r1, r6
 8003d78:	4620      	mov	r0, r4
 8003d7a:	f000 f974 	bl	8004066 <_Bfree>
 8003d7e:	e6a8      	b.n	8003ad2 <_dtoa_r+0x67a>
 8003d80:	2700      	movs	r7, #0
 8003d82:	463e      	mov	r6, r7
 8003d84:	e7e1      	b.n	8003d4a <_dtoa_r+0x8f2>
 8003d86:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003d8a:	463e      	mov	r6, r7
 8003d8c:	e5a9      	b.n	80038e2 <_dtoa_r+0x48a>
 8003d8e:	bf00      	nop
 8003d90:	40240000 	.word	0x40240000
 8003d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d96:	f8cd 9008 	str.w	r9, [sp, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 80fa 	beq.w	8003f94 <_dtoa_r+0xb3c>
 8003da0:	2d00      	cmp	r5, #0
 8003da2:	dd05      	ble.n	8003db0 <_dtoa_r+0x958>
 8003da4:	4631      	mov	r1, r6
 8003da6:	462a      	mov	r2, r5
 8003da8:	4620      	mov	r0, r4
 8003daa:	f000 fae9 	bl	8004380 <__lshift>
 8003dae:	4606      	mov	r6, r0
 8003db0:	9b07      	ldr	r3, [sp, #28]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d04c      	beq.n	8003e50 <_dtoa_r+0x9f8>
 8003db6:	6871      	ldr	r1, [r6, #4]
 8003db8:	4620      	mov	r0, r4
 8003dba:	f000 f920 	bl	8003ffe <_Balloc>
 8003dbe:	6932      	ldr	r2, [r6, #16]
 8003dc0:	3202      	adds	r2, #2
 8003dc2:	4605      	mov	r5, r0
 8003dc4:	0092      	lsls	r2, r2, #2
 8003dc6:	f106 010c 	add.w	r1, r6, #12
 8003dca:	300c      	adds	r0, #12
 8003dcc:	f000 f90a 	bl	8003fe4 <memcpy>
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	4620      	mov	r0, r4
 8003dd6:	f000 fad3 	bl	8004380 <__lshift>
 8003dda:	9b00      	ldr	r3, [sp, #0]
 8003ddc:	f8cd b014 	str.w	fp, [sp, #20]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	46b1      	mov	r9, r6
 8003de6:	9307      	str	r3, [sp, #28]
 8003de8:	4606      	mov	r6, r0
 8003dea:	4639      	mov	r1, r7
 8003dec:	9804      	ldr	r0, [sp, #16]
 8003dee:	f7ff faa7 	bl	8003340 <quorem>
 8003df2:	4649      	mov	r1, r9
 8003df4:	4605      	mov	r5, r0
 8003df6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003dfa:	9804      	ldr	r0, [sp, #16]
 8003dfc:	f000 fb14 	bl	8004428 <__mcmp>
 8003e00:	4632      	mov	r2, r6
 8003e02:	9000      	str	r0, [sp, #0]
 8003e04:	4639      	mov	r1, r7
 8003e06:	4620      	mov	r0, r4
 8003e08:	f000 fb28 	bl	800445c <__mdiff>
 8003e0c:	68c3      	ldr	r3, [r0, #12]
 8003e0e:	4602      	mov	r2, r0
 8003e10:	bb03      	cbnz	r3, 8003e54 <_dtoa_r+0x9fc>
 8003e12:	4601      	mov	r1, r0
 8003e14:	9008      	str	r0, [sp, #32]
 8003e16:	9804      	ldr	r0, [sp, #16]
 8003e18:	f000 fb06 	bl	8004428 <__mcmp>
 8003e1c:	9a08      	ldr	r2, [sp, #32]
 8003e1e:	4603      	mov	r3, r0
 8003e20:	4611      	mov	r1, r2
 8003e22:	4620      	mov	r0, r4
 8003e24:	9308      	str	r3, [sp, #32]
 8003e26:	f000 f91e 	bl	8004066 <_Bfree>
 8003e2a:	9b08      	ldr	r3, [sp, #32]
 8003e2c:	b9a3      	cbnz	r3, 8003e58 <_dtoa_r+0xa00>
 8003e2e:	9a06      	ldr	r2, [sp, #24]
 8003e30:	b992      	cbnz	r2, 8003e58 <_dtoa_r+0xa00>
 8003e32:	9a07      	ldr	r2, [sp, #28]
 8003e34:	b982      	cbnz	r2, 8003e58 <_dtoa_r+0xa00>
 8003e36:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003e3a:	d029      	beq.n	8003e90 <_dtoa_r+0xa38>
 8003e3c:	9b00      	ldr	r3, [sp, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	dd01      	ble.n	8003e46 <_dtoa_r+0x9ee>
 8003e42:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8003e46:	9b05      	ldr	r3, [sp, #20]
 8003e48:	1c5d      	adds	r5, r3, #1
 8003e4a:	f883 8000 	strb.w	r8, [r3]
 8003e4e:	e782      	b.n	8003d56 <_dtoa_r+0x8fe>
 8003e50:	4630      	mov	r0, r6
 8003e52:	e7c2      	b.n	8003dda <_dtoa_r+0x982>
 8003e54:	2301      	movs	r3, #1
 8003e56:	e7e3      	b.n	8003e20 <_dtoa_r+0x9c8>
 8003e58:	9a00      	ldr	r2, [sp, #0]
 8003e5a:	2a00      	cmp	r2, #0
 8003e5c:	db04      	blt.n	8003e68 <_dtoa_r+0xa10>
 8003e5e:	d125      	bne.n	8003eac <_dtoa_r+0xa54>
 8003e60:	9a06      	ldr	r2, [sp, #24]
 8003e62:	bb1a      	cbnz	r2, 8003eac <_dtoa_r+0xa54>
 8003e64:	9a07      	ldr	r2, [sp, #28]
 8003e66:	bb0a      	cbnz	r2, 8003eac <_dtoa_r+0xa54>
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	ddec      	ble.n	8003e46 <_dtoa_r+0x9ee>
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	9904      	ldr	r1, [sp, #16]
 8003e70:	4620      	mov	r0, r4
 8003e72:	f000 fa85 	bl	8004380 <__lshift>
 8003e76:	4639      	mov	r1, r7
 8003e78:	9004      	str	r0, [sp, #16]
 8003e7a:	f000 fad5 	bl	8004428 <__mcmp>
 8003e7e:	2800      	cmp	r0, #0
 8003e80:	dc03      	bgt.n	8003e8a <_dtoa_r+0xa32>
 8003e82:	d1e0      	bne.n	8003e46 <_dtoa_r+0x9ee>
 8003e84:	f018 0f01 	tst.w	r8, #1
 8003e88:	d0dd      	beq.n	8003e46 <_dtoa_r+0x9ee>
 8003e8a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003e8e:	d1d8      	bne.n	8003e42 <_dtoa_r+0x9ea>
 8003e90:	9b05      	ldr	r3, [sp, #20]
 8003e92:	9a05      	ldr	r2, [sp, #20]
 8003e94:	1c5d      	adds	r5, r3, #1
 8003e96:	2339      	movs	r3, #57	; 0x39
 8003e98:	7013      	strb	r3, [r2, #0]
 8003e9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003e9e:	2b39      	cmp	r3, #57	; 0x39
 8003ea0:	f105 32ff 	add.w	r2, r5, #4294967295
 8003ea4:	d04f      	beq.n	8003f46 <_dtoa_r+0xaee>
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	7013      	strb	r3, [r2, #0]
 8003eaa:	e754      	b.n	8003d56 <_dtoa_r+0x8fe>
 8003eac:	9a05      	ldr	r2, [sp, #20]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f102 0501 	add.w	r5, r2, #1
 8003eb4:	dd06      	ble.n	8003ec4 <_dtoa_r+0xa6c>
 8003eb6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003eba:	d0e9      	beq.n	8003e90 <_dtoa_r+0xa38>
 8003ebc:	f108 0801 	add.w	r8, r8, #1
 8003ec0:	9b05      	ldr	r3, [sp, #20]
 8003ec2:	e7c2      	b.n	8003e4a <_dtoa_r+0x9f2>
 8003ec4:	9a02      	ldr	r2, [sp, #8]
 8003ec6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8003eca:	eba5 030b 	sub.w	r3, r5, fp
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d021      	beq.n	8003f16 <_dtoa_r+0xabe>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	220a      	movs	r2, #10
 8003ed6:	9904      	ldr	r1, [sp, #16]
 8003ed8:	4620      	mov	r0, r4
 8003eda:	f000 f8db 	bl	8004094 <__multadd>
 8003ede:	45b1      	cmp	r9, r6
 8003ee0:	9004      	str	r0, [sp, #16]
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	f04f 020a 	mov.w	r2, #10
 8003eea:	4649      	mov	r1, r9
 8003eec:	4620      	mov	r0, r4
 8003eee:	d105      	bne.n	8003efc <_dtoa_r+0xaa4>
 8003ef0:	f000 f8d0 	bl	8004094 <__multadd>
 8003ef4:	4681      	mov	r9, r0
 8003ef6:	4606      	mov	r6, r0
 8003ef8:	9505      	str	r5, [sp, #20]
 8003efa:	e776      	b.n	8003dea <_dtoa_r+0x992>
 8003efc:	f000 f8ca 	bl	8004094 <__multadd>
 8003f00:	4631      	mov	r1, r6
 8003f02:	4681      	mov	r9, r0
 8003f04:	2300      	movs	r3, #0
 8003f06:	220a      	movs	r2, #10
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f000 f8c3 	bl	8004094 <__multadd>
 8003f0e:	4606      	mov	r6, r0
 8003f10:	e7f2      	b.n	8003ef8 <_dtoa_r+0xaa0>
 8003f12:	f04f 0900 	mov.w	r9, #0
 8003f16:	2201      	movs	r2, #1
 8003f18:	9904      	ldr	r1, [sp, #16]
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	f000 fa30 	bl	8004380 <__lshift>
 8003f20:	4639      	mov	r1, r7
 8003f22:	9004      	str	r0, [sp, #16]
 8003f24:	f000 fa80 	bl	8004428 <__mcmp>
 8003f28:	2800      	cmp	r0, #0
 8003f2a:	dcb6      	bgt.n	8003e9a <_dtoa_r+0xa42>
 8003f2c:	d102      	bne.n	8003f34 <_dtoa_r+0xadc>
 8003f2e:	f018 0f01 	tst.w	r8, #1
 8003f32:	d1b2      	bne.n	8003e9a <_dtoa_r+0xa42>
 8003f34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003f38:	2b30      	cmp	r3, #48	; 0x30
 8003f3a:	f105 32ff 	add.w	r2, r5, #4294967295
 8003f3e:	f47f af0a 	bne.w	8003d56 <_dtoa_r+0x8fe>
 8003f42:	4615      	mov	r5, r2
 8003f44:	e7f6      	b.n	8003f34 <_dtoa_r+0xadc>
 8003f46:	4593      	cmp	fp, r2
 8003f48:	d105      	bne.n	8003f56 <_dtoa_r+0xafe>
 8003f4a:	2331      	movs	r3, #49	; 0x31
 8003f4c:	f10a 0a01 	add.w	sl, sl, #1
 8003f50:	f88b 3000 	strb.w	r3, [fp]
 8003f54:	e6ff      	b.n	8003d56 <_dtoa_r+0x8fe>
 8003f56:	4615      	mov	r5, r2
 8003f58:	e79f      	b.n	8003e9a <_dtoa_r+0xa42>
 8003f5a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8003fc0 <_dtoa_r+0xb68>
 8003f5e:	e007      	b.n	8003f70 <_dtoa_r+0xb18>
 8003f60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f62:	f8df b060 	ldr.w	fp, [pc, #96]	; 8003fc4 <_dtoa_r+0xb6c>
 8003f66:	b11b      	cbz	r3, 8003f70 <_dtoa_r+0xb18>
 8003f68:	f10b 0308 	add.w	r3, fp, #8
 8003f6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	4658      	mov	r0, fp
 8003f72:	b017      	add	sp, #92	; 0x5c
 8003f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f78:	9b06      	ldr	r3, [sp, #24]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	f77f ae35 	ble.w	8003bea <_dtoa_r+0x792>
 8003f80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f82:	9307      	str	r3, [sp, #28]
 8003f84:	e649      	b.n	8003c1a <_dtoa_r+0x7c2>
 8003f86:	9b02      	ldr	r3, [sp, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	dc03      	bgt.n	8003f94 <_dtoa_r+0xb3c>
 8003f8c:	9b06      	ldr	r3, [sp, #24]
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	f73f aecc 	bgt.w	8003d2c <_dtoa_r+0x8d4>
 8003f94:	465d      	mov	r5, fp
 8003f96:	4639      	mov	r1, r7
 8003f98:	9804      	ldr	r0, [sp, #16]
 8003f9a:	f7ff f9d1 	bl	8003340 <quorem>
 8003f9e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003fa2:	f805 8b01 	strb.w	r8, [r5], #1
 8003fa6:	9a02      	ldr	r2, [sp, #8]
 8003fa8:	eba5 030b 	sub.w	r3, r5, fp
 8003fac:	429a      	cmp	r2, r3
 8003fae:	ddb0      	ble.n	8003f12 <_dtoa_r+0xaba>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	220a      	movs	r2, #10
 8003fb4:	9904      	ldr	r1, [sp, #16]
 8003fb6:	4620      	mov	r0, r4
 8003fb8:	f000 f86c 	bl	8004094 <__multadd>
 8003fbc:	9004      	str	r0, [sp, #16]
 8003fbe:	e7ea      	b.n	8003f96 <_dtoa_r+0xb3e>
 8003fc0:	08004a37 	.word	0x08004a37
 8003fc4:	08004a5b 	.word	0x08004a5b

08003fc8 <_localeconv_r>:
 8003fc8:	4b04      	ldr	r3, [pc, #16]	; (8003fdc <_localeconv_r+0x14>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6a18      	ldr	r0, [r3, #32]
 8003fce:	4b04      	ldr	r3, [pc, #16]	; (8003fe0 <_localeconv_r+0x18>)
 8003fd0:	2800      	cmp	r0, #0
 8003fd2:	bf08      	it	eq
 8003fd4:	4618      	moveq	r0, r3
 8003fd6:	30f0      	adds	r0, #240	; 0xf0
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	20000004 	.word	0x20000004
 8003fe0:	20000068 	.word	0x20000068

08003fe4 <memcpy>:
 8003fe4:	b510      	push	{r4, lr}
 8003fe6:	1e43      	subs	r3, r0, #1
 8003fe8:	440a      	add	r2, r1
 8003fea:	4291      	cmp	r1, r2
 8003fec:	d100      	bne.n	8003ff0 <memcpy+0xc>
 8003fee:	bd10      	pop	{r4, pc}
 8003ff0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ff4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ff8:	e7f7      	b.n	8003fea <memcpy+0x6>

08003ffa <__malloc_lock>:
 8003ffa:	4770      	bx	lr

08003ffc <__malloc_unlock>:
 8003ffc:	4770      	bx	lr

08003ffe <_Balloc>:
 8003ffe:	b570      	push	{r4, r5, r6, lr}
 8004000:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004002:	4604      	mov	r4, r0
 8004004:	460e      	mov	r6, r1
 8004006:	b93d      	cbnz	r5, 8004018 <_Balloc+0x1a>
 8004008:	2010      	movs	r0, #16
 800400a:	f7fe fc41 	bl	8002890 <malloc>
 800400e:	6260      	str	r0, [r4, #36]	; 0x24
 8004010:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004014:	6005      	str	r5, [r0, #0]
 8004016:	60c5      	str	r5, [r0, #12]
 8004018:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800401a:	68eb      	ldr	r3, [r5, #12]
 800401c:	b183      	cbz	r3, 8004040 <_Balloc+0x42>
 800401e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004026:	b9b8      	cbnz	r0, 8004058 <_Balloc+0x5a>
 8004028:	2101      	movs	r1, #1
 800402a:	fa01 f506 	lsl.w	r5, r1, r6
 800402e:	1d6a      	adds	r2, r5, #5
 8004030:	0092      	lsls	r2, r2, #2
 8004032:	4620      	mov	r0, r4
 8004034:	f000 fabe 	bl	80045b4 <_calloc_r>
 8004038:	b160      	cbz	r0, 8004054 <_Balloc+0x56>
 800403a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800403e:	e00e      	b.n	800405e <_Balloc+0x60>
 8004040:	2221      	movs	r2, #33	; 0x21
 8004042:	2104      	movs	r1, #4
 8004044:	4620      	mov	r0, r4
 8004046:	f000 fab5 	bl	80045b4 <_calloc_r>
 800404a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800404c:	60e8      	str	r0, [r5, #12]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1e4      	bne.n	800401e <_Balloc+0x20>
 8004054:	2000      	movs	r0, #0
 8004056:	bd70      	pop	{r4, r5, r6, pc}
 8004058:	6802      	ldr	r2, [r0, #0]
 800405a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800405e:	2300      	movs	r3, #0
 8004060:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004064:	e7f7      	b.n	8004056 <_Balloc+0x58>

08004066 <_Bfree>:
 8004066:	b570      	push	{r4, r5, r6, lr}
 8004068:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800406a:	4606      	mov	r6, r0
 800406c:	460d      	mov	r5, r1
 800406e:	b93c      	cbnz	r4, 8004080 <_Bfree+0x1a>
 8004070:	2010      	movs	r0, #16
 8004072:	f7fe fc0d 	bl	8002890 <malloc>
 8004076:	6270      	str	r0, [r6, #36]	; 0x24
 8004078:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800407c:	6004      	str	r4, [r0, #0]
 800407e:	60c4      	str	r4, [r0, #12]
 8004080:	b13d      	cbz	r5, 8004092 <_Bfree+0x2c>
 8004082:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004084:	686a      	ldr	r2, [r5, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800408c:	6029      	str	r1, [r5, #0]
 800408e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004092:	bd70      	pop	{r4, r5, r6, pc}

08004094 <__multadd>:
 8004094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004098:	690d      	ldr	r5, [r1, #16]
 800409a:	461f      	mov	r7, r3
 800409c:	4606      	mov	r6, r0
 800409e:	460c      	mov	r4, r1
 80040a0:	f101 0c14 	add.w	ip, r1, #20
 80040a4:	2300      	movs	r3, #0
 80040a6:	f8dc 0000 	ldr.w	r0, [ip]
 80040aa:	b281      	uxth	r1, r0
 80040ac:	fb02 7101 	mla	r1, r2, r1, r7
 80040b0:	0c0f      	lsrs	r7, r1, #16
 80040b2:	0c00      	lsrs	r0, r0, #16
 80040b4:	fb02 7000 	mla	r0, r2, r0, r7
 80040b8:	b289      	uxth	r1, r1
 80040ba:	3301      	adds	r3, #1
 80040bc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80040c0:	429d      	cmp	r5, r3
 80040c2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80040c6:	f84c 1b04 	str.w	r1, [ip], #4
 80040ca:	dcec      	bgt.n	80040a6 <__multadd+0x12>
 80040cc:	b1d7      	cbz	r7, 8004104 <__multadd+0x70>
 80040ce:	68a3      	ldr	r3, [r4, #8]
 80040d0:	42ab      	cmp	r3, r5
 80040d2:	dc12      	bgt.n	80040fa <__multadd+0x66>
 80040d4:	6861      	ldr	r1, [r4, #4]
 80040d6:	4630      	mov	r0, r6
 80040d8:	3101      	adds	r1, #1
 80040da:	f7ff ff90 	bl	8003ffe <_Balloc>
 80040de:	6922      	ldr	r2, [r4, #16]
 80040e0:	3202      	adds	r2, #2
 80040e2:	f104 010c 	add.w	r1, r4, #12
 80040e6:	4680      	mov	r8, r0
 80040e8:	0092      	lsls	r2, r2, #2
 80040ea:	300c      	adds	r0, #12
 80040ec:	f7ff ff7a 	bl	8003fe4 <memcpy>
 80040f0:	4621      	mov	r1, r4
 80040f2:	4630      	mov	r0, r6
 80040f4:	f7ff ffb7 	bl	8004066 <_Bfree>
 80040f8:	4644      	mov	r4, r8
 80040fa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80040fe:	3501      	adds	r5, #1
 8004100:	615f      	str	r7, [r3, #20]
 8004102:	6125      	str	r5, [r4, #16]
 8004104:	4620      	mov	r0, r4
 8004106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800410a <__hi0bits>:
 800410a:	0c02      	lsrs	r2, r0, #16
 800410c:	0412      	lsls	r2, r2, #16
 800410e:	4603      	mov	r3, r0
 8004110:	b9b2      	cbnz	r2, 8004140 <__hi0bits+0x36>
 8004112:	0403      	lsls	r3, r0, #16
 8004114:	2010      	movs	r0, #16
 8004116:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800411a:	bf04      	itt	eq
 800411c:	021b      	lsleq	r3, r3, #8
 800411e:	3008      	addeq	r0, #8
 8004120:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004124:	bf04      	itt	eq
 8004126:	011b      	lsleq	r3, r3, #4
 8004128:	3004      	addeq	r0, #4
 800412a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800412e:	bf04      	itt	eq
 8004130:	009b      	lsleq	r3, r3, #2
 8004132:	3002      	addeq	r0, #2
 8004134:	2b00      	cmp	r3, #0
 8004136:	db06      	blt.n	8004146 <__hi0bits+0x3c>
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	d503      	bpl.n	8004144 <__hi0bits+0x3a>
 800413c:	3001      	adds	r0, #1
 800413e:	4770      	bx	lr
 8004140:	2000      	movs	r0, #0
 8004142:	e7e8      	b.n	8004116 <__hi0bits+0xc>
 8004144:	2020      	movs	r0, #32
 8004146:	4770      	bx	lr

08004148 <__lo0bits>:
 8004148:	6803      	ldr	r3, [r0, #0]
 800414a:	f013 0207 	ands.w	r2, r3, #7
 800414e:	4601      	mov	r1, r0
 8004150:	d00b      	beq.n	800416a <__lo0bits+0x22>
 8004152:	07da      	lsls	r2, r3, #31
 8004154:	d423      	bmi.n	800419e <__lo0bits+0x56>
 8004156:	0798      	lsls	r0, r3, #30
 8004158:	bf49      	itett	mi
 800415a:	085b      	lsrmi	r3, r3, #1
 800415c:	089b      	lsrpl	r3, r3, #2
 800415e:	2001      	movmi	r0, #1
 8004160:	600b      	strmi	r3, [r1, #0]
 8004162:	bf5c      	itt	pl
 8004164:	600b      	strpl	r3, [r1, #0]
 8004166:	2002      	movpl	r0, #2
 8004168:	4770      	bx	lr
 800416a:	b298      	uxth	r0, r3
 800416c:	b9a8      	cbnz	r0, 800419a <__lo0bits+0x52>
 800416e:	0c1b      	lsrs	r3, r3, #16
 8004170:	2010      	movs	r0, #16
 8004172:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004176:	bf04      	itt	eq
 8004178:	0a1b      	lsreq	r3, r3, #8
 800417a:	3008      	addeq	r0, #8
 800417c:	071a      	lsls	r2, r3, #28
 800417e:	bf04      	itt	eq
 8004180:	091b      	lsreq	r3, r3, #4
 8004182:	3004      	addeq	r0, #4
 8004184:	079a      	lsls	r2, r3, #30
 8004186:	bf04      	itt	eq
 8004188:	089b      	lsreq	r3, r3, #2
 800418a:	3002      	addeq	r0, #2
 800418c:	07da      	lsls	r2, r3, #31
 800418e:	d402      	bmi.n	8004196 <__lo0bits+0x4e>
 8004190:	085b      	lsrs	r3, r3, #1
 8004192:	d006      	beq.n	80041a2 <__lo0bits+0x5a>
 8004194:	3001      	adds	r0, #1
 8004196:	600b      	str	r3, [r1, #0]
 8004198:	4770      	bx	lr
 800419a:	4610      	mov	r0, r2
 800419c:	e7e9      	b.n	8004172 <__lo0bits+0x2a>
 800419e:	2000      	movs	r0, #0
 80041a0:	4770      	bx	lr
 80041a2:	2020      	movs	r0, #32
 80041a4:	4770      	bx	lr

080041a6 <__i2b>:
 80041a6:	b510      	push	{r4, lr}
 80041a8:	460c      	mov	r4, r1
 80041aa:	2101      	movs	r1, #1
 80041ac:	f7ff ff27 	bl	8003ffe <_Balloc>
 80041b0:	2201      	movs	r2, #1
 80041b2:	6144      	str	r4, [r0, #20]
 80041b4:	6102      	str	r2, [r0, #16]
 80041b6:	bd10      	pop	{r4, pc}

080041b8 <__multiply>:
 80041b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041bc:	4614      	mov	r4, r2
 80041be:	690a      	ldr	r2, [r1, #16]
 80041c0:	6923      	ldr	r3, [r4, #16]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	bfb8      	it	lt
 80041c6:	460b      	movlt	r3, r1
 80041c8:	4688      	mov	r8, r1
 80041ca:	bfbc      	itt	lt
 80041cc:	46a0      	movlt	r8, r4
 80041ce:	461c      	movlt	r4, r3
 80041d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80041d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80041d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80041dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80041e0:	eb07 0609 	add.w	r6, r7, r9
 80041e4:	42b3      	cmp	r3, r6
 80041e6:	bfb8      	it	lt
 80041e8:	3101      	addlt	r1, #1
 80041ea:	f7ff ff08 	bl	8003ffe <_Balloc>
 80041ee:	f100 0514 	add.w	r5, r0, #20
 80041f2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80041f6:	462b      	mov	r3, r5
 80041f8:	2200      	movs	r2, #0
 80041fa:	4573      	cmp	r3, lr
 80041fc:	d316      	bcc.n	800422c <__multiply+0x74>
 80041fe:	f104 0214 	add.w	r2, r4, #20
 8004202:	f108 0114 	add.w	r1, r8, #20
 8004206:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800420a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	9b00      	ldr	r3, [sp, #0]
 8004212:	9201      	str	r2, [sp, #4]
 8004214:	4293      	cmp	r3, r2
 8004216:	d80c      	bhi.n	8004232 <__multiply+0x7a>
 8004218:	2e00      	cmp	r6, #0
 800421a:	dd03      	ble.n	8004224 <__multiply+0x6c>
 800421c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004220:	2b00      	cmp	r3, #0
 8004222:	d05d      	beq.n	80042e0 <__multiply+0x128>
 8004224:	6106      	str	r6, [r0, #16]
 8004226:	b003      	add	sp, #12
 8004228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800422c:	f843 2b04 	str.w	r2, [r3], #4
 8004230:	e7e3      	b.n	80041fa <__multiply+0x42>
 8004232:	f8b2 b000 	ldrh.w	fp, [r2]
 8004236:	f1bb 0f00 	cmp.w	fp, #0
 800423a:	d023      	beq.n	8004284 <__multiply+0xcc>
 800423c:	4689      	mov	r9, r1
 800423e:	46ac      	mov	ip, r5
 8004240:	f04f 0800 	mov.w	r8, #0
 8004244:	f859 4b04 	ldr.w	r4, [r9], #4
 8004248:	f8dc a000 	ldr.w	sl, [ip]
 800424c:	b2a3      	uxth	r3, r4
 800424e:	fa1f fa8a 	uxth.w	sl, sl
 8004252:	fb0b a303 	mla	r3, fp, r3, sl
 8004256:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800425a:	f8dc 4000 	ldr.w	r4, [ip]
 800425e:	4443      	add	r3, r8
 8004260:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004264:	fb0b 840a 	mla	r4, fp, sl, r8
 8004268:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800426c:	46e2      	mov	sl, ip
 800426e:	b29b      	uxth	r3, r3
 8004270:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004274:	454f      	cmp	r7, r9
 8004276:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800427a:	f84a 3b04 	str.w	r3, [sl], #4
 800427e:	d82b      	bhi.n	80042d8 <__multiply+0x120>
 8004280:	f8cc 8004 	str.w	r8, [ip, #4]
 8004284:	9b01      	ldr	r3, [sp, #4]
 8004286:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800428a:	3204      	adds	r2, #4
 800428c:	f1ba 0f00 	cmp.w	sl, #0
 8004290:	d020      	beq.n	80042d4 <__multiply+0x11c>
 8004292:	682b      	ldr	r3, [r5, #0]
 8004294:	4689      	mov	r9, r1
 8004296:	46a8      	mov	r8, r5
 8004298:	f04f 0b00 	mov.w	fp, #0
 800429c:	f8b9 c000 	ldrh.w	ip, [r9]
 80042a0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80042a4:	fb0a 440c 	mla	r4, sl, ip, r4
 80042a8:	445c      	add	r4, fp
 80042aa:	46c4      	mov	ip, r8
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80042b2:	f84c 3b04 	str.w	r3, [ip], #4
 80042b6:	f859 3b04 	ldr.w	r3, [r9], #4
 80042ba:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80042be:	0c1b      	lsrs	r3, r3, #16
 80042c0:	fb0a b303 	mla	r3, sl, r3, fp
 80042c4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80042c8:	454f      	cmp	r7, r9
 80042ca:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80042ce:	d805      	bhi.n	80042dc <__multiply+0x124>
 80042d0:	f8c8 3004 	str.w	r3, [r8, #4]
 80042d4:	3504      	adds	r5, #4
 80042d6:	e79b      	b.n	8004210 <__multiply+0x58>
 80042d8:	46d4      	mov	ip, sl
 80042da:	e7b3      	b.n	8004244 <__multiply+0x8c>
 80042dc:	46e0      	mov	r8, ip
 80042de:	e7dd      	b.n	800429c <__multiply+0xe4>
 80042e0:	3e01      	subs	r6, #1
 80042e2:	e799      	b.n	8004218 <__multiply+0x60>

080042e4 <__pow5mult>:
 80042e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042e8:	4615      	mov	r5, r2
 80042ea:	f012 0203 	ands.w	r2, r2, #3
 80042ee:	4606      	mov	r6, r0
 80042f0:	460f      	mov	r7, r1
 80042f2:	d007      	beq.n	8004304 <__pow5mult+0x20>
 80042f4:	3a01      	subs	r2, #1
 80042f6:	4c21      	ldr	r4, [pc, #132]	; (800437c <__pow5mult+0x98>)
 80042f8:	2300      	movs	r3, #0
 80042fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80042fe:	f7ff fec9 	bl	8004094 <__multadd>
 8004302:	4607      	mov	r7, r0
 8004304:	10ad      	asrs	r5, r5, #2
 8004306:	d035      	beq.n	8004374 <__pow5mult+0x90>
 8004308:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800430a:	b93c      	cbnz	r4, 800431c <__pow5mult+0x38>
 800430c:	2010      	movs	r0, #16
 800430e:	f7fe fabf 	bl	8002890 <malloc>
 8004312:	6270      	str	r0, [r6, #36]	; 0x24
 8004314:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004318:	6004      	str	r4, [r0, #0]
 800431a:	60c4      	str	r4, [r0, #12]
 800431c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004320:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004324:	b94c      	cbnz	r4, 800433a <__pow5mult+0x56>
 8004326:	f240 2171 	movw	r1, #625	; 0x271
 800432a:	4630      	mov	r0, r6
 800432c:	f7ff ff3b 	bl	80041a6 <__i2b>
 8004330:	2300      	movs	r3, #0
 8004332:	f8c8 0008 	str.w	r0, [r8, #8]
 8004336:	4604      	mov	r4, r0
 8004338:	6003      	str	r3, [r0, #0]
 800433a:	f04f 0800 	mov.w	r8, #0
 800433e:	07eb      	lsls	r3, r5, #31
 8004340:	d50a      	bpl.n	8004358 <__pow5mult+0x74>
 8004342:	4639      	mov	r1, r7
 8004344:	4622      	mov	r2, r4
 8004346:	4630      	mov	r0, r6
 8004348:	f7ff ff36 	bl	80041b8 <__multiply>
 800434c:	4639      	mov	r1, r7
 800434e:	4681      	mov	r9, r0
 8004350:	4630      	mov	r0, r6
 8004352:	f7ff fe88 	bl	8004066 <_Bfree>
 8004356:	464f      	mov	r7, r9
 8004358:	106d      	asrs	r5, r5, #1
 800435a:	d00b      	beq.n	8004374 <__pow5mult+0x90>
 800435c:	6820      	ldr	r0, [r4, #0]
 800435e:	b938      	cbnz	r0, 8004370 <__pow5mult+0x8c>
 8004360:	4622      	mov	r2, r4
 8004362:	4621      	mov	r1, r4
 8004364:	4630      	mov	r0, r6
 8004366:	f7ff ff27 	bl	80041b8 <__multiply>
 800436a:	6020      	str	r0, [r4, #0]
 800436c:	f8c0 8000 	str.w	r8, [r0]
 8004370:	4604      	mov	r4, r0
 8004372:	e7e4      	b.n	800433e <__pow5mult+0x5a>
 8004374:	4638      	mov	r0, r7
 8004376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800437a:	bf00      	nop
 800437c:	08004b58 	.word	0x08004b58

08004380 <__lshift>:
 8004380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004384:	460c      	mov	r4, r1
 8004386:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800438a:	6923      	ldr	r3, [r4, #16]
 800438c:	6849      	ldr	r1, [r1, #4]
 800438e:	eb0a 0903 	add.w	r9, sl, r3
 8004392:	68a3      	ldr	r3, [r4, #8]
 8004394:	4607      	mov	r7, r0
 8004396:	4616      	mov	r6, r2
 8004398:	f109 0501 	add.w	r5, r9, #1
 800439c:	42ab      	cmp	r3, r5
 800439e:	db32      	blt.n	8004406 <__lshift+0x86>
 80043a0:	4638      	mov	r0, r7
 80043a2:	f7ff fe2c 	bl	8003ffe <_Balloc>
 80043a6:	2300      	movs	r3, #0
 80043a8:	4680      	mov	r8, r0
 80043aa:	f100 0114 	add.w	r1, r0, #20
 80043ae:	461a      	mov	r2, r3
 80043b0:	4553      	cmp	r3, sl
 80043b2:	db2b      	blt.n	800440c <__lshift+0x8c>
 80043b4:	6920      	ldr	r0, [r4, #16]
 80043b6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80043ba:	f104 0314 	add.w	r3, r4, #20
 80043be:	f016 021f 	ands.w	r2, r6, #31
 80043c2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80043c6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80043ca:	d025      	beq.n	8004418 <__lshift+0x98>
 80043cc:	f1c2 0e20 	rsb	lr, r2, #32
 80043d0:	2000      	movs	r0, #0
 80043d2:	681e      	ldr	r6, [r3, #0]
 80043d4:	468a      	mov	sl, r1
 80043d6:	4096      	lsls	r6, r2
 80043d8:	4330      	orrs	r0, r6
 80043da:	f84a 0b04 	str.w	r0, [sl], #4
 80043de:	f853 0b04 	ldr.w	r0, [r3], #4
 80043e2:	459c      	cmp	ip, r3
 80043e4:	fa20 f00e 	lsr.w	r0, r0, lr
 80043e8:	d814      	bhi.n	8004414 <__lshift+0x94>
 80043ea:	6048      	str	r0, [r1, #4]
 80043ec:	b108      	cbz	r0, 80043f2 <__lshift+0x72>
 80043ee:	f109 0502 	add.w	r5, r9, #2
 80043f2:	3d01      	subs	r5, #1
 80043f4:	4638      	mov	r0, r7
 80043f6:	f8c8 5010 	str.w	r5, [r8, #16]
 80043fa:	4621      	mov	r1, r4
 80043fc:	f7ff fe33 	bl	8004066 <_Bfree>
 8004400:	4640      	mov	r0, r8
 8004402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004406:	3101      	adds	r1, #1
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	e7c7      	b.n	800439c <__lshift+0x1c>
 800440c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004410:	3301      	adds	r3, #1
 8004412:	e7cd      	b.n	80043b0 <__lshift+0x30>
 8004414:	4651      	mov	r1, sl
 8004416:	e7dc      	b.n	80043d2 <__lshift+0x52>
 8004418:	3904      	subs	r1, #4
 800441a:	f853 2b04 	ldr.w	r2, [r3], #4
 800441e:	f841 2f04 	str.w	r2, [r1, #4]!
 8004422:	459c      	cmp	ip, r3
 8004424:	d8f9      	bhi.n	800441a <__lshift+0x9a>
 8004426:	e7e4      	b.n	80043f2 <__lshift+0x72>

08004428 <__mcmp>:
 8004428:	6903      	ldr	r3, [r0, #16]
 800442a:	690a      	ldr	r2, [r1, #16]
 800442c:	1a9b      	subs	r3, r3, r2
 800442e:	b530      	push	{r4, r5, lr}
 8004430:	d10c      	bne.n	800444c <__mcmp+0x24>
 8004432:	0092      	lsls	r2, r2, #2
 8004434:	3014      	adds	r0, #20
 8004436:	3114      	adds	r1, #20
 8004438:	1884      	adds	r4, r0, r2
 800443a:	4411      	add	r1, r2
 800443c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004440:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004444:	4295      	cmp	r5, r2
 8004446:	d003      	beq.n	8004450 <__mcmp+0x28>
 8004448:	d305      	bcc.n	8004456 <__mcmp+0x2e>
 800444a:	2301      	movs	r3, #1
 800444c:	4618      	mov	r0, r3
 800444e:	bd30      	pop	{r4, r5, pc}
 8004450:	42a0      	cmp	r0, r4
 8004452:	d3f3      	bcc.n	800443c <__mcmp+0x14>
 8004454:	e7fa      	b.n	800444c <__mcmp+0x24>
 8004456:	f04f 33ff 	mov.w	r3, #4294967295
 800445a:	e7f7      	b.n	800444c <__mcmp+0x24>

0800445c <__mdiff>:
 800445c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004460:	460d      	mov	r5, r1
 8004462:	4607      	mov	r7, r0
 8004464:	4611      	mov	r1, r2
 8004466:	4628      	mov	r0, r5
 8004468:	4614      	mov	r4, r2
 800446a:	f7ff ffdd 	bl	8004428 <__mcmp>
 800446e:	1e06      	subs	r6, r0, #0
 8004470:	d108      	bne.n	8004484 <__mdiff+0x28>
 8004472:	4631      	mov	r1, r6
 8004474:	4638      	mov	r0, r7
 8004476:	f7ff fdc2 	bl	8003ffe <_Balloc>
 800447a:	2301      	movs	r3, #1
 800447c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004484:	bfa4      	itt	ge
 8004486:	4623      	movge	r3, r4
 8004488:	462c      	movge	r4, r5
 800448a:	4638      	mov	r0, r7
 800448c:	6861      	ldr	r1, [r4, #4]
 800448e:	bfa6      	itte	ge
 8004490:	461d      	movge	r5, r3
 8004492:	2600      	movge	r6, #0
 8004494:	2601      	movlt	r6, #1
 8004496:	f7ff fdb2 	bl	8003ffe <_Balloc>
 800449a:	692b      	ldr	r3, [r5, #16]
 800449c:	60c6      	str	r6, [r0, #12]
 800449e:	6926      	ldr	r6, [r4, #16]
 80044a0:	f105 0914 	add.w	r9, r5, #20
 80044a4:	f104 0214 	add.w	r2, r4, #20
 80044a8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80044ac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80044b0:	f100 0514 	add.w	r5, r0, #20
 80044b4:	f04f 0e00 	mov.w	lr, #0
 80044b8:	f852 ab04 	ldr.w	sl, [r2], #4
 80044bc:	f859 4b04 	ldr.w	r4, [r9], #4
 80044c0:	fa1e f18a 	uxtah	r1, lr, sl
 80044c4:	b2a3      	uxth	r3, r4
 80044c6:	1ac9      	subs	r1, r1, r3
 80044c8:	0c23      	lsrs	r3, r4, #16
 80044ca:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80044ce:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80044d2:	b289      	uxth	r1, r1
 80044d4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80044d8:	45c8      	cmp	r8, r9
 80044da:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80044de:	4694      	mov	ip, r2
 80044e0:	f845 3b04 	str.w	r3, [r5], #4
 80044e4:	d8e8      	bhi.n	80044b8 <__mdiff+0x5c>
 80044e6:	45bc      	cmp	ip, r7
 80044e8:	d304      	bcc.n	80044f4 <__mdiff+0x98>
 80044ea:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80044ee:	b183      	cbz	r3, 8004512 <__mdiff+0xb6>
 80044f0:	6106      	str	r6, [r0, #16]
 80044f2:	e7c5      	b.n	8004480 <__mdiff+0x24>
 80044f4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80044f8:	fa1e f381 	uxtah	r3, lr, r1
 80044fc:	141a      	asrs	r2, r3, #16
 80044fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004502:	b29b      	uxth	r3, r3
 8004504:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004508:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800450c:	f845 3b04 	str.w	r3, [r5], #4
 8004510:	e7e9      	b.n	80044e6 <__mdiff+0x8a>
 8004512:	3e01      	subs	r6, #1
 8004514:	e7e9      	b.n	80044ea <__mdiff+0x8e>

08004516 <__d2b>:
 8004516:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800451a:	460e      	mov	r6, r1
 800451c:	2101      	movs	r1, #1
 800451e:	ec59 8b10 	vmov	r8, r9, d0
 8004522:	4615      	mov	r5, r2
 8004524:	f7ff fd6b 	bl	8003ffe <_Balloc>
 8004528:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800452c:	4607      	mov	r7, r0
 800452e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004532:	bb34      	cbnz	r4, 8004582 <__d2b+0x6c>
 8004534:	9301      	str	r3, [sp, #4]
 8004536:	f1b8 0300 	subs.w	r3, r8, #0
 800453a:	d027      	beq.n	800458c <__d2b+0x76>
 800453c:	a802      	add	r0, sp, #8
 800453e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8004542:	f7ff fe01 	bl	8004148 <__lo0bits>
 8004546:	9900      	ldr	r1, [sp, #0]
 8004548:	b1f0      	cbz	r0, 8004588 <__d2b+0x72>
 800454a:	9a01      	ldr	r2, [sp, #4]
 800454c:	f1c0 0320 	rsb	r3, r0, #32
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	430b      	orrs	r3, r1
 8004556:	40c2      	lsrs	r2, r0
 8004558:	617b      	str	r3, [r7, #20]
 800455a:	9201      	str	r2, [sp, #4]
 800455c:	9b01      	ldr	r3, [sp, #4]
 800455e:	61bb      	str	r3, [r7, #24]
 8004560:	2b00      	cmp	r3, #0
 8004562:	bf14      	ite	ne
 8004564:	2102      	movne	r1, #2
 8004566:	2101      	moveq	r1, #1
 8004568:	6139      	str	r1, [r7, #16]
 800456a:	b1c4      	cbz	r4, 800459e <__d2b+0x88>
 800456c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004570:	4404      	add	r4, r0
 8004572:	6034      	str	r4, [r6, #0]
 8004574:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004578:	6028      	str	r0, [r5, #0]
 800457a:	4638      	mov	r0, r7
 800457c:	b003      	add	sp, #12
 800457e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004586:	e7d5      	b.n	8004534 <__d2b+0x1e>
 8004588:	6179      	str	r1, [r7, #20]
 800458a:	e7e7      	b.n	800455c <__d2b+0x46>
 800458c:	a801      	add	r0, sp, #4
 800458e:	f7ff fddb 	bl	8004148 <__lo0bits>
 8004592:	9b01      	ldr	r3, [sp, #4]
 8004594:	617b      	str	r3, [r7, #20]
 8004596:	2101      	movs	r1, #1
 8004598:	6139      	str	r1, [r7, #16]
 800459a:	3020      	adds	r0, #32
 800459c:	e7e5      	b.n	800456a <__d2b+0x54>
 800459e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80045a2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80045a6:	6030      	str	r0, [r6, #0]
 80045a8:	6918      	ldr	r0, [r3, #16]
 80045aa:	f7ff fdae 	bl	800410a <__hi0bits>
 80045ae:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80045b2:	e7e1      	b.n	8004578 <__d2b+0x62>

080045b4 <_calloc_r>:
 80045b4:	b538      	push	{r3, r4, r5, lr}
 80045b6:	fb02 f401 	mul.w	r4, r2, r1
 80045ba:	4621      	mov	r1, r4
 80045bc:	f7fe f9c6 	bl	800294c <_malloc_r>
 80045c0:	4605      	mov	r5, r0
 80045c2:	b118      	cbz	r0, 80045cc <_calloc_r+0x18>
 80045c4:	4622      	mov	r2, r4
 80045c6:	2100      	movs	r1, #0
 80045c8:	f7fe f96a 	bl	80028a0 <memset>
 80045cc:	4628      	mov	r0, r5
 80045ce:	bd38      	pop	{r3, r4, r5, pc}

080045d0 <__ssputs_r>:
 80045d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045d4:	688e      	ldr	r6, [r1, #8]
 80045d6:	429e      	cmp	r6, r3
 80045d8:	4682      	mov	sl, r0
 80045da:	460c      	mov	r4, r1
 80045dc:	4690      	mov	r8, r2
 80045de:	4699      	mov	r9, r3
 80045e0:	d837      	bhi.n	8004652 <__ssputs_r+0x82>
 80045e2:	898a      	ldrh	r2, [r1, #12]
 80045e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80045e8:	d031      	beq.n	800464e <__ssputs_r+0x7e>
 80045ea:	6825      	ldr	r5, [r4, #0]
 80045ec:	6909      	ldr	r1, [r1, #16]
 80045ee:	1a6f      	subs	r7, r5, r1
 80045f0:	6965      	ldr	r5, [r4, #20]
 80045f2:	2302      	movs	r3, #2
 80045f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80045fc:	f109 0301 	add.w	r3, r9, #1
 8004600:	443b      	add	r3, r7
 8004602:	429d      	cmp	r5, r3
 8004604:	bf38      	it	cc
 8004606:	461d      	movcc	r5, r3
 8004608:	0553      	lsls	r3, r2, #21
 800460a:	d530      	bpl.n	800466e <__ssputs_r+0x9e>
 800460c:	4629      	mov	r1, r5
 800460e:	f7fe f99d 	bl	800294c <_malloc_r>
 8004612:	4606      	mov	r6, r0
 8004614:	b950      	cbnz	r0, 800462c <__ssputs_r+0x5c>
 8004616:	230c      	movs	r3, #12
 8004618:	f8ca 3000 	str.w	r3, [sl]
 800461c:	89a3      	ldrh	r3, [r4, #12]
 800461e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004622:	81a3      	strh	r3, [r4, #12]
 8004624:	f04f 30ff 	mov.w	r0, #4294967295
 8004628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800462c:	463a      	mov	r2, r7
 800462e:	6921      	ldr	r1, [r4, #16]
 8004630:	f7ff fcd8 	bl	8003fe4 <memcpy>
 8004634:	89a3      	ldrh	r3, [r4, #12]
 8004636:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800463a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800463e:	81a3      	strh	r3, [r4, #12]
 8004640:	6126      	str	r6, [r4, #16]
 8004642:	6165      	str	r5, [r4, #20]
 8004644:	443e      	add	r6, r7
 8004646:	1bed      	subs	r5, r5, r7
 8004648:	6026      	str	r6, [r4, #0]
 800464a:	60a5      	str	r5, [r4, #8]
 800464c:	464e      	mov	r6, r9
 800464e:	454e      	cmp	r6, r9
 8004650:	d900      	bls.n	8004654 <__ssputs_r+0x84>
 8004652:	464e      	mov	r6, r9
 8004654:	4632      	mov	r2, r6
 8004656:	4641      	mov	r1, r8
 8004658:	6820      	ldr	r0, [r4, #0]
 800465a:	f000 f91d 	bl	8004898 <memmove>
 800465e:	68a3      	ldr	r3, [r4, #8]
 8004660:	1b9b      	subs	r3, r3, r6
 8004662:	60a3      	str	r3, [r4, #8]
 8004664:	6823      	ldr	r3, [r4, #0]
 8004666:	441e      	add	r6, r3
 8004668:	6026      	str	r6, [r4, #0]
 800466a:	2000      	movs	r0, #0
 800466c:	e7dc      	b.n	8004628 <__ssputs_r+0x58>
 800466e:	462a      	mov	r2, r5
 8004670:	f000 f92b 	bl	80048ca <_realloc_r>
 8004674:	4606      	mov	r6, r0
 8004676:	2800      	cmp	r0, #0
 8004678:	d1e2      	bne.n	8004640 <__ssputs_r+0x70>
 800467a:	6921      	ldr	r1, [r4, #16]
 800467c:	4650      	mov	r0, sl
 800467e:	f7fe f917 	bl	80028b0 <_free_r>
 8004682:	e7c8      	b.n	8004616 <__ssputs_r+0x46>

08004684 <_svfiprintf_r>:
 8004684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004688:	461d      	mov	r5, r3
 800468a:	898b      	ldrh	r3, [r1, #12]
 800468c:	061f      	lsls	r7, r3, #24
 800468e:	b09d      	sub	sp, #116	; 0x74
 8004690:	4680      	mov	r8, r0
 8004692:	460c      	mov	r4, r1
 8004694:	4616      	mov	r6, r2
 8004696:	d50f      	bpl.n	80046b8 <_svfiprintf_r+0x34>
 8004698:	690b      	ldr	r3, [r1, #16]
 800469a:	b96b      	cbnz	r3, 80046b8 <_svfiprintf_r+0x34>
 800469c:	2140      	movs	r1, #64	; 0x40
 800469e:	f7fe f955 	bl	800294c <_malloc_r>
 80046a2:	6020      	str	r0, [r4, #0]
 80046a4:	6120      	str	r0, [r4, #16]
 80046a6:	b928      	cbnz	r0, 80046b4 <_svfiprintf_r+0x30>
 80046a8:	230c      	movs	r3, #12
 80046aa:	f8c8 3000 	str.w	r3, [r8]
 80046ae:	f04f 30ff 	mov.w	r0, #4294967295
 80046b2:	e0c8      	b.n	8004846 <_svfiprintf_r+0x1c2>
 80046b4:	2340      	movs	r3, #64	; 0x40
 80046b6:	6163      	str	r3, [r4, #20]
 80046b8:	2300      	movs	r3, #0
 80046ba:	9309      	str	r3, [sp, #36]	; 0x24
 80046bc:	2320      	movs	r3, #32
 80046be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046c2:	2330      	movs	r3, #48	; 0x30
 80046c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046c8:	9503      	str	r5, [sp, #12]
 80046ca:	f04f 0b01 	mov.w	fp, #1
 80046ce:	4637      	mov	r7, r6
 80046d0:	463d      	mov	r5, r7
 80046d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80046d6:	b10b      	cbz	r3, 80046dc <_svfiprintf_r+0x58>
 80046d8:	2b25      	cmp	r3, #37	; 0x25
 80046da:	d13e      	bne.n	800475a <_svfiprintf_r+0xd6>
 80046dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80046e0:	d00b      	beq.n	80046fa <_svfiprintf_r+0x76>
 80046e2:	4653      	mov	r3, sl
 80046e4:	4632      	mov	r2, r6
 80046e6:	4621      	mov	r1, r4
 80046e8:	4640      	mov	r0, r8
 80046ea:	f7ff ff71 	bl	80045d0 <__ssputs_r>
 80046ee:	3001      	adds	r0, #1
 80046f0:	f000 80a4 	beq.w	800483c <_svfiprintf_r+0x1b8>
 80046f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046f6:	4453      	add	r3, sl
 80046f8:	9309      	str	r3, [sp, #36]	; 0x24
 80046fa:	783b      	ldrb	r3, [r7, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f000 809d 	beq.w	800483c <_svfiprintf_r+0x1b8>
 8004702:	2300      	movs	r3, #0
 8004704:	f04f 32ff 	mov.w	r2, #4294967295
 8004708:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800470c:	9304      	str	r3, [sp, #16]
 800470e:	9307      	str	r3, [sp, #28]
 8004710:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004714:	931a      	str	r3, [sp, #104]	; 0x68
 8004716:	462f      	mov	r7, r5
 8004718:	2205      	movs	r2, #5
 800471a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800471e:	4850      	ldr	r0, [pc, #320]	; (8004860 <_svfiprintf_r+0x1dc>)
 8004720:	f7fb fd5e 	bl	80001e0 <memchr>
 8004724:	9b04      	ldr	r3, [sp, #16]
 8004726:	b9d0      	cbnz	r0, 800475e <_svfiprintf_r+0xda>
 8004728:	06d9      	lsls	r1, r3, #27
 800472a:	bf44      	itt	mi
 800472c:	2220      	movmi	r2, #32
 800472e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004732:	071a      	lsls	r2, r3, #28
 8004734:	bf44      	itt	mi
 8004736:	222b      	movmi	r2, #43	; 0x2b
 8004738:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800473c:	782a      	ldrb	r2, [r5, #0]
 800473e:	2a2a      	cmp	r2, #42	; 0x2a
 8004740:	d015      	beq.n	800476e <_svfiprintf_r+0xea>
 8004742:	9a07      	ldr	r2, [sp, #28]
 8004744:	462f      	mov	r7, r5
 8004746:	2000      	movs	r0, #0
 8004748:	250a      	movs	r5, #10
 800474a:	4639      	mov	r1, r7
 800474c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004750:	3b30      	subs	r3, #48	; 0x30
 8004752:	2b09      	cmp	r3, #9
 8004754:	d94d      	bls.n	80047f2 <_svfiprintf_r+0x16e>
 8004756:	b1b8      	cbz	r0, 8004788 <_svfiprintf_r+0x104>
 8004758:	e00f      	b.n	800477a <_svfiprintf_r+0xf6>
 800475a:	462f      	mov	r7, r5
 800475c:	e7b8      	b.n	80046d0 <_svfiprintf_r+0x4c>
 800475e:	4a40      	ldr	r2, [pc, #256]	; (8004860 <_svfiprintf_r+0x1dc>)
 8004760:	1a80      	subs	r0, r0, r2
 8004762:	fa0b f000 	lsl.w	r0, fp, r0
 8004766:	4318      	orrs	r0, r3
 8004768:	9004      	str	r0, [sp, #16]
 800476a:	463d      	mov	r5, r7
 800476c:	e7d3      	b.n	8004716 <_svfiprintf_r+0x92>
 800476e:	9a03      	ldr	r2, [sp, #12]
 8004770:	1d11      	adds	r1, r2, #4
 8004772:	6812      	ldr	r2, [r2, #0]
 8004774:	9103      	str	r1, [sp, #12]
 8004776:	2a00      	cmp	r2, #0
 8004778:	db01      	blt.n	800477e <_svfiprintf_r+0xfa>
 800477a:	9207      	str	r2, [sp, #28]
 800477c:	e004      	b.n	8004788 <_svfiprintf_r+0x104>
 800477e:	4252      	negs	r2, r2
 8004780:	f043 0302 	orr.w	r3, r3, #2
 8004784:	9207      	str	r2, [sp, #28]
 8004786:	9304      	str	r3, [sp, #16]
 8004788:	783b      	ldrb	r3, [r7, #0]
 800478a:	2b2e      	cmp	r3, #46	; 0x2e
 800478c:	d10c      	bne.n	80047a8 <_svfiprintf_r+0x124>
 800478e:	787b      	ldrb	r3, [r7, #1]
 8004790:	2b2a      	cmp	r3, #42	; 0x2a
 8004792:	d133      	bne.n	80047fc <_svfiprintf_r+0x178>
 8004794:	9b03      	ldr	r3, [sp, #12]
 8004796:	1d1a      	adds	r2, r3, #4
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	9203      	str	r2, [sp, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	bfb8      	it	lt
 80047a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80047a4:	3702      	adds	r7, #2
 80047a6:	9305      	str	r3, [sp, #20]
 80047a8:	4d2e      	ldr	r5, [pc, #184]	; (8004864 <_svfiprintf_r+0x1e0>)
 80047aa:	7839      	ldrb	r1, [r7, #0]
 80047ac:	2203      	movs	r2, #3
 80047ae:	4628      	mov	r0, r5
 80047b0:	f7fb fd16 	bl	80001e0 <memchr>
 80047b4:	b138      	cbz	r0, 80047c6 <_svfiprintf_r+0x142>
 80047b6:	2340      	movs	r3, #64	; 0x40
 80047b8:	1b40      	subs	r0, r0, r5
 80047ba:	fa03 f000 	lsl.w	r0, r3, r0
 80047be:	9b04      	ldr	r3, [sp, #16]
 80047c0:	4303      	orrs	r3, r0
 80047c2:	3701      	adds	r7, #1
 80047c4:	9304      	str	r3, [sp, #16]
 80047c6:	7839      	ldrb	r1, [r7, #0]
 80047c8:	4827      	ldr	r0, [pc, #156]	; (8004868 <_svfiprintf_r+0x1e4>)
 80047ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047ce:	2206      	movs	r2, #6
 80047d0:	1c7e      	adds	r6, r7, #1
 80047d2:	f7fb fd05 	bl	80001e0 <memchr>
 80047d6:	2800      	cmp	r0, #0
 80047d8:	d038      	beq.n	800484c <_svfiprintf_r+0x1c8>
 80047da:	4b24      	ldr	r3, [pc, #144]	; (800486c <_svfiprintf_r+0x1e8>)
 80047dc:	bb13      	cbnz	r3, 8004824 <_svfiprintf_r+0x1a0>
 80047de:	9b03      	ldr	r3, [sp, #12]
 80047e0:	3307      	adds	r3, #7
 80047e2:	f023 0307 	bic.w	r3, r3, #7
 80047e6:	3308      	adds	r3, #8
 80047e8:	9303      	str	r3, [sp, #12]
 80047ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047ec:	444b      	add	r3, r9
 80047ee:	9309      	str	r3, [sp, #36]	; 0x24
 80047f0:	e76d      	b.n	80046ce <_svfiprintf_r+0x4a>
 80047f2:	fb05 3202 	mla	r2, r5, r2, r3
 80047f6:	2001      	movs	r0, #1
 80047f8:	460f      	mov	r7, r1
 80047fa:	e7a6      	b.n	800474a <_svfiprintf_r+0xc6>
 80047fc:	2300      	movs	r3, #0
 80047fe:	3701      	adds	r7, #1
 8004800:	9305      	str	r3, [sp, #20]
 8004802:	4619      	mov	r1, r3
 8004804:	250a      	movs	r5, #10
 8004806:	4638      	mov	r0, r7
 8004808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800480c:	3a30      	subs	r2, #48	; 0x30
 800480e:	2a09      	cmp	r2, #9
 8004810:	d903      	bls.n	800481a <_svfiprintf_r+0x196>
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0c8      	beq.n	80047a8 <_svfiprintf_r+0x124>
 8004816:	9105      	str	r1, [sp, #20]
 8004818:	e7c6      	b.n	80047a8 <_svfiprintf_r+0x124>
 800481a:	fb05 2101 	mla	r1, r5, r1, r2
 800481e:	2301      	movs	r3, #1
 8004820:	4607      	mov	r7, r0
 8004822:	e7f0      	b.n	8004806 <_svfiprintf_r+0x182>
 8004824:	ab03      	add	r3, sp, #12
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	4622      	mov	r2, r4
 800482a:	4b11      	ldr	r3, [pc, #68]	; (8004870 <_svfiprintf_r+0x1ec>)
 800482c:	a904      	add	r1, sp, #16
 800482e:	4640      	mov	r0, r8
 8004830:	f7fe f97a 	bl	8002b28 <_printf_float>
 8004834:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004838:	4681      	mov	r9, r0
 800483a:	d1d6      	bne.n	80047ea <_svfiprintf_r+0x166>
 800483c:	89a3      	ldrh	r3, [r4, #12]
 800483e:	065b      	lsls	r3, r3, #25
 8004840:	f53f af35 	bmi.w	80046ae <_svfiprintf_r+0x2a>
 8004844:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004846:	b01d      	add	sp, #116	; 0x74
 8004848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800484c:	ab03      	add	r3, sp, #12
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	4622      	mov	r2, r4
 8004852:	4b07      	ldr	r3, [pc, #28]	; (8004870 <_svfiprintf_r+0x1ec>)
 8004854:	a904      	add	r1, sp, #16
 8004856:	4640      	mov	r0, r8
 8004858:	f7fe fc1c 	bl	8003094 <_printf_i>
 800485c:	e7ea      	b.n	8004834 <_svfiprintf_r+0x1b0>
 800485e:	bf00      	nop
 8004860:	08004b64 	.word	0x08004b64
 8004864:	08004b6a 	.word	0x08004b6a
 8004868:	08004b6e 	.word	0x08004b6e
 800486c:	08002b29 	.word	0x08002b29
 8004870:	080045d1 	.word	0x080045d1

08004874 <__ascii_mbtowc>:
 8004874:	b082      	sub	sp, #8
 8004876:	b901      	cbnz	r1, 800487a <__ascii_mbtowc+0x6>
 8004878:	a901      	add	r1, sp, #4
 800487a:	b142      	cbz	r2, 800488e <__ascii_mbtowc+0x1a>
 800487c:	b14b      	cbz	r3, 8004892 <__ascii_mbtowc+0x1e>
 800487e:	7813      	ldrb	r3, [r2, #0]
 8004880:	600b      	str	r3, [r1, #0]
 8004882:	7812      	ldrb	r2, [r2, #0]
 8004884:	1c10      	adds	r0, r2, #0
 8004886:	bf18      	it	ne
 8004888:	2001      	movne	r0, #1
 800488a:	b002      	add	sp, #8
 800488c:	4770      	bx	lr
 800488e:	4610      	mov	r0, r2
 8004890:	e7fb      	b.n	800488a <__ascii_mbtowc+0x16>
 8004892:	f06f 0001 	mvn.w	r0, #1
 8004896:	e7f8      	b.n	800488a <__ascii_mbtowc+0x16>

08004898 <memmove>:
 8004898:	4288      	cmp	r0, r1
 800489a:	b510      	push	{r4, lr}
 800489c:	eb01 0302 	add.w	r3, r1, r2
 80048a0:	d807      	bhi.n	80048b2 <memmove+0x1a>
 80048a2:	1e42      	subs	r2, r0, #1
 80048a4:	4299      	cmp	r1, r3
 80048a6:	d00a      	beq.n	80048be <memmove+0x26>
 80048a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048ac:	f802 4f01 	strb.w	r4, [r2, #1]!
 80048b0:	e7f8      	b.n	80048a4 <memmove+0xc>
 80048b2:	4283      	cmp	r3, r0
 80048b4:	d9f5      	bls.n	80048a2 <memmove+0xa>
 80048b6:	1881      	adds	r1, r0, r2
 80048b8:	1ad2      	subs	r2, r2, r3
 80048ba:	42d3      	cmn	r3, r2
 80048bc:	d100      	bne.n	80048c0 <memmove+0x28>
 80048be:	bd10      	pop	{r4, pc}
 80048c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048c4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80048c8:	e7f7      	b.n	80048ba <memmove+0x22>

080048ca <_realloc_r>:
 80048ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048cc:	4607      	mov	r7, r0
 80048ce:	4614      	mov	r4, r2
 80048d0:	460e      	mov	r6, r1
 80048d2:	b921      	cbnz	r1, 80048de <_realloc_r+0x14>
 80048d4:	4611      	mov	r1, r2
 80048d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80048da:	f7fe b837 	b.w	800294c <_malloc_r>
 80048de:	b922      	cbnz	r2, 80048ea <_realloc_r+0x20>
 80048e0:	f7fd ffe6 	bl	80028b0 <_free_r>
 80048e4:	4625      	mov	r5, r4
 80048e6:	4628      	mov	r0, r5
 80048e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048ea:	f000 f821 	bl	8004930 <_malloc_usable_size_r>
 80048ee:	42a0      	cmp	r0, r4
 80048f0:	d20f      	bcs.n	8004912 <_realloc_r+0x48>
 80048f2:	4621      	mov	r1, r4
 80048f4:	4638      	mov	r0, r7
 80048f6:	f7fe f829 	bl	800294c <_malloc_r>
 80048fa:	4605      	mov	r5, r0
 80048fc:	2800      	cmp	r0, #0
 80048fe:	d0f2      	beq.n	80048e6 <_realloc_r+0x1c>
 8004900:	4631      	mov	r1, r6
 8004902:	4622      	mov	r2, r4
 8004904:	f7ff fb6e 	bl	8003fe4 <memcpy>
 8004908:	4631      	mov	r1, r6
 800490a:	4638      	mov	r0, r7
 800490c:	f7fd ffd0 	bl	80028b0 <_free_r>
 8004910:	e7e9      	b.n	80048e6 <_realloc_r+0x1c>
 8004912:	4635      	mov	r5, r6
 8004914:	e7e7      	b.n	80048e6 <_realloc_r+0x1c>

08004916 <__ascii_wctomb>:
 8004916:	b149      	cbz	r1, 800492c <__ascii_wctomb+0x16>
 8004918:	2aff      	cmp	r2, #255	; 0xff
 800491a:	bf85      	ittet	hi
 800491c:	238a      	movhi	r3, #138	; 0x8a
 800491e:	6003      	strhi	r3, [r0, #0]
 8004920:	700a      	strbls	r2, [r1, #0]
 8004922:	f04f 30ff 	movhi.w	r0, #4294967295
 8004926:	bf98      	it	ls
 8004928:	2001      	movls	r0, #1
 800492a:	4770      	bx	lr
 800492c:	4608      	mov	r0, r1
 800492e:	4770      	bx	lr

08004930 <_malloc_usable_size_r>:
 8004930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004934:	1f18      	subs	r0, r3, #4
 8004936:	2b00      	cmp	r3, #0
 8004938:	bfbc      	itt	lt
 800493a:	580b      	ldrlt	r3, [r1, r0]
 800493c:	18c0      	addlt	r0, r0, r3
 800493e:	4770      	bx	lr

08004940 <_init>:
 8004940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004942:	bf00      	nop
 8004944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004946:	bc08      	pop	{r3}
 8004948:	469e      	mov	lr, r3
 800494a:	4770      	bx	lr

0800494c <_fini>:
 800494c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494e:	bf00      	nop
 8004950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004952:	bc08      	pop	{r3}
 8004954:	469e      	mov	lr, r3
 8004956:	4770      	bx	lr
